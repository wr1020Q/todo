{"ast":null,"code":"import axios from 'axios';\nimport refreshUser from \"./TaskService\";\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3000/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n});\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\napiClient.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // 401かつ再試行してない場合\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise(function (resolve, reject) {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(() => {\n        return apiClient(originalRequest);\n      });\n    }\n    originalRequest._retry = true;\n    isRefreshing = true;\n    try {\n      await refreshUser(); // トークン更新\n      processQueue(null);\n      return apiClient(originalRequest); // 元のリクエストを再実行\n    } catch (err) {\n      processQueue(err, null);\n      return Promise.reject(err);\n    } finally {\n      isRefreshing = false;\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","refreshUser","apiClient","create","baseURL","withCredentials","headers","timeout","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","request","use","config","Promise","response","_error$response","originalRequest","status","_retry","push","then","err"],"sources":["C:/Users/hinan/todo-app/client/src/services/apiClient.js"],"sourcesContent":["import axios from 'axios';\r\nimport refreshUser from \"./TaskService\"\r\n\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:3000/api', \r\n  withCredentials: true, \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 5000, \r\n});\r\n\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach(prom => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n\r\n  failedQueue = [];\r\n};\r\n\r\n\r\napiClient.interceptors.request.use(function (config) {\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });\r\n\r\n\r\n  apiClient.interceptors.response.use(\r\n    response => response,\r\n   async error => {\r\n        const originalRequest = error.config;\r\n\r\n    // 401かつ再試行してない場合\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      if (isRefreshing) {\r\n        return new Promise(function(resolve, reject) {\r\n          failedQueue.push({ resolve, reject });\r\n        }).then(() => {\r\n          return apiClient(originalRequest);\r\n        });\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      isRefreshing = true;\r\n\r\n      try {\r\n        await refreshUser(); // トークン更新\r\n        processQueue(null);\r\n        return apiClient(originalRequest); // 元のリクエストを再実行\r\n      } catch (err) {\r\n        processQueue(err, null);\r\n        return Promise.reject(err);\r\n      } finally {\r\n        isRefreshing = false;\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAGvC,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,WAAW,GAAG,EAAE;AAEpB,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,GAAG,IAAI,KAAK;EAC5CH,WAAW,CAACI,OAAO,CAACC,IAAI,IAAI;IAC1B,IAAIH,KAAK,EAAE;MACTG,IAAI,CAACC,MAAM,CAACJ,KAAK,CAAC;IACpB,CAAC,MAAM;MACLG,IAAI,CAACE,OAAO,CAACJ,KAAK,CAAC;IACrB;EACF,CAAC,CAAC;EAEFH,WAAW,GAAG,EAAE;AAClB,CAAC;AAGDP,SAAS,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACjD,OAAOA,MAAM;AACf,CAAC,EAAE,UAAUT,KAAK,EAAE;EAClB,OAAOU,OAAO,CAACN,MAAM,CAACJ,KAAK,CAAC;AAC9B,CAAC,CAAC;AAGFT,SAAS,CAACe,YAAY,CAACK,QAAQ,CAACH,GAAG,CACjCG,QAAQ,IAAIA,QAAQ,EACrB,MAAMX,KAAK,IAAI;EAAA,IAAAY,eAAA;EACV,MAAMC,eAAe,GAAGb,KAAK,CAACS,MAAM;;EAExC;EACA,IAAI,EAAAG,eAAA,GAAAZ,KAAK,CAACW,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7D,IAAIlB,YAAY,EAAE;MAChB,OAAO,IAAIa,OAAO,CAAC,UAASL,OAAO,EAAED,MAAM,EAAE;QAC3CN,WAAW,CAACkB,IAAI,CAAC;UAAEX,OAAO;UAAED;QAAO,CAAC,CAAC;MACvC,CAAC,CAAC,CAACa,IAAI,CAAC,MAAM;QACZ,OAAO1B,SAAS,CAACsB,eAAe,CAAC;MACnC,CAAC,CAAC;IACJ;IAEAA,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7BlB,YAAY,GAAG,IAAI;IAEnB,IAAI;MACF,MAAMP,WAAW,CAAC,CAAC,CAAC,CAAC;MACrBS,YAAY,CAAC,IAAI,CAAC;MAClB,OAAOR,SAAS,CAACsB,eAAe,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZnB,YAAY,CAACmB,GAAG,EAAE,IAAI,CAAC;MACvB,OAAOR,OAAO,CAACN,MAAM,CAACc,GAAG,CAAC;IAC5B,CAAC,SAAS;MACRrB,YAAY,GAAG,KAAK;IACtB;EACF;EACA,OAAOa,OAAO,CAACN,MAAM,CAACJ,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEJ,eAAeT,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}