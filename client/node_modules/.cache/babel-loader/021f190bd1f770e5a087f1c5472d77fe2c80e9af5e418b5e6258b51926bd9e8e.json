{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from'react';import{logoutUser,refreshUser}from'../services/login';import{useNavigate}from'react-router-dom';import{showSuccess,showError}from'../utils/toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(\"\");const[loading,setLoading]=useState(true);const navigate=useNavigate();// マウント時にリフレッシュトークンでログイン状態確認\nuseEffect(()=>{const checkAuth=async()=>{try{const res=await refreshUser();// リフレッシュAPI\nconsole.log(\"リフレッシュ\",res);setUser(res.user);// 返ってきたユーザー情報をセット\n}catch(err){console.error('リフレッシュエラー AUTH:',err);setUser(null);await logoutUser();navigate(\"/login\");}finally{setLoading(false);}};checkAuth();},[]);//ログアウト\nconst logout=async()=>{try{await logoutUser();setUser(null);navigate(\"/login\");showSuccess(`ログアウトしました`);}catch(err){console.error(\"ログアウト失敗\",err);showError(\"ログアウトに失敗しました\");}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,setUser,logout,loading,setLoading},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useContext","useState","useEffect","logoutUser","refreshUser","useNavigate","showSuccess","showError","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","navigate","checkAuth","res","console","log","err","error","logout","Provider","value","useAuth"],"sources":["C:/Users/hinan/todo-app/client/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState ,useEffect} from 'react';\r\nimport { logoutUser , refreshUser} from '../services/login';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { showSuccess,showError } from '../utils/toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser ] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // マウント時にリフレッシュトークンでログイン状態確認\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const res = await refreshUser(); // リフレッシュAPI\r\n        console.log(\"リフレッシュ\",res);\r\n        setUser(res.user); // 返ってきたユーザー情報をセット\r\n      } catch (err) {\r\n        console.error('リフレッシュエラー AUTH:', err);\r\n        setUser(null);\r\n        await logoutUser();\r\n        navigate(\"/login\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, []);\r\n\r\n  //ログアウト\r\n  const logout = async () => {\r\n    try {\r\n        await logoutUser();\r\n        setUser(null); \r\n        navigate(\"/login\");\r\n        showSuccess(`ログアウトしました`) \r\n    } catch (err) {\r\n        console.error(\"ログアウト失敗\", err);\r\n        showError(\"ログアウトに失敗しました\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, setUser, logout ,loading ,setLoading}}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CACrE,OAASC,UAAU,CAAGC,WAAW,KAAO,mBAAmB,CAC3D,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,WAAW,CAACC,SAAS,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvD,KAAM,CAAAC,WAAW,cAAGX,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAY,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAE,CAAGd,QAAQ,CAAC,EAAE,CAAC,CACrC,KAAM,CAACe,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAAiB,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAE9B;AACAH,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAhB,WAAW,CAAC,CAAC,CAAE;AACjCiB,OAAO,CAACC,GAAG,CAAC,QAAQ,CAACF,GAAG,CAAC,CACzBL,OAAO,CAACK,GAAG,CAACN,IAAI,CAAC,CAAE;AACrB,CAAE,MAAOS,GAAG,CAAE,CACZF,OAAO,CAACG,KAAK,CAAC,iBAAiB,CAAED,GAAG,CAAC,CACrCR,OAAO,CAAC,IAAI,CAAC,CACb,KAAM,CAAAZ,UAAU,CAAC,CAAC,CAClBe,QAAQ,CAAC,QAAQ,CAAC,CACpB,CAAC,OAAS,CACRD,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CACDE,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAM,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACA,KAAM,CAAAtB,UAAU,CAAC,CAAC,CAClBY,OAAO,CAAC,IAAI,CAAC,CACbG,QAAQ,CAAC,QAAQ,CAAC,CAClBZ,WAAW,CAAC,WAAW,CAAC,CAC5B,CAAE,MAAOiB,GAAG,CAAE,CACVF,OAAO,CAACG,KAAK,CAAC,SAAS,CAAED,GAAG,CAAC,CAC7BhB,SAAS,CAAC,cAAc,CAAC,CAC7B,CACF,CAAC,CAED,mBACEE,IAAA,CAACC,WAAW,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEb,IAAI,CAAEC,OAAO,CAAEU,MAAM,CAAET,OAAO,CAAEC,UAAU,CAAE,CAAAJ,QAAA,CACxEA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAe,OAAO,CAAGA,CAAA,GAAM5B,UAAU,CAACU,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}