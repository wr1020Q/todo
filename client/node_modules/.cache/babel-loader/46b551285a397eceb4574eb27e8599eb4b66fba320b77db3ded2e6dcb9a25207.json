{"ast":null,"code":"import axios from 'axios';\nimport { refreshUser } from \"./login.js\";\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3000/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n});\naxios.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n// let isRefreshing = false;\n// let failedQueue = [];\n\n// const processQueue = (error, token = null) => {\n//   failedQueue.forEach(prom => {\n//     if (error) {\n//       prom.reject(error);\n//     } else {\n//       prom.resolve(token);\n//     }\n//   });\n\n//   failedQueue = [];\n// };\n\n// apiClient.interceptors.request.use(function (config) {\n//     return config;\n//   }, function (error) {\n//     return Promise.reject(error);\n//   });\n\n//   apiClient.interceptors.response.use(\n//     response => response,\n//    async error => {\n//         const originalRequest = error.config;\n\n//     // 401かつ再試行してない場合\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       if (isRefreshing) {\n//         return new Promise(function(resolve, reject) {\n//           failedQueue.push({ resolve, reject });\n//         }).then(() => {\n//           return apiClient(originalRequest);\n//         });\n//       }\n\n//       originalRequest._retry = true;\n//       isRefreshing = true;\n\n//       try {\n//         await refreshUser(); // トークン更新\n//         processQueue(null);\n//         return apiClient(originalRequest); // 元のリクエストを再実行\n//       } catch (err) {\n//         console.error(\"refreshUser error:\", err); \n//         processQueue(err, null);\n//         return Promise.reject(err);\n//       } finally {\n//         isRefreshing = false;\n//       }\n\n//     }\n//     return Promise.reject(error);\n//   });\n\nexport default apiClient;","map":{"version":3,"names":["axios","refreshUser","apiClient","create","baseURL","withCredentials","headers","timeout","interceptors","request","use","config","error","Promise","reject","response"],"sources":["C:/Users/hinan/todo-app/client/src/services/apiClient.js"],"sourcesContent":["import axios from 'axios';\r\nimport {refreshUser} from \"./login.js\"\r\n\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:3000/api', \r\n  withCredentials: true, \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 5000, \r\n});\r\n\r\naxios.interceptors.request.use(function (config) {\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });\r\n\r\naxios.interceptors.response.use(function (response) {\r\n    return response;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });\r\n\r\n// let isRefreshing = false;\r\n// let failedQueue = [];\r\n\r\n// const processQueue = (error, token = null) => {\r\n//   failedQueue.forEach(prom => {\r\n//     if (error) {\r\n//       prom.reject(error);\r\n//     } else {\r\n//       prom.resolve(token);\r\n//     }\r\n//   });\r\n\r\n//   failedQueue = [];\r\n// };\r\n\r\n\r\n// apiClient.interceptors.request.use(function (config) {\r\n//     return config;\r\n//   }, function (error) {\r\n//     return Promise.reject(error);\r\n//   });\r\n\r\n\r\n//   apiClient.interceptors.response.use(\r\n//     response => response,\r\n//    async error => {\r\n//         const originalRequest = error.config;\r\n\r\n//     // 401かつ再試行してない場合\r\n//     if (error.response?.status === 401 && !originalRequest._retry) {\r\n//       if (isRefreshing) {\r\n//         return new Promise(function(resolve, reject) {\r\n//           failedQueue.push({ resolve, reject });\r\n//         }).then(() => {\r\n//           return apiClient(originalRequest);\r\n//         });\r\n//       }\r\n\r\n//       originalRequest._retry = true;\r\n//       isRefreshing = true;\r\n\r\n//       try {\r\n//         await refreshUser(); // トークン更新\r\n//         processQueue(null);\r\n//         return apiClient(originalRequest); // 元のリクエストを再実行\r\n//       } catch (err) {\r\n//         console.error(\"refreshUser error:\", err); \r\n//         processQueue(err, null);\r\n//         return Promise.reject(err);\r\n//       } finally {\r\n//         isRefreshing = false;\r\n//       }\r\n      \r\n//     }\r\n//     return Promise.reject(error);\r\n//   });\r\n\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,QAAO,YAAY;AAGtC,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFP,KAAK,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAC7C,OAAOA,MAAM;AACf,CAAC,EAAE,UAAUC,KAAK,EAAE;EAClB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEJZ,KAAK,CAACQ,YAAY,CAACO,QAAQ,CAACL,GAAG,CAAC,UAAUK,QAAQ,EAAE;EAChD,OAAOA,QAAQ;AACjB,CAAC,EAAE,UAAUH,KAAK,EAAE;EAClB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAeV,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}