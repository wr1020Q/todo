{"ast":null,"code":"// src/glossary.ts\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\n\n// src/utils/fetchUtils.ts\nvar _FetchResponse = class extends Response {\n  static isConfigurableStatusCode(status) {\n    return status >= 200 && status <= 599;\n  }\n  static isRedirectResponse(status) {\n    return _FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status);\n  }\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status) {\n    return !_FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status);\n  }\n  static setUrl(url, response) {\n    if (!url) {\n      return;\n    }\n    if (response.url != \"\") {\n      return;\n    }\n    Object.defineProperty(response, \"url\", {\n      value: url,\n      enumerable: true,\n      configurable: true,\n      writable: false\n    });\n  }\n  /**\n   * Parses the given raw HTTP headers into a Fetch API `Headers` instance.\n   */\n  static parseRawHeaders(rawHeaders) {\n    const headers = new Headers();\n    for (let line = 0; line < rawHeaders.length; line += 2) {\n      headers.append(rawHeaders[line], rawHeaders[line + 1]);\n    }\n    return headers;\n  }\n  constructor(body, init = {}) {\n    var _a;\n    const status = (_a = init.status) != null ? _a : 200;\n    const safeStatus = _FetchResponse.isConfigurableStatusCode(status) ? status : 200;\n    const finalBody = _FetchResponse.isResponseWithBody(status) ? body : null;\n    super(finalBody, {\n      ...init,\n      status: safeStatus\n    });\n    if (status !== safeStatus) {\n      const stateSymbol = Object.getOwnPropertySymbols(this).find(symbol => symbol.description === \"state\");\n      if (stateSymbol) {\n        const state = Reflect.get(this, stateSymbol);\n        Reflect.set(state, \"status\", status);\n      } else {\n        Object.defineProperty(this, \"status\", {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false\n        });\n      }\n    }\n    _FetchResponse.setUrl(init.url, this);\n  }\n};\nvar FetchResponse = _FetchResponse;\n/**\n * Response status codes for responses that cannot have body.\n * @see https://fetch.spec.whatwg.org/#statuses\n */\nFetchResponse.STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304];\nFetchResponse.STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308];\nexport { IS_PATCHED_MODULE, FetchResponse };","map":{"version":3,"names":["IS_PATCHED_MODULE","Symbol","_FetchResponse","Response","isConfigurableStatusCode","status","isRedirectResponse","STATUS_CODES_WITH_REDIRECT","includes","isResponseWithBody","STATUS_CODES_WITHOUT_BODY","setUrl","url","response","Object","defineProperty","value","enumerable","configurable","writable","parseRawHeaders","rawHeaders","headers","Headers","line","length","append","constructor","body","init","_a","safeStatus","finalBody","stateSymbol","getOwnPropertySymbols","find","symbol","description","state","Reflect","get","set","FetchResponse"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\@mswjs\\interceptors\\src\\glossary.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\@mswjs\\interceptors\\src\\utils\\fetchUtils.ts"],"sourcesContent":["import type { RequestController } from './RequestController'\n\nexport const IS_PATCHED_MODULE: unique symbol = Symbol('isPatchedModule')\n\n/**\n * @note Export `RequestController` as a type only.\n * It's never meant to be created in the userland.\n */\nexport type { RequestController }\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport type HttpRequestEventMap = {\n  request: [\n    args: {\n      request: Request\n      requestId: string\n      controller: RequestController\n    }\n  ]\n  response: [\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ]\n  unhandledException: [\n    args: {\n      error: unknown\n      request: Request\n      requestId: string\n      controller: RequestController\n    }\n  ]\n}\n","export interface FetchResponseInit extends ResponseInit {\n  url?: string\n}\n\nexport class FetchResponse extends Response {\n  /**\n   * Response status codes for responses that cannot have body.\n   * @see https://fetch.spec.whatwg.org/#statuses\n   */\n  static readonly STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304]\n\n  static readonly STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308]\n\n  static isConfigurableStatusCode(status: number): boolean {\n    return status >= 200 && status <= 599\n  }\n\n  static isRedirectResponse(status: number): boolean {\n    return FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status)\n  }\n\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status: number): boolean {\n    return !FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status)\n  }\n\n  static setUrl(url: string | undefined, response: Response): void {\n    if (!url) {\n      return\n    }\n\n    if (response.url != '') {\n      return\n    }\n\n    Object.defineProperty(response, 'url', {\n      value: url,\n      enumerable: true,\n      configurable: true,\n      writable: false,\n    })\n  }\n\n  /**\n   * Parses the given raw HTTP headers into a Fetch API `Headers` instance.\n   */\n  static parseRawHeaders(rawHeaders: Array<string>): Headers {\n    const headers = new Headers()\n    for (let line = 0; line < rawHeaders.length; line += 2) {\n      headers.append(rawHeaders[line], rawHeaders[line + 1])\n    }\n    return headers\n  }\n\n  constructor(body?: BodyInit | null, init: FetchResponseInit = {}) {\n    const status = init.status ?? 200\n    const safeStatus = FetchResponse.isConfigurableStatusCode(status)\n      ? status\n      : 200\n    const finalBody = FetchResponse.isResponseWithBody(status) ? body : null\n\n    super(finalBody, {\n      ...init,\n      status: safeStatus,\n    })\n\n    if (status !== safeStatus) {\n      /**\n       * @note Undici keeps an internal \"Symbol(state)\" that holds\n       * the actual value of response status. Update that in Node.js.\n       */\n      const stateSymbol = Object.getOwnPropertySymbols(this).find(\n        (symbol) => symbol.description === 'state'\n      )\n      if (stateSymbol) {\n        const state = Reflect.get(this, stateSymbol) as object\n        Reflect.set(state, 'status', status)\n      } else {\n        Object.defineProperty(this, 'status', {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false,\n        })\n      }\n    }\n\n    FetchResponse.setUrl(init.url, this)\n  }\n}\n"],"mappings":";AAEO,IAAMA,iBAAA,GAAmCC,MAAA,CAAO,iBAAiB;;;ACEjE,IAAMC,cAAA,GAAN,cAA4BC,QAAA,CAAS;EAS1C,OAAOC,yBAAyBC,MAAA,EAAyB;IACvD,OAAOA,MAAA,IAAU,OAAOA,MAAA,IAAU;EACpC;EAEA,OAAOC,mBAAmBD,MAAA,EAAyB;IACjD,OAAOH,cAAA,CAAcK,0BAAA,CAA2BC,QAAA,CAASH,MAAM;EACjE;EAAA;AAAA;AAAA;AAAA;EAMA,OAAOI,mBAAmBJ,MAAA,EAAyB;IACjD,OAAO,CAACH,cAAA,CAAcQ,yBAAA,CAA0BF,QAAA,CAASH,MAAM;EACjE;EAEA,OAAOM,OAAOC,GAAA,EAAyBC,QAAA,EAA0B;IAC/D,IAAI,CAACD,GAAA,EAAK;MACR;IACF;IAEA,IAAIC,QAAA,CAASD,GAAA,IAAO,IAAI;MACtB;IACF;IAEAE,MAAA,CAAOC,cAAA,CAAeF,QAAA,EAAU,OAAO;MACrCG,KAAA,EAAOJ,GAAA;MACPK,UAAA,EAAY;MACZC,YAAA,EAAc;MACdC,QAAA,EAAU;IACZ,CAAC;EACH;EAAA;AAAA;AAAA;EAKA,OAAOC,gBAAgBC,UAAA,EAAoC;IACzD,MAAMC,OAAA,GAAU,IAAIC,OAAA,CAAQ;IAC5B,SAASC,IAAA,GAAO,GAAGA,IAAA,GAAOH,UAAA,CAAWI,MAAA,EAAQD,IAAA,IAAQ,GAAG;MACtDF,OAAA,CAAQI,MAAA,CAAOL,UAAA,CAAWG,IAAI,GAAGH,UAAA,CAAWG,IAAA,GAAO,CAAC,CAAC;IACvD;IACA,OAAOF,OAAA;EACT;EAEAK,YAAYC,IAAA,EAAwBC,IAAA,GAA0B,CAAC,GAAG;IAzDpE,IAAAC,EAAA;IA0DI,MAAMzB,MAAA,IAASyB,EAAA,GAAAD,IAAA,CAAKxB,MAAA,KAAL,OAAAyB,EAAA,GAAe;IAC9B,MAAMC,UAAA,GAAa7B,cAAA,CAAcE,wBAAA,CAAyBC,MAAM,IAC5DA,MAAA,GACA;IACJ,MAAM2B,SAAA,GAAY9B,cAAA,CAAcO,kBAAA,CAAmBJ,MAAM,IAAIuB,IAAA,GAAO;IAEpE,MAAMI,SAAA,EAAW;MACf,GAAGH,IAAA;MACHxB,MAAA,EAAQ0B;IACV,CAAC;IAED,IAAI1B,MAAA,KAAW0B,UAAA,EAAY;MAKzB,MAAME,WAAA,GAAcnB,MAAA,CAAOoB,qBAAA,CAAsB,IAAI,EAAEC,IAAA,CACpDC,MAAA,IAAWA,MAAA,CAAOC,WAAA,KAAgB,OACrC;MACA,IAAIJ,WAAA,EAAa;QACf,MAAMK,KAAA,GAAQC,OAAA,CAAQC,GAAA,CAAI,MAAMP,WAAW;QAC3CM,OAAA,CAAQE,GAAA,CAAIH,KAAA,EAAO,UAAUjC,MAAM;MACrC,OAAO;QACLS,MAAA,CAAOC,cAAA,CAAe,MAAM,UAAU;UACpCC,KAAA,EAAOX,MAAA;UACPY,UAAA,EAAY;UACZC,YAAA,EAAc;UACdC,QAAA,EAAU;QACZ,CAAC;MACH;IACF;IAEAjB,cAAA,CAAcS,MAAA,CAAOkB,IAAA,CAAKjB,GAAA,EAAK,IAAI;EACrC;AACF;AAxFO,IAAM8B,aAAA,GAANxC,cAAA;AAAA;AAAA;AAAA;AAAA;AAAMwC,aAAA,CAKKhC,yBAAA,GAA4B,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG;AALzDgC,aAAA,CAOKnC,0BAAA,GAA6B,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}