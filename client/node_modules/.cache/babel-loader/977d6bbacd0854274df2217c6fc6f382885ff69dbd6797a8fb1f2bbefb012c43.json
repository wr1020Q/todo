{"ast":null,"code":"// node_modules/.pnpm/outvariant@1.4.3/node_modules/outvariant/lib/index.mjs\nvar POSITIONALS_EXP = /(%?)(%([sdijo]))/g;\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    case \"s\":\n      return positional;\n    case \"d\":\n    case \"i\":\n      return Number(positional);\n    case \"j\":\n      return JSON.stringify(positional);\n    case \"o\":\n      {\n        if (typeof positional === \"string\") {\n          return positional;\n        }\n        const json = JSON.stringify(positional);\n        if (json === \"{}\" || json === \"[]\" || /^\\[object .+?\\]$/.test(json)) {\n          return positional;\n        }\n        return json;\n      }\n  }\n}\nfunction format(message) {\n  for (var _len = arguments.length, positionals = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    positionals[_key - 1] = arguments[_key];\n  }\n  if (positionals.length === 0) {\n    return message;\n  }\n  let positionalIndex = 0;\n  let formattedMessage = message.replace(POSITIONALS_EXP, (match, isEscaped, _, flag) => {\n    const positional = positionals[positionalIndex];\n    const value = serializePositional(positional, flag);\n    if (!isEscaped) {\n      positionalIndex++;\n      return value;\n    }\n    return match;\n  });\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(\" \")}`;\n  }\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, \"%\");\n  return formattedMessage;\n}\nvar STACK_FRAMES_TO_IGNORE = 2;\nfunction cleanErrorStack(error2) {\n  if (!error2.stack) {\n    return;\n  }\n  const nextStack = error2.stack.split(\"\\n\");\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n  error2.stack = nextStack.join(\"\\n\");\n}\nvar InvariantError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = \"Invariant Violation\";\n    for (var _len2 = arguments.length, positionals = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      positionals[_key2 - 1] = arguments[_key2];\n    }\n    this.message = format(message, ...positionals);\n    cleanErrorStack(this);\n  }\n};\nvar invariant = function (predicate, message) {\n  if (!predicate) {\n    for (var _len3 = arguments.length, positionals = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      positionals[_key3 - 2] = arguments[_key3];\n    }\n    throw new InvariantError(message, ...positionals);\n  }\n};\ninvariant.as = function (ErrorConstructor, predicate, message) {\n  if (!predicate) {\n    for (var _len4 = arguments.length, positionals = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\n      positionals[_key4 - 3] = arguments[_key4];\n    }\n    const formatMessage = positionals.length === 0 ? message : format(message, ...positionals);\n    let error2;\n    try {\n      error2 = Reflect.construct(ErrorConstructor, [formatMessage]);\n    } catch (err) {\n      error2 = ErrorConstructor(formatMessage);\n    }\n    throw error2;\n  }\n};\n\n// node_modules/.pnpm/is-node-process@1.2.0/node_modules/is-node-process/lib/index.mjs\nfunction isNodeProcess() {\n  if (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") {\n    return true;\n  }\n  if (typeof process !== \"undefined\") {\n    const type = process.type;\n    if (type === \"renderer\" || type === \"worker\") {\n      return false;\n    }\n    return !!(process.versions && process.versions.node);\n  }\n  return false;\n}\n\n// src/browser/setupWorker/start/createStartHandler.ts\nimport { devUtils as devUtils7 } from '../core/utils/internal/devUtils.mjs';\n\n// node_modules/.pnpm/@open-draft+until@2.1.0/node_modules/@open-draft/until/lib/index.mjs\nvar until = async promise => {\n  try {\n    const data = await promise().catch(error2 => {\n      throw error2;\n    });\n    return {\n      error: null,\n      data\n    };\n  } catch (error2) {\n    return {\n      error: error2,\n      data: null\n    };\n  }\n};\n\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\nimport { devUtils } from '../core/utils/internal/devUtils.mjs';\n\n// src/browser/utils/getAbsoluteWorkerUrl.ts\nfunction getAbsoluteWorkerUrl(workerUrl) {\n  return new URL(workerUrl, location.href).href;\n}\n\n// src/browser/setupWorker/start/utils/getWorkerByRegistration.ts\nfunction getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {\n  const allStates = [registration.active, registration.installing, registration.waiting];\n  const relevantStates = allStates.filter(state => {\n    return state != null;\n  });\n  const worker = relevantStates.find(worker2 => {\n    return findWorker(worker2.scriptURL, absoluteWorkerUrl);\n  });\n  return worker || null;\n}\n\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\nvar getWorkerInstance = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let findWorker = arguments.length > 2 ? arguments[2] : undefined;\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);\n  const mockRegistrations = await navigator.serviceWorker.getRegistrations().then(registrations => registrations.filter(registration => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)));\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    location.reload();\n  }\n  const [existingRegistration] = mockRegistrations;\n  if (existingRegistration) {\n    existingRegistration.update();\n    return [getWorkerByRegistration(existingRegistration, absoluteWorkerUrl, findWorker), existingRegistration];\n  }\n  const registrationResult = await until(async () => {\n    const registration = await navigator.serviceWorker.register(url, options);\n    return [\n    // Compare existing worker registration by its worker URL,\n    // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\n    getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker), registration];\n  });\n  if (registrationResult.error) {\n    const isWorkerMissing = registrationResult.error.message.includes(\"(404)\");\n    if (isWorkerMissing) {\n      const scopeUrl = new URL(options?.scope || \"/\", location.href);\n      throw new Error(devUtils.formatMessage(`Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\n\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`));\n    }\n    throw new Error(devUtils.formatMessage(\"Failed to register the Service Worker:\\n\\n%s\", registrationResult.error.message));\n  }\n  return registrationResult.data;\n};\n\n// src/browser/setupWorker/start/utils/enableMocking.ts\nimport { devUtils as devUtils3 } from '../core/utils/internal/devUtils.mjs';\n\n// src/browser/setupWorker/start/utils/printStartMessage.ts\nimport { devUtils as devUtils2 } from '../core/utils/internal/devUtils.mjs';\nfunction printStartMessage() {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (args.quiet) {\n    return;\n  }\n  const message = args.message || \"Mocking enabled.\";\n  console.groupCollapsed(`%c${devUtils2.formatMessage(message)}`, \"color:orangered;font-weight:bold;\");\n  console.log(\"%cDocumentation: %chttps://mswjs.io/docs\", \"font-weight:bold\", \"font-weight:normal\");\n  console.log(\"Found an issue? https://github.com/mswjs/msw/issues\");\n  if (args.workerUrl) {\n    console.log(\"Worker script URL:\", args.workerUrl);\n  }\n  if (args.workerScope) {\n    console.log(\"Worker scope:\", args.workerScope);\n  }\n  if (args.client) {\n    console.log(\"Client ID: %s (%s)\", args.client.id, args.client.frameType);\n  }\n  console.groupEnd();\n}\n\n// src/browser/setupWorker/start/utils/enableMocking.ts\nasync function enableMocking(context, options) {\n  context.workerChannel.send(\"MOCK_ACTIVATE\");\n  const {\n    payload\n  } = await context.events.once(\"MOCKING_ENABLED\");\n  if (context.isMockingEnabled) {\n    devUtils3.warn(`Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`);\n    return;\n  }\n  context.isMockingEnabled = true;\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: context.registration?.scope,\n    workerUrl: context.worker?.scriptURL,\n    client: payload.client\n  });\n}\n\n// src/browser/setupWorker/start/utils/createMessageChannel.ts\nvar WorkerChannel = class {\n  constructor(port) {\n    this.port = port;\n  }\n  postMessage(event) {\n    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      rest[_key5 - 1] = arguments[_key5];\n    }\n    const [data, transfer] = rest;\n    this.port.postMessage({\n      type: event,\n      data\n    }, {\n      transfer\n    });\n  }\n};\n\n// src/browser/utils/pruneGetRequestBody.ts\nfunction pruneGetRequestBody(request) {\n  if ([\"HEAD\", \"GET\"].includes(request.method)) {\n    return void 0;\n  }\n  return request.body;\n}\n\n// src/browser/utils/parseWorkerRequest.ts\nfunction parseWorkerRequest(incomingRequest) {\n  return new Request(incomingRequest.url, {\n    ...incomingRequest,\n    body: pruneGetRequestBody(incomingRequest)\n  });\n}\n\n// src/browser/setupWorker/start/createRequestListener.ts\nimport { RequestHandler } from '../core/handlers/RequestHandler.mjs';\nimport { handleRequest } from '../core/utils/handleRequest.mjs';\nimport { devUtils as devUtils4 } from '../core/utils/internal/devUtils.mjs';\nimport { toResponseInit } from '../core/utils/toResponseInit.mjs';\nimport { isHandlerKind } from '../core/utils/internal/isHandlerKind.mjs';\nvar createRequestListener = (context, options) => {\n  return async (event, message) => {\n    const messageChannel = new WorkerChannel(event.ports[0]);\n    const requestId = message.payload.id;\n    const request = parseWorkerRequest(message.payload);\n    const requestCloneForLogs = request.clone();\n    const requestClone = request.clone();\n    RequestHandler.cache.set(request, requestClone);\n    context.requests.set(requestId, requestClone);\n    try {\n      await handleRequest(request, requestId, context.getRequestHandlers().filter(isHandlerKind(\"RequestHandler\")), options, context.emitter, {\n        onPassthroughResponse() {\n          messageChannel.postMessage(\"PASSTHROUGH\");\n        },\n        async onMockedResponse(response, _ref) {\n          let {\n            handler,\n            parsedResult\n          } = _ref;\n          const responseClone = response.clone();\n          const responseCloneForLogs = response.clone();\n          const responseInit = toResponseInit(response);\n          if (context.supports.readableStreamTransfer) {\n            const responseStreamOrNull = response.body;\n            messageChannel.postMessage(\"MOCK_RESPONSE\", {\n              ...responseInit,\n              body: responseStreamOrNull\n            }, responseStreamOrNull ? [responseStreamOrNull] : void 0);\n          } else {\n            const responseBufferOrNull = response.body === null ? null : await responseClone.arrayBuffer();\n            messageChannel.postMessage(\"MOCK_RESPONSE\", {\n              ...responseInit,\n              body: responseBufferOrNull\n            });\n          }\n          if (!options.quiet) {\n            context.emitter.once(\"response:mocked\", () => {\n              handler.log({\n                request: requestCloneForLogs,\n                response: responseCloneForLogs,\n                parsedResult\n              });\n            });\n          }\n        }\n      });\n    } catch (error2) {\n      if (error2 instanceof Error) {\n        devUtils4.error(`Uncaught exception in the request handler for \"%s %s\":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`, request.method, request.url, error2.stack ?? error2);\n        messageChannel.postMessage(\"MOCK_RESPONSE\", {\n          status: 500,\n          statusText: \"Request Handler Error\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: error2.name,\n            message: error2.message,\n            stack: error2.stack\n          })\n        });\n      }\n    }\n  };\n};\n\n// src/browser/utils/checkWorkerIntegrity.ts\nimport { devUtils as devUtils5 } from '../core/utils/internal/devUtils.mjs';\nasync function checkWorkerIntegrity(context) {\n  context.workerChannel.send(\"INTEGRITY_CHECK_REQUEST\");\n  const {\n    payload\n  } = await context.events.once(\"INTEGRITY_CHECK_RESPONSE\");\n  if (payload.checksum !== \"00729d72e3b82faf54ca8b9621dbb96f\") {\n    devUtils5.warn(`The currently registered Service Worker has been generated by a different version of MSW (${payload.packageVersion}) and may not be fully compatible with the installed version.\n\nIt's recommended you update your worker script by running this command:\n\n  \\u2022 npx msw init <PUBLIC_DIR>\n\nYou can also automate this process and make the worker script update automatically upon the library installations. Read more: https://mswjs.io/docs/cli/init.`);\n  }\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-6HYIRFX2.mjs\nvar encoder = new TextEncoder();\nfunction encodeBuffer(text) {\n  return encoder.encode(text);\n}\nfunction decodeBuffer(buffer, encoding) {\n  const decoder = new TextDecoder(encoding);\n  return decoder.decode(buffer);\n}\nfunction toArrayBuffer(array) {\n  return array.buffer.slice(array.byteOffset, array.byteOffset + array.byteLength);\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-F4BN745U.mjs\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\nvar _FetchResponse = class extends Response {\n  static isConfigurableStatusCode(status) {\n    return status >= 200 && status <= 599;\n  }\n  static isRedirectResponse(status) {\n    return _FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status);\n  }\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status) {\n    return !_FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status);\n  }\n  static setUrl(url, response) {\n    if (!url) {\n      return;\n    }\n    if (response.url != \"\") {\n      return;\n    }\n    Object.defineProperty(response, \"url\", {\n      value: url,\n      enumerable: true,\n      configurable: true,\n      writable: false\n    });\n  }\n  constructor(body) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    const status = (_a = init.status) != null ? _a : 200;\n    const safeStatus = _FetchResponse.isConfigurableStatusCode(status) ? status : 200;\n    const finalBody = _FetchResponse.isResponseWithBody(status) ? body : null;\n    super(finalBody, {\n      ...init,\n      status: safeStatus\n    });\n    if (status !== safeStatus) {\n      const stateSymbol = Object.getOwnPropertySymbols(this).find(symbol => symbol.description === \"state\");\n      if (stateSymbol) {\n        const state = Reflect.get(this, stateSymbol);\n        Reflect.set(state, \"status\", status);\n      } else {\n        Object.defineProperty(this, \"status\", {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false\n        });\n      }\n    }\n    _FetchResponse.setUrl(init.url, this);\n  }\n};\nvar FetchResponse = _FetchResponse;\nFetchResponse.STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304];\nFetchResponse.STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308];\n\n// node_modules/.pnpm/@open-draft+logger@0.3.0/node_modules/@open-draft/logger/lib/index.mjs\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message) {\n    for (var _len6 = arguments.length, positionals = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      positionals[_key6 - 1] = arguments[_key6];\n    }\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message) {\n    var _this = this;\n    for (var _len7 = arguments.length, positionals = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      positionals[_key7 - 1] = arguments[_key7];\n    }\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return function (message2) {\n      performance2.measure();\n      for (var _len8 = arguments.length, positionals2 = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        positionals2[_key8 - 1] = arguments[_key8];\n      }\n      _this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: _this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message) {\n    for (var _len9 = arguments.length, positionals = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      positionals[_key9 - 1] = arguments[_key9];\n    }\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message) {\n    for (var _len10 = arguments.length, positionals = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n      positionals[_key10 - 1] = arguments[_key10];\n    }\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message) {\n    for (var _len11 = arguments.length, positionals = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n      positionals[_key11 - 1] = arguments[_key11];\n    }\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write([colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"), ...positionals.map(serializeInput));\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\"en-GB\")}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\":\n        {\n          return log;\n        }\n      case \"warning\":\n        {\n          return warn;\n        }\n      case \"error\":\n        {\n          return error;\n        }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message) {\n  for (var _len12 = arguments.length, positionals = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n    positionals[_key12 - 1] = arguments[_key12];\n  }\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message) {\n  for (var _len13 = arguments.length, positionals = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n    positionals[_key13 - 1] = arguments[_key13];\n  }\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message) {\n  for (var _len14 = arguments.length, positionals = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n    positionals[_key14 - 1] = arguments[_key14];\n  }\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\n\n// node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/lib/index.mjs\nvar MemoryLeakError = class extends Error {\n  constructor(emitter, type, count) {\n    super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);\n    this.emitter = emitter;\n    this.type = type;\n    this.count = count;\n    this.name = \"MaxListenersExceededWarning\";\n  }\n};\nvar _Emitter = class {\n  static listenerCount(emitter, eventName) {\n    return emitter.listenerCount(eventName);\n  }\n  constructor() {\n    this.events = /* @__PURE__ */new Map();\n    this.maxListeners = _Emitter.defaultMaxListeners;\n    this.hasWarnedAboutPotentialMemoryLeak = false;\n  }\n  _emitInternalEvent(internalEventName, eventName, listener) {\n    this.emit(internalEventName, ...[eventName, listener]);\n  }\n  _getListeners(eventName) {\n    return Array.prototype.concat.apply([], this.events.get(eventName)) || [];\n  }\n  _removeListener(listeners, listener) {\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n    return [];\n  }\n  _wrapOnceListener(eventName, listener) {\n    var _this2 = this;\n    const onceListener = function () {\n      _this2.removeListener(eventName, onceListener);\n      for (var _len15 = arguments.length, data = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n        data[_key15] = arguments[_key15];\n      }\n      return listener.apply(_this2, data);\n    };\n    Object.defineProperty(onceListener, \"name\", {\n      value: listener.name\n    });\n    return onceListener;\n  }\n  setMaxListeners(maxListeners) {\n    this.maxListeners = maxListeners;\n    return this;\n  }\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  getMaxListeners() {\n    return this.maxListeners;\n  }\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  emit(eventName) {\n    for (var _len16 = arguments.length, data = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n      data[_key16 - 1] = arguments[_key16];\n    }\n    const listeners = this._getListeners(eventName);\n    listeners.forEach(listener => {\n      listener.apply(this, data);\n    });\n    return listeners.length > 0;\n  }\n  addListener(eventName, listener) {\n    this._emitInternalEvent(\"newListener\", eventName, listener);\n    const nextListeners = this._getListeners(eventName).concat(listener);\n    this.events.set(eventName, nextListeners);\n    if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {\n      this.hasWarnedAboutPotentialMemoryLeak = true;\n      const memoryLeakWarning = new MemoryLeakError(this, eventName, this.listenerCount(eventName));\n      console.warn(memoryLeakWarning);\n    }\n    return this;\n  }\n  on(eventName, listener) {\n    return this.addListener(eventName, listener);\n  }\n  once(eventName, listener) {\n    return this.addListener(eventName, this._wrapOnceListener(eventName, listener));\n  }\n  prependListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners);\n      this.events.set(eventName, nextListeners);\n    } else {\n      this.events.set(eventName, listeners.concat(listener));\n    }\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));\n  }\n  removeListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener);\n      this.events.set(eventName, listeners);\n      this._emitInternalEvent(\"removeListener\", eventName, listener);\n    }\n    return this;\n  }\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener);\n  }\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  listeners(eventName) {\n    return Array.from(this._getListeners(eventName));\n  }\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  listenerCount(eventName) {\n    return this._getListeners(eventName).length;\n  }\n  rawListeners(eventName) {\n    return this.listeners(eventName);\n  }\n};\nvar Emitter = _Emitter;\nEmitter.defaultMaxListeners = 10;\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs\nvar INTERNAL_REQUEST_ID_HEADER_NAME = \"x-interceptors-internal-request-id\";\nfunction getGlobalSymbol(symbol) {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0\n  );\n}\nfunction setGlobalSymbol(symbol, value) {\n  globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n  delete globalThis[symbol];\n}\nvar Interceptor = class {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.readyState = \"INACTIVE\";\n    this.emitter = new Emitter();\n    this.subscriptions = [];\n    this.logger = new Logger(symbol.description);\n    this.emitter.setMaxListeners(0);\n    this.logger.info(\"constructing the interceptor...\");\n  }\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  checkEnvironment() {\n    return true;\n  }\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  apply() {\n    const logger = this.logger.extend(\"apply\");\n    logger.info(\"applying the interceptor...\");\n    if (this.readyState === \"APPLIED\") {\n      logger.info(\"intercepted already applied!\");\n      return;\n    }\n    const shouldApply = this.checkEnvironment();\n    if (!shouldApply) {\n      logger.info(\"the interceptor cannot be applied in this environment!\");\n      return;\n    }\n    this.readyState = \"APPLYING\";\n    const runningInstance = this.getInstance();\n    if (runningInstance) {\n      logger.info(\"found a running instance, reusing...\");\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event);\n        runningInstance.emitter.addListener(event, listener);\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener);\n          logger.info('removed proxied \"%s\" listener!', event);\n        });\n        return this;\n      };\n      this.readyState = \"APPLIED\";\n      return;\n    }\n    logger.info(\"no running instance found, setting up a new instance...\");\n    this.setup();\n    this.setInstance();\n    this.readyState = \"APPLIED\";\n  }\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  setup() {}\n  /**\n   * Listen to the interceptor's public events.\n   */\n  on(event, listener) {\n    const logger = this.logger.extend(\"on\");\n    if (this.readyState === \"DISPOSING\" || this.readyState === \"DISPOSED\") {\n      logger.info(\"cannot listen to events, already disposed!\");\n      return this;\n    }\n    logger.info('adding \"%s\" event listener:', event, listener);\n    this.emitter.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this.emitter.once(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this.emitter.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this.emitter.removeAllListeners(event);\n    return this;\n  }\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  dispose() {\n    const logger = this.logger.extend(\"dispose\");\n    if (this.readyState === \"DISPOSED\") {\n      logger.info(\"cannot dispose, already disposed!\");\n      return;\n    }\n    logger.info(\"disposing the interceptor...\");\n    this.readyState = \"DISPOSING\";\n    if (!this.getInstance()) {\n      logger.info(\"no interceptors running, skipping dispose...\");\n      return;\n    }\n    this.clearInstance();\n    logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n    if (this.subscriptions.length > 0) {\n      logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n      for (const dispose of this.subscriptions) {\n        dispose();\n      }\n      this.subscriptions = [];\n      logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n    }\n    this.emitter.removeAllListeners();\n    logger.info(\"destroyed the listener!\");\n    this.readyState = \"DISPOSED\";\n  }\n  getInstance() {\n    var _a;\n    const instance = getGlobalSymbol(this.symbol);\n    this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n    return instance;\n  }\n  setInstance() {\n    setGlobalSymbol(this.symbol, this);\n    this.logger.info(\"set global instance!\", this.symbol.description);\n  }\n  clearInstance() {\n    deleteGlobalSymbol(this.symbol);\n    this.logger.info(\"cleared global instance!\", this.symbol.description);\n  }\n};\nfunction createRequestId() {\n  return Math.random().toString(16).slice(2);\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/index.mjs\nvar BatchInterceptor = class extends Interceptor {\n  constructor(options) {\n    BatchInterceptor.symbol = Symbol(options.name);\n    super(BatchInterceptor.symbol);\n    this.interceptors = options.interceptors;\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info(\"applying all %d interceptors...\", this.interceptors.length);\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name);\n      interceptor.apply();\n      logger.info(\"adding interceptor dispose subscription\");\n      this.subscriptions.push(() => interceptor.dispose());\n    }\n  }\n  on(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener);\n    }\n    return this;\n  }\n  once(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener);\n    }\n    return this;\n  }\n  off(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener);\n    }\n    return this;\n  }\n  removeAllListeners(event) {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event);\n    }\n    return this;\n  }\n};\n\n// src/browser/setupWorker/start/createResponseListener.ts\nfunction createResponseListener(context) {\n  return (_, message) => {\n    const {\n      payload: responseJson\n    } = message;\n    const {\n      requestId\n    } = responseJson;\n    const request = context.requests.get(requestId);\n    context.requests.delete(requestId);\n    if (responseJson.type?.includes(\"opaque\")) {\n      return;\n    }\n    const response = responseJson.status === 0 ? Response.error() : new FetchResponse(\n    /**\n     * Responses may be streams here, but when we create a response object\n     * with null-body status codes, like 204, 205, 304 Response will\n     * throw when passed a non-null body, so ensure it's null here\n     * for those codes\n     */\n    FetchResponse.isResponseWithBody(responseJson.status) ? responseJson.body : null, {\n      ...responseJson,\n      /**\n       * Set response URL if it's not set already.\n       * @see https://github.com/mswjs/msw/issues/2030\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Response/url\n       */\n      url: request.url\n    });\n    context.emitter.emit(responseJson.isMockedResponse ? \"response:mocked\" : \"response:bypass\", {\n      response,\n      request,\n      requestId: responseJson.requestId\n    });\n  };\n}\n\n// src/browser/setupWorker/start/utils/validateWorkerScope.ts\nimport { devUtils as devUtils6 } from '../core/utils/internal/devUtils.mjs';\nfunction validateWorkerScope(registration, options) {\n  if (!options?.quiet && !location.href.startsWith(registration.scope)) {\n    devUtils6.warn(`Cannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level (\"/\") of your application.\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.`);\n  }\n}\n\n// src/browser/setupWorker/start/createStartHandler.ts\nvar createStartHandler = context => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      context.events.removeAllListeners();\n      context.workerChannel.on(\"REQUEST\", createRequestListener(context, options));\n      context.workerChannel.on(\"RESPONSE\", createResponseListener(context));\n      const instance = await getWorkerInstance(options.serviceWorker.url, options.serviceWorker.options, options.findWorker);\n      const [worker, registration] = instance;\n      if (!worker) {\n        const missingWorkerMessage = customOptions?.findWorker ? devUtils7.formatMessage(`Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`, options.serviceWorker.url) : devUtils7.formatMessage(`Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`, options.serviceWorker.url, location.host);\n        throw new Error(missingWorkerMessage);\n      }\n      context.worker = worker;\n      context.registration = registration;\n      context.events.addListener(window, \"beforeunload\", () => {\n        if (worker.state !== \"redundant\") {\n          context.workerChannel.send(\"CLIENT_CLOSED\");\n        }\n        window.clearInterval(context.keepAliveInterval);\n        window.postMessage({\n          type: \"msw/worker:stop\"\n        });\n      });\n      await checkWorkerIntegrity(context).catch(error2 => {\n        devUtils7.error(\"Error while checking the worker script integrity. Please report this on GitHub (https://github.com/mswjs/msw/issues), including the original error below.\");\n        console.error(error2);\n      });\n      context.keepAliveInterval = window.setInterval(() => context.workerChannel.send(\"KEEPALIVE_REQUEST\"), 5e3);\n      validateWorkerScope(registration, context.startOptions);\n      return registration;\n    };\n    const workerRegistration = startWorkerInstance().then(async registration => {\n      const pendingInstance = registration.installing || registration.waiting;\n      if (pendingInstance) {\n        await new Promise(resolve => {\n          pendingInstance.addEventListener(\"statechange\", () => {\n            if (pendingInstance.state === \"activated\") {\n              return resolve();\n            }\n          });\n        });\n      }\n      await enableMocking(context, options).catch(error2 => {\n        throw new Error(`Failed to enable mocking: ${error2?.message}`);\n      });\n      return registration;\n    });\n    return workerRegistration;\n  };\n};\n\n// src/browser/setupWorker/stop/createStop.ts\nimport { devUtils as devUtils9 } from '../core/utils/internal/devUtils.mjs';\n\n// src/browser/setupWorker/stop/utils/printStopMessage.ts\nimport { devUtils as devUtils8 } from '../core/utils/internal/devUtils.mjs';\nfunction printStopMessage() {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (args.quiet) {\n    return;\n  }\n  console.log(`%c${devUtils8.formatMessage(\"Mocking disabled.\")}`, \"color:orangered;font-weight:bold;\");\n}\n\n// src/browser/setupWorker/stop/createStop.ts\nvar createStop = context => {\n  return function stop() {\n    if (!context.isMockingEnabled) {\n      devUtils9.warn('Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.');\n      return;\n    }\n    context.workerChannel.send(\"MOCK_DEACTIVATE\");\n    context.isMockingEnabled = false;\n    window.clearInterval(context.keepAliveInterval);\n    window.postMessage({\n      type: \"msw/worker:stop\"\n    });\n    printStopMessage({\n      quiet: context.startOptions?.quiet\n    });\n  };\n};\n\n// src/browser/setupWorker/start/utils/prepareStartHandler.ts\nimport { mergeRight } from '../core/utils/internal/mergeRight.mjs';\nvar DEFAULT_START_OPTIONS = {\n  serviceWorker: {\n    url: \"/mockServiceWorker.js\",\n    options: null\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: \"warn\",\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl;\n  }\n};\n\n// node_modules/.pnpm/@open-draft+deferred-promise@2.2.0/node_modules/@open-draft/deferred-promise/build/index.mjs\nfunction createDeferredExecutor() {\n  const executor = (resolve, reject) => {\n    executor.state = \"pending\";\n    executor.resolve = data => {\n      if (executor.state !== \"pending\") {\n        return;\n      }\n      executor.result = data;\n      const onFulfilled = value => {\n        executor.state = \"fulfilled\";\n        return value;\n      };\n      return resolve(data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled));\n    };\n    executor.reject = reason => {\n      if (executor.state !== \"pending\") {\n        return;\n      }\n      queueMicrotask(() => {\n        executor.state = \"rejected\";\n      });\n      return reject(executor.rejectionReason = reason);\n    };\n  };\n  return executor;\n}\nvar DeferredPromise = class extends Promise {\n  #executor;\n  resolve;\n  reject;\n  constructor() {\n    let executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const deferredExecutor = createDeferredExecutor();\n    super((originalResolve, originalReject) => {\n      deferredExecutor(originalResolve, originalReject);\n      executor?.(deferredExecutor.resolve, deferredExecutor.reject);\n    });\n    this.#executor = deferredExecutor;\n    this.resolve = this.#executor.resolve;\n    this.reject = this.#executor.reject;\n  }\n  get state() {\n    return this.#executor.state;\n  }\n  get rejectionReason() {\n    return this.#executor.rejectionReason;\n  }\n  then(onFulfilled, onRejected) {\n    return this.#decorate(super.then(onFulfilled, onRejected));\n  }\n  catch(onRejected) {\n    return this.#decorate(super.catch(onRejected));\n  }\n  finally(onfinally) {\n    return this.#decorate(super.finally(onfinally));\n  }\n  #decorate(promise) {\n    return Object.defineProperties(promise, {\n      resolve: {\n        configurable: true,\n        value: this.resolve\n      },\n      reject: {\n        configurable: true,\n        value: this.reject\n      }\n    });\n  }\n};\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-H5O73WD2.mjs\nvar InterceptorError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InterceptorError\";\n    Object.setPrototypeOf(this, InterceptorError.prototype);\n  }\n};\nvar kRequestHandled = Symbol(\"kRequestHandled\");\nvar kResponsePromise = Symbol(\"kResponsePromise\");\nvar RequestController = class {\n  constructor(request) {\n    this.request = request;\n    this[kRequestHandled] = false;\n    this[kResponsePromise] = new DeferredPromise();\n  }\n  /**\n   * Respond to this request with the given `Response` instance.\n   * @example\n   * controller.respondWith(new Response())\n   * controller.respondWith(Response.json({ id }))\n   * controller.respondWith(Response.error())\n   */\n  respondWith(response) {\n    invariant.as(InterceptorError, !this[kRequestHandled], 'Failed to respond to the \"%s %s\" request: the \"request\" event has already been handled.', this.request.method, this.request.url);\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(response);\n  }\n  /**\n   * Error this request with the given error.\n   * @example\n   * controller.errorWith()\n   * controller.errorWith(new Error('Oops!'))\n   */\n  errorWith(error2) {\n    invariant.as(InterceptorError, !this[kRequestHandled], 'Failed to error the \"%s %s\" request: the \"request\" event has already been handled.', this.request.method, this.request.url);\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(error2);\n  }\n};\nasync function emitAsync(emitter, eventName) {\n  const listners = emitter.listeners(eventName);\n  if (listners.length === 0) {\n    return;\n  }\n  for (var _len17 = arguments.length, data = new Array(_len17 > 2 ? _len17 - 2 : 0), _key17 = 2; _key17 < _len17; _key17++) {\n    data[_key17 - 2] = arguments[_key17];\n  }\n  for (const listener of listners) {\n    await listener.apply(emitter, data);\n  }\n}\nfunction isPropertyAccessible(obj, key) {\n  try {\n    obj[key];\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction createServerErrorResponse(body) {\n  return new Response(JSON.stringify(body instanceof Error ? {\n    name: body.name,\n    message: body.message,\n    stack: body.stack\n  } : body), {\n    status: 500,\n    statusText: \"Unhandled Exception\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\nfunction isResponseError(response) {\n  return isPropertyAccessible(response, \"type\") && response.type === \"error\";\n}\nfunction isNodeLikeError(error2) {\n  if (error2 == null) {\n    return false;\n  }\n  if (!(error2 instanceof Error)) {\n    return false;\n  }\n  return \"code\" in error2 && \"errno\" in error2;\n}\nasync function handleRequest2(options) {\n  const handleResponse = async response => {\n    if (response instanceof Error) {\n      options.onError(response);\n    } else if (isResponseError(response)) {\n      options.onRequestError(response);\n    } else {\n      await options.onResponse(response);\n    }\n    return true;\n  };\n  const handleResponseError = async error2 => {\n    if (error2 instanceof InterceptorError) {\n      throw result.error;\n    }\n    if (isNodeLikeError(error2)) {\n      options.onError(error2);\n      return true;\n    }\n    if (error2 instanceof Response) {\n      return await handleResponse(error2);\n    }\n    return false;\n  };\n  options.emitter.once(\"request\", _ref2 => {\n    let {\n      requestId: pendingRequestId\n    } = _ref2;\n    if (pendingRequestId !== options.requestId) {\n      return;\n    }\n    if (options.controller[kResponsePromise].state === \"pending\") {\n      options.controller[kResponsePromise].resolve(void 0);\n    }\n  });\n  const requestAbortPromise = new DeferredPromise();\n  if (options.request.signal) {\n    if (options.request.signal.aborted) {\n      requestAbortPromise.reject(options.request.signal.reason);\n    } else {\n      options.request.signal.addEventListener(\"abort\", () => {\n        requestAbortPromise.reject(options.request.signal.reason);\n      }, {\n        once: true\n      });\n    }\n  }\n  const result = await until(async () => {\n    const requestListtenersPromise = emitAsync(options.emitter, \"request\", {\n      requestId: options.requestId,\n      request: options.request,\n      controller: options.controller\n    });\n    await Promise.race([\n    // Short-circuit the request handling promise if the request gets aborted.\n    requestAbortPromise, requestListtenersPromise, options.controller[kResponsePromise]]);\n    const mockedResponse = await options.controller[kResponsePromise];\n    return mockedResponse;\n  });\n  if (requestAbortPromise.state === \"rejected\") {\n    options.onError(requestAbortPromise.rejectionReason);\n    return true;\n  }\n  if (result.error) {\n    if (await handleResponseError(result.error)) {\n      return true;\n    }\n    if (options.emitter.listenerCount(\"unhandledException\") > 0) {\n      const unhandledExceptionController = new RequestController(options.request);\n      await emitAsync(options.emitter, \"unhandledException\", {\n        error: result.error,\n        request: options.request,\n        requestId: options.requestId,\n        controller: unhandledExceptionController\n      }).then(() => {\n        if (unhandledExceptionController[kResponsePromise].state === \"pending\") {\n          unhandledExceptionController[kResponsePromise].resolve(void 0);\n        }\n      });\n      const nextResult = await until(() => unhandledExceptionController[kResponsePromise]);\n      if (nextResult.error) {\n        return handleResponseError(nextResult.error);\n      }\n      if (nextResult.data) {\n        return handleResponse(nextResult.data);\n      }\n    }\n    options.onResponse(createServerErrorResponse(result.error));\n    return true;\n  }\n  if (result.data) {\n    return handleResponse(result.data);\n  }\n  return false;\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs\nfunction hasConfigurableGlobal(propertyName) {\n  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName);\n  if (typeof descriptor === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"function\" && typeof descriptor.get() === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"undefined\" && descriptor.value == null) {\n    return false;\n  }\n  if (typeof descriptor.set === \"undefined\" && !descriptor.configurable) {\n    console.error(`[MSW] Failed to apply interceptor: the global \\`${propertyName}\\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`);\n    return false;\n  }\n  return true;\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-HER3NHBG.mjs\nfunction canParseUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n}\nfunction createNetworkError(cause) {\n  return Object.assign(new TypeError(\"Failed to fetch\"), {\n    cause\n  });\n}\nvar REQUEST_BODY_HEADERS = [\"content-encoding\", \"content-language\", \"content-location\", \"content-type\", \"content-length\"];\nvar kRedirectCount = Symbol(\"kRedirectCount\");\nasync function followFetchRedirect(request, response) {\n  if (response.status !== 303 && request.body != null) {\n    return Promise.reject(createNetworkError());\n  }\n  const requestUrl = new URL(request.url);\n  let locationUrl;\n  try {\n    locationUrl = new URL(response.headers.get(\"location\"), request.url);\n  } catch (error2) {\n    return Promise.reject(createNetworkError(error2));\n  }\n  if (!(locationUrl.protocol === \"http:\" || locationUrl.protocol === \"https:\")) {\n    return Promise.reject(createNetworkError(\"URL scheme must be a HTTP(S) scheme\"));\n  }\n  if (Reflect.get(request, kRedirectCount) > 20) {\n    return Promise.reject(createNetworkError(\"redirect count exceeded\"));\n  }\n  Object.defineProperty(request, kRedirectCount, {\n    value: (Reflect.get(request, kRedirectCount) || 0) + 1\n  });\n  if (request.mode === \"cors\" && (locationUrl.username || locationUrl.password) && !sameOrigin(requestUrl, locationUrl)) {\n    return Promise.reject(createNetworkError('cross origin not allowed for request mode \"cors\"'));\n  }\n  const requestInit = {};\n  if ([301, 302].includes(response.status) && request.method === \"POST\" || response.status === 303 && ![\"HEAD\", \"GET\"].includes(request.method)) {\n    requestInit.method = \"GET\";\n    requestInit.body = null;\n    REQUEST_BODY_HEADERS.forEach(headerName => {\n      request.headers.delete(headerName);\n    });\n  }\n  if (!sameOrigin(requestUrl, locationUrl)) {\n    request.headers.delete(\"authorization\");\n    request.headers.delete(\"proxy-authorization\");\n    request.headers.delete(\"cookie\");\n    request.headers.delete(\"host\");\n  }\n  requestInit.headers = request.headers;\n  return fetch(new Request(locationUrl, requestInit));\n}\nfunction sameOrigin(left, right) {\n  if (left.origin === right.origin && left.origin === \"null\") {\n    return true;\n  }\n  if (left.protocol === right.protocol && left.hostname === right.hostname && left.port === right.port) {\n    return true;\n  }\n  return false;\n}\nvar BrotliDecompressionStream = class extends TransformStream {\n  constructor() {\n    console.warn(\"[Interceptors]: Brotli decompression of response streams is not supported in the browser\");\n    super({\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n      }\n    });\n  }\n};\nvar PipelineStream = class extends TransformStream {\n  constructor(transformStreams) {\n    for (var _len18 = arguments.length, strategies = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {\n      strategies[_key18 - 1] = arguments[_key18];\n    }\n    super({}, ...strategies);\n    const readable = [super.readable, ...transformStreams].reduce((readable2, transform) => readable2.pipeThrough(transform));\n    Object.defineProperty(this, \"readable\", {\n      get() {\n        return readable;\n      }\n    });\n  }\n};\nfunction parseContentEncoding(contentEncoding) {\n  return contentEncoding.toLowerCase().split(\",\").map(coding => coding.trim());\n}\nfunction createDecompressionStream(contentEncoding) {\n  if (contentEncoding === \"\") {\n    return null;\n  }\n  const codings = parseContentEncoding(contentEncoding);\n  if (codings.length === 0) {\n    return null;\n  }\n  const transformers = codings.reduceRight((transformers2, coding) => {\n    if (coding === \"gzip\" || coding === \"x-gzip\") {\n      return transformers2.concat(new DecompressionStream(\"gzip\"));\n    } else if (coding === \"deflate\") {\n      return transformers2.concat(new DecompressionStream(\"deflate\"));\n    } else if (coding === \"br\") {\n      return transformers2.concat(new BrotliDecompressionStream());\n    } else {\n      transformers2.length = 0;\n    }\n    return transformers2;\n  }, []);\n  return new PipelineStream(transformers);\n}\nfunction decompressResponse(response) {\n  if (response.body === null) {\n    return null;\n  }\n  const decompressionStream = createDecompressionStream(response.headers.get(\"content-encoding\") || \"\");\n  if (!decompressionStream) {\n    return null;\n  }\n  response.body.pipeTo(decompressionStream.writable);\n  return decompressionStream.readable;\n}\nvar _FetchInterceptor = class extends Interceptor {\n  constructor() {\n    super(_FetchInterceptor.symbol);\n  }\n  checkEnvironment() {\n    return hasConfigurableGlobal(\"fetch\");\n  }\n  async setup() {\n    const pureFetch = globalThis.fetch;\n    invariant(!pureFetch[IS_PATCHED_MODULE], 'Failed to patch the \"fetch\" module: already patched.');\n    globalThis.fetch = async (input, init) => {\n      const requestId = createRequestId();\n      const resolvedInput = typeof input === \"string\" && typeof location !== \"undefined\" && !canParseUrl(input) ? new URL(input, location.origin) : input;\n      const request = new Request(resolvedInput, init);\n      const responsePromise = new DeferredPromise();\n      const controller = new RequestController(request);\n      this.logger.info(\"[%s] %s\", request.method, request.url);\n      this.logger.info(\"awaiting for the mocked response...\");\n      this.logger.info('emitting the \"request\" event for %s listener(s)...', this.emitter.listenerCount(\"request\"));\n      const isRequestHandled = await handleRequest2({\n        request,\n        requestId,\n        emitter: this.emitter,\n        controller,\n        onResponse: async rawResponse => {\n          this.logger.info(\"received mocked response!\", {\n            rawResponse\n          });\n          const decompressedStream = decompressResponse(rawResponse);\n          const response = decompressedStream === null ? rawResponse : new FetchResponse(decompressedStream, rawResponse);\n          FetchResponse.setUrl(request.url, response);\n          if (FetchResponse.isRedirectResponse(response.status)) {\n            if (request.redirect === \"error\") {\n              responsePromise.reject(createNetworkError(\"unexpected redirect\"));\n              return;\n            }\n            if (request.redirect === \"follow\") {\n              followFetchRedirect(request, response).then(response2 => {\n                responsePromise.resolve(response2);\n              }, reason => {\n                responsePromise.reject(reason);\n              });\n              return;\n            }\n          }\n          if (this.emitter.listenerCount(\"response\") > 0) {\n            this.logger.info('emitting the \"response\" event...');\n            await emitAsync(this.emitter, \"response\", {\n              // Clone the mocked response for the \"response\" event listener.\n              // This way, the listener can read the response and not lock its body\n              // for the actual fetch consumer.\n              response: response.clone(),\n              isMockedResponse: true,\n              request,\n              requestId\n            });\n          }\n          responsePromise.resolve(response);\n        },\n        onRequestError: response => {\n          this.logger.info(\"request has errored!\", {\n            response\n          });\n          responsePromise.reject(createNetworkError(response));\n        },\n        onError: error2 => {\n          this.logger.info(\"request has been aborted!\", {\n            error: error2\n          });\n          responsePromise.reject(error2);\n        }\n      });\n      if (isRequestHandled) {\n        this.logger.info(\"request has been handled, returning mock promise...\");\n        return responsePromise;\n      }\n      this.logger.info(\"no mocked response received, performing request as-is...\");\n      return pureFetch(request).then(async response => {\n        this.logger.info(\"original fetch performed\", response);\n        if (this.emitter.listenerCount(\"response\") > 0) {\n          this.logger.info('emitting the \"response\" event...');\n          const responseClone = response.clone();\n          await emitAsync(this.emitter, \"response\", {\n            response: responseClone,\n            isMockedResponse: false,\n            request,\n            requestId\n          });\n        }\n        return response;\n      });\n    };\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.fetch = pureFetch;\n      this.logger.info('restored native \"globalThis.fetch\"!', globalThis.fetch.name);\n    });\n  }\n};\nvar FetchInterceptor = _FetchInterceptor;\nFetchInterceptor.symbol = Symbol(\"fetch\");\n\n// node_modules/.pnpm/@mswjs+interceptors@0.37.1/node_modules/@mswjs/interceptors/lib/browser/chunk-4SRQFK76.mjs\nfunction concatArrayBuffer(left, right) {\n  const result = new Uint8Array(left.byteLength + right.byteLength);\n  result.set(left, 0);\n  result.set(right, left.byteLength);\n  return result;\n}\nvar EventPolyfill = class {\n  constructor(type, options) {\n    this.NONE = 0;\n    this.CAPTURING_PHASE = 1;\n    this.AT_TARGET = 2;\n    this.BUBBLING_PHASE = 3;\n    this.type = \"\";\n    this.srcElement = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.isTrusted = true;\n    this.composed = false;\n    this.cancelable = true;\n    this.defaultPrevented = false;\n    this.bubbles = true;\n    this.lengthComputable = true;\n    this.loaded = 0;\n    this.total = 0;\n    this.cancelBubble = false;\n    this.returnValue = true;\n    this.type = type;\n    this.target = (options == null ? void 0 : options.target) || null;\n    this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\n    this.timeStamp = Date.now();\n  }\n  composedPath() {\n    return [];\n  }\n  initEvent(type, bubbles, cancelable) {\n    this.type = type;\n    this.bubbles = !!bubbles;\n    this.cancelable = !!cancelable;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n  stopPropagation() {}\n  stopImmediatePropagation() {}\n};\nvar ProgressEventPolyfill = class extends EventPolyfill {\n  constructor(type, init) {\n    super(type);\n    this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\n    this.composed = (init == null ? void 0 : init.composed) || false;\n    this.loaded = (init == null ? void 0 : init.loaded) || 0;\n    this.total = (init == null ? void 0 : init.total) || 0;\n  }\n};\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\nfunction createEvent(target, type, init) {\n  const progressEvents = [\"error\", \"progress\", \"loadstart\", \"loadend\", \"load\", \"timeout\", \"abort\"];\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\n  const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\n    lengthComputable: true,\n    loaded: (init == null ? void 0 : init.loaded) || 0,\n    total: (init == null ? void 0 : init.total) || 0\n  }) : new EventPolyfill(type, {\n    target,\n    currentTarget: target\n  });\n  return event;\n}\nfunction findPropertySource(target, propertyName) {\n  if (!(propertyName in target)) {\n    return null;\n  }\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\n  if (hasProperty) {\n    return target;\n  }\n  const prototype = Reflect.getPrototypeOf(target);\n  return prototype ? findPropertySource(prototype, propertyName) : null;\n}\nfunction createProxy(target, options) {\n  const proxy = new Proxy(target, optionsToProxyHandler(options));\n  return proxy;\n}\nfunction optionsToProxyHandler(options) {\n  const {\n    constructorCall,\n    methodCall,\n    getProperty,\n    setProperty\n  } = options;\n  const handler = {};\n  if (typeof constructorCall !== \"undefined\") {\n    handler.construct = function (target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target, args, newTarget);\n      return constructorCall.call(newTarget, args, next);\n    };\n  }\n  handler.set = function (target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target;\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(propertySource, propertyName);\n      if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\n        ownDescriptors.set.apply(target, [nextValue]);\n        return true;\n      }\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue\n      });\n    };\n    if (typeof setProperty !== \"undefined\") {\n      return setProperty.call(target, [propertyName, nextValue], next);\n    }\n    return next();\n  };\n  handler.get = function (target, propertyName, receiver) {\n    const next = () => target[propertyName];\n    const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [propertyName, receiver], next) : next();\n    if (typeof value === \"function\") {\n      return function () {\n        for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n          args[_key19] = arguments[_key19];\n        }\n        const next2 = value.bind(target, ...args);\n        if (typeof methodCall !== \"undefined\") {\n          return methodCall.call(target, [propertyName, args], next2);\n        }\n        return next2();\n      };\n    }\n    return value;\n  };\n  return handler;\n}\nfunction isDomParserSupportedType(type) {\n  const supportedTypes = [\"application/xhtml+xml\", \"application/xml\", \"image/svg+xml\", \"text/html\", \"text/xml\"];\n  return supportedTypes.some(supportedType => {\n    return type.startsWith(supportedType);\n  });\n}\nfunction parseJson(data) {\n  try {\n    const json = JSON.parse(data);\n    return json;\n  } catch (_) {\n    return null;\n  }\n}\nfunction createResponse(request, body) {\n  const responseBodyOrNull = FetchResponse.isResponseWithBody(request.status) ? body : null;\n  return new FetchResponse(responseBodyOrNull, {\n    url: request.responseURL,\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(request.getAllResponseHeaders())\n  });\n}\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\n  const headers = new Headers();\n  const lines = headersString.split(/[\\r\\n]+/);\n  for (const line of lines) {\n    if (line.trim() === \"\") {\n      continue;\n    }\n    const [name, ...parts] = line.split(\": \");\n    const value = parts.join(\": \");\n    headers.append(name, value);\n  }\n  return headers;\n}\nasync function getBodyByteLength(input) {\n  const explicitContentLength = input.headers.get(\"content-length\");\n  if (explicitContentLength != null && explicitContentLength !== \"\") {\n    return Number(explicitContentLength);\n  }\n  const buffer = await input.arrayBuffer();\n  return buffer.byteLength;\n}\nvar kIsRequestHandled = Symbol(\"kIsRequestHandled\");\nvar IS_NODE2 = isNodeProcess();\nvar kFetchRequest = Symbol(\"kFetchRequest\");\nvar XMLHttpRequestController = class {\n  constructor(initialRequest, logger) {\n    this.initialRequest = initialRequest;\n    this.logger = logger;\n    this.method = \"GET\";\n    this.url = null;\n    this[kIsRequestHandled] = false;\n    this.events = /* @__PURE__ */new Map();\n    this.uploadEvents = /* @__PURE__ */new Map();\n    this.requestId = createRequestId();\n    this.requestHeaders = new Headers();\n    this.responseBuffer = new Uint8Array();\n    this.request = createProxy(initialRequest, {\n      setProperty: (_ref3, invoke) => {\n        let [propertyName, nextValue] = _ref3;\n        switch (propertyName) {\n          case \"ontimeout\":\n            {\n              const eventName = propertyName.slice(2);\n              this.request.addEventListener(eventName, nextValue);\n              return invoke();\n            }\n          default:\n            {\n              return invoke();\n            }\n        }\n      },\n      methodCall: (_ref4, invoke) => {\n        let [methodName, args] = _ref4;\n        var _a;\n        switch (methodName) {\n          case \"open\":\n            {\n              const [method, url] = args;\n              if (typeof url === \"undefined\") {\n                this.method = \"GET\";\n                this.url = toAbsoluteUrl(method);\n              } else {\n                this.method = method;\n                this.url = toAbsoluteUrl(url);\n              }\n              this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\n              this.logger.info(\"open\", this.method, this.url.href);\n              return invoke();\n            }\n          case \"addEventListener\":\n            {\n              const [eventName, listener] = args;\n              this.registerEvent(eventName, listener);\n              this.logger.info(\"addEventListener\", eventName, listener);\n              return invoke();\n            }\n          case \"setRequestHeader\":\n            {\n              const [name, value] = args;\n              this.requestHeaders.set(name, value);\n              this.logger.info(\"setRequestHeader\", name, value);\n              return invoke();\n            }\n          case \"send\":\n            {\n              const [body] = args;\n              this.request.addEventListener(\"load\", () => {\n                if (typeof this.onResponse !== \"undefined\") {\n                  const fetchResponse = createResponse(this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response);\n                  this.onResponse.call(this, {\n                    response: fetchResponse,\n                    isMockedResponse: this[kIsRequestHandled],\n                    request: fetchRequest,\n                    requestId: this.requestId\n                  });\n                }\n              });\n              const requestBody = typeof body === \"string\" ? encodeBuffer(body) : body;\n              const fetchRequest = this.toFetchApiRequest(requestBody);\n              this[kFetchRequest] = fetchRequest.clone();\n              const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\n                request: fetchRequest,\n                requestId: this.requestId\n              })) || Promise.resolve();\n              onceRequestSettled.finally(() => {\n                if (!this[kIsRequestHandled]) {\n                  this.logger.info(\"request callback settled but request has not been handled (readystate %d), performing as-is...\", this.request.readyState);\n                  if (IS_NODE2) {\n                    this.request.setRequestHeader(INTERNAL_REQUEST_ID_HEADER_NAME, this.requestId);\n                  }\n                  return invoke();\n                }\n              });\n              break;\n            }\n          default:\n            {\n              return invoke();\n            }\n        }\n      }\n    });\n    define(this.request, \"upload\", createProxy(this.request.upload, {\n      setProperty: (_ref5, invoke) => {\n        let [propertyName, nextValue] = _ref5;\n        switch (propertyName) {\n          case \"onloadstart\":\n          case \"onprogress\":\n          case \"onaboart\":\n          case \"onerror\":\n          case \"onload\":\n          case \"ontimeout\":\n          case \"onloadend\":\n            {\n              const eventName = propertyName.slice(2);\n              this.registerUploadEvent(eventName, nextValue);\n            }\n        }\n        return invoke();\n      },\n      methodCall: (_ref6, invoke) => {\n        let [methodName, args] = _ref6;\n        switch (methodName) {\n          case \"addEventListener\":\n            {\n              const [eventName, listener] = args;\n              this.registerUploadEvent(eventName, listener);\n              this.logger.info(\"upload.addEventListener\", eventName, listener);\n              return invoke();\n            }\n        }\n      }\n    }));\n  }\n  registerEvent(eventName, listener) {\n    const prevEvents = this.events.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.events.set(eventName, nextEvents);\n    this.logger.info('registered event \"%s\"', eventName, listener);\n  }\n  registerUploadEvent(eventName, listener) {\n    const prevEvents = this.uploadEvents.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.uploadEvents.set(eventName, nextEvents);\n    this.logger.info('registered upload event \"%s\"', eventName, listener);\n  }\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  async respondWith(response) {\n    this[kIsRequestHandled] = true;\n    if (this[kFetchRequest]) {\n      const totalRequestBodyLength = await getBodyByteLength(this[kFetchRequest]);\n      this.trigger(\"loadstart\", this.request.upload, {\n        loaded: 0,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"progress\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"load\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"loadend\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n    }\n    this.logger.info(\"responding with a mocked response: %d %s\", response.status, response.statusText);\n    define(this.request, \"status\", response.status);\n    define(this.request, \"statusText\", response.statusText);\n    define(this.request, \"responseURL\", this.url.href);\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args) => {\n        this.logger.info(\"getResponseHeader\", args[0]);\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info(\"headers not received yet, returning null\");\n          return null;\n        }\n        const headerValue = response.headers.get(args[0]);\n        this.logger.info('resolved response header \"%s\" to', args[0], headerValue);\n        return headerValue;\n      }\n    });\n    this.request.getAllResponseHeaders = new Proxy(this.request.getAllResponseHeaders, {\n      apply: () => {\n        this.logger.info(\"getAllResponseHeaders\");\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info(\"headers not received yet, returning empty string\");\n          return \"\";\n        }\n        const headersList = Array.from(response.headers.entries());\n        const allHeaders = headersList.map(_ref7 => {\n          let [headerName, headerValue] = _ref7;\n          return `${headerName}: ${headerValue}`;\n        }).join(\"\\r\\n\");\n        this.logger.info(\"resolved all response headers to\", allHeaders);\n        return allHeaders;\n      }\n    });\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML\n      }\n    });\n    const totalResponseBodyLength = await getBodyByteLength(response.clone());\n    this.logger.info(\"calculated response body length\", totalResponseBodyLength);\n    this.trigger(\"loadstart\", this.request, {\n      loaded: 0,\n      total: totalResponseBodyLength\n    });\n    this.setReadyState(this.request.HEADERS_RECEIVED);\n    this.setReadyState(this.request.LOADING);\n    const finalizeResponse = () => {\n      this.logger.info(\"finalizing the mocked response...\");\n      this.setReadyState(this.request.DONE);\n      this.trigger(\"load\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n      this.trigger(\"loadend\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n    };\n    if (response.body) {\n      this.logger.info(\"mocked response has body, streaming...\");\n      const reader = response.body.getReader();\n      const readNextResponseBodyChunk = async () => {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) {\n          this.logger.info(\"response body stream done!\");\n          finalizeResponse();\n          return;\n        }\n        if (value) {\n          this.logger.info(\"read response body chunk:\", value);\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\n          this.trigger(\"progress\", this.request, {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength\n          });\n        }\n        readNextResponseBodyChunk();\n      };\n      readNextResponseBodyChunk();\n    } else {\n      finalizeResponse();\n    }\n  }\n  responseBufferToText() {\n    return decodeBuffer(this.responseBuffer);\n  }\n  get response() {\n    this.logger.info(\"getResponse (responseType: %s)\", this.request.responseType);\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    switch (this.request.responseType) {\n      case \"json\":\n        {\n          const responseJson = parseJson(this.responseBufferToText());\n          this.logger.info(\"resolved response JSON\", responseJson);\n          return responseJson;\n        }\n      case \"arraybuffer\":\n        {\n          const arrayBuffer = toArrayBuffer(this.responseBuffer);\n          this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\n          return arrayBuffer;\n        }\n      case \"blob\":\n        {\n          const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\n          const responseBlob = new Blob([this.responseBufferToText()], {\n            type: mimeType\n          });\n          this.logger.info(\"resolved response Blob (mime type: %s)\", responseBlob, mimeType);\n          return responseBlob;\n        }\n      default:\n        {\n          const responseText = this.responseBufferToText();\n          this.logger.info('resolving \"%s\" response type as text', this.request.responseType, responseText);\n          return responseText;\n        }\n    }\n  }\n  get responseText() {\n    invariant(this.request.responseType === \"\" || this.request.responseType === \"text\", \"InvalidStateError: The object is in invalid state.\");\n    if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\n      return \"\";\n    }\n    const responseText = this.responseBufferToText();\n    this.logger.info('getResponseText: \"%s\"', responseText);\n    return responseText;\n  }\n  get responseXML() {\n    invariant(this.request.responseType === \"\" || this.request.responseType === \"document\", \"InvalidStateError: The object is in invalid state.\");\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\n    if (typeof DOMParser === \"undefined\") {\n      console.warn(\"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\");\n      return null;\n    }\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(this.responseBufferToText(), contentType);\n    }\n    return null;\n  }\n  errorWith(error2) {\n    this[kIsRequestHandled] = true;\n    this.logger.info(\"responding with an error\");\n    this.setReadyState(this.request.DONE);\n    this.trigger(\"error\", this.request);\n    this.trigger(\"loadend\", this.request);\n  }\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  setReadyState(nextReadyState) {\n    this.logger.info(\"setReadyState: %d -> %d\", this.request.readyState, nextReadyState);\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info(\"ready state identical, skipping transition...\");\n      return;\n    }\n    define(this.request, \"readyState\", nextReadyState);\n    this.logger.info(\"set readyState to: %d\", nextReadyState);\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...');\n      this.trigger(\"readystatechange\", this.request);\n    }\n  }\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  trigger(eventName, target, options) {\n    const callback = target[`on${eventName}`];\n    const event = createEvent(target, eventName, options);\n    this.logger.info('trigger \"%s\"', eventName, options || \"\");\n    if (typeof callback === \"function\") {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName);\n      callback.call(target, event);\n    }\n    const events = target instanceof XMLHttpRequestUpload ? this.uploadEvents : this.events;\n    for (const [registeredEventName, listeners] of events) {\n      if (registeredEventName === eventName) {\n        this.logger.info('found %d listener(s) for \"%s\" event, calling...', listeners.length, eventName);\n        listeners.forEach(listener => listener.call(target, event));\n      }\n    }\n  }\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  toFetchApiRequest(body) {\n    this.logger.info(\"converting request to a Fetch API Request...\");\n    const resolvedBody = body instanceof Document ? body.documentElement.innerText : body;\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\n      body: [\"GET\", \"HEAD\"].includes(this.method.toUpperCase()) ? null : resolvedBody\n    });\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: (_ref8, invoke) => {\n        let [methodName, args] = _ref8;\n        switch (methodName) {\n          case \"append\":\n          case \"set\":\n            {\n              const [headerName, headerValue] = args;\n              this.request.setRequestHeader(headerName, headerValue);\n              break;\n            }\n          case \"delete\":\n            {\n              const [headerName] = args;\n              console.warn(`XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`);\n              break;\n            }\n        }\n        return invoke();\n      }\n    });\n    define(fetchRequest, \"headers\", proxyHeaders);\n    this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\n    return fetchRequest;\n  }\n};\nfunction toAbsoluteUrl(url) {\n  if (typeof location === \"undefined\") {\n    return new URL(url);\n  }\n  return new URL(url.toString(), location.href);\n}\nfunction define(target, property, value) {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value\n  });\n}\nfunction createXMLHttpRequestProxy(_ref9) {\n  let {\n    emitter,\n    logger\n  } = _ref9;\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info(\"constructed new XMLHttpRequest\");\n      const originalRequest = Reflect.construct(target, args, newTarget);\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(target.prototype);\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(originalRequest, propertyName, prototypeDescriptors[propertyName]);\n      }\n      const xhrRequestController = new XMLHttpRequestController(originalRequest, logger);\n      xhrRequestController.onRequest = async function (_ref10) {\n        let {\n          request,\n          requestId\n        } = _ref10;\n        const controller = new RequestController(request);\n        this.logger.info(\"awaiting mocked response...\");\n        this.logger.info('emitting the \"request\" event for %s listener(s)...', emitter.listenerCount(\"request\"));\n        const isRequestHandled = await handleRequest2({\n          request,\n          requestId,\n          controller,\n          emitter,\n          onResponse: async response => {\n            await this.respondWith(response);\n          },\n          onRequestError: () => {\n            this.errorWith(new TypeError(\"Network error\"));\n          },\n          onError: error2 => {\n            this.logger.info(\"request errored!\", {\n              error: error2\n            });\n            if (error2 instanceof Error) {\n              this.errorWith(error2);\n            }\n          }\n        });\n        if (!isRequestHandled) {\n          this.logger.info(\"no mocked response received, performing request as-is...\");\n        }\n      };\n      xhrRequestController.onResponse = async function (_ref11) {\n        let {\n          response,\n          isMockedResponse,\n          request,\n          requestId\n        } = _ref11;\n        this.logger.info('emitting the \"response\" event for %s listener(s)...', emitter.listenerCount(\"response\"));\n        emitter.emit(\"response\", {\n          response,\n          isMockedResponse,\n          request,\n          requestId\n        });\n      };\n      return xhrRequestController.request;\n    }\n  });\n  return XMLHttpRequestProxy;\n}\nvar _XMLHttpRequestInterceptor = class extends Interceptor {\n  constructor() {\n    super(_XMLHttpRequestInterceptor.interceptorSymbol);\n  }\n  checkEnvironment() {\n    return hasConfigurableGlobal(\"XMLHttpRequest\");\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info('patching \"XMLHttpRequest\" module...');\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest;\n    invariant(!PureXMLHttpRequest[IS_PATCHED_MODULE], 'Failed to patch the \"XMLHttpRequest\" module: already patched.');\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger\n    });\n    logger.info('native \"XMLHttpRequest\" module patched!', globalThis.XMLHttpRequest.name);\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.XMLHttpRequest = PureXMLHttpRequest;\n      logger.info('native \"XMLHttpRequest\" module restored!', globalThis.XMLHttpRequest.name);\n    });\n  }\n};\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\n\n// src/browser/setupWorker/start/createFallbackRequestListener.ts\nimport { handleRequest as handleRequest3 } from '../core/utils/handleRequest.mjs';\nimport { isHandlerKind as isHandlerKind2 } from '../core/utils/internal/isHandlerKind.mjs';\nfunction createFallbackRequestListener(context, options) {\n  const interceptor = new BatchInterceptor({\n    name: \"fallback\",\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()]\n  });\n  interceptor.on(\"request\", async _ref12 => {\n    let {\n      request,\n      requestId,\n      controller\n    } = _ref12;\n    const requestCloneForLogs = request.clone();\n    const response = await handleRequest3(request, requestId, context.getRequestHandlers().filter(isHandlerKind2(\"RequestHandler\")), options, context.emitter, {\n      onMockedResponse(_, _ref13) {\n        let {\n          handler,\n          parsedResult\n        } = _ref13;\n        if (!options.quiet) {\n          context.emitter.once(\"response:mocked\", _ref14 => {\n            let {\n              response: response2\n            } = _ref14;\n            handler.log({\n              request: requestCloneForLogs,\n              response: response2,\n              parsedResult\n            });\n          });\n        }\n      }\n    });\n    if (response) {\n      controller.respondWith(response);\n    }\n  });\n  interceptor.on(\"response\", _ref15 => {\n    let {\n      response,\n      isMockedResponse,\n      request,\n      requestId\n    } = _ref15;\n    context.emitter.emit(isMockedResponse ? \"response:mocked\" : \"response:bypass\", {\n      response,\n      request,\n      requestId\n    });\n  });\n  interceptor.apply();\n  return interceptor;\n}\n\n// src/browser/setupWorker/start/createFallbackStart.ts\nfunction createFallbackStart(context) {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(context, options);\n    printStartMessage({\n      message: \"Mocking enabled (fallback mode).\",\n      quiet: options.quiet\n    });\n    return void 0;\n  };\n}\n\n// src/browser/setupWorker/stop/createFallbackStop.ts\nfunction createFallbackStop(context) {\n  return function stop() {\n    context.fallbackInterceptor?.dispose();\n    printStopMessage({\n      quiet: context.startOptions?.quiet\n    });\n  };\n}\n\n// src/browser/setupWorker/setupWorker.ts\nimport { devUtils as devUtils10 } from '../core/utils/internal/devUtils.mjs';\nimport { SetupApi } from '../core/SetupApi.mjs';\nimport { mergeRight as mergeRight2 } from '../core/utils/internal/mergeRight.mjs';\n\n// src/browser/utils/supportsReadableStreamTransfer.ts\nfunction supportsReadableStreamTransfer() {\n  try {\n    const stream = new ReadableStream({\n      start: controller => controller.close()\n    });\n    const message = new MessageChannel();\n    message.port1.postMessage(stream, [stream]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/browser/setupWorker/setupWorker.ts\nimport { webSocketInterceptor } from '../core/ws/webSocketInterceptor.mjs';\nimport { handleWebSocketEvent } from '../core/ws/handleWebSocketEvent.mjs';\nimport { attachWebSocketLogger } from '../core/ws/utils/attachWebSocketLogger.mjs';\nvar SetupWorkerApi = class extends SetupApi {\n  context;\n  startHandler = null;\n  stopHandler = null;\n  listeners;\n  constructor() {\n    super(...arguments);\n    invariant(!isNodeProcess(), devUtils10.formatMessage(\"Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.\"));\n    this.listeners = [];\n    this.context = this.createWorkerContext();\n  }\n  createWorkerContext() {\n    const context = {\n      // Mocking is not considered enabled until the worker\n      // signals back the successful activation event.\n      isMockingEnabled: false,\n      startOptions: null,\n      worker: null,\n      getRequestHandlers: () => {\n        return this.handlersController.currentHandlers();\n      },\n      registration: null,\n      requests: /* @__PURE__ */new Map(),\n      emitter: this.emitter,\n      workerChannel: {\n        on: (eventType, callback) => {\n          this.context.events.addListener(navigator.serviceWorker, \"message\", event => {\n            if (event.source !== this.context.worker) {\n              return;\n            }\n            const message = event.data;\n            if (!message) {\n              return;\n            }\n            if (message.type === eventType) {\n              callback(event, message);\n            }\n          });\n        },\n        send: type => {\n          this.context.worker?.postMessage(type);\n        }\n      },\n      events: {\n        addListener: (target, eventType, callback) => {\n          target.addEventListener(eventType, callback);\n          this.listeners.push({\n            eventType,\n            target,\n            callback\n          });\n          return () => {\n            target.removeEventListener(eventType, callback);\n          };\n        },\n        removeAllListeners: () => {\n          for (const {\n            target,\n            eventType,\n            callback\n          } of this.listeners) {\n            target.removeEventListener(eventType, callback);\n          }\n          this.listeners = [];\n        },\n        once: eventType => {\n          const bindings = [];\n          return new Promise((resolve, reject) => {\n            const handleIncomingMessage = event => {\n              try {\n                const message = event.data;\n                if (message.type === eventType) {\n                  resolve(message);\n                }\n              } catch (error2) {\n                reject(error2);\n              }\n            };\n            bindings.push(this.context.events.addListener(navigator.serviceWorker, \"message\", handleIncomingMessage), this.context.events.addListener(navigator.serviceWorker, \"messageerror\", reject));\n          }).finally(() => {\n            bindings.forEach(unbind => unbind());\n          });\n        }\n      },\n      supports: {\n        serviceWorkerApi: !(\"serviceWorker\" in navigator) || location.protocol === \"file:\",\n        readableStreamTransfer: supportsReadableStreamTransfer()\n      }\n    };\n    this.startHandler = context.supports.serviceWorkerApi ? createFallbackStart(context) : createStartHandler(context);\n    this.stopHandler = context.supports.serviceWorkerApi ? createFallbackStop(context) : createStop(context);\n    return context;\n  }\n  async start() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.waitUntilReady === true) {\n      devUtils10.warn('The \"waitUntilReady\" option has been deprecated. Please remove it from this \"worker.start()\" call. Follow the recommended Browser integration (https://mswjs.io/docs/integrations/browser) to eliminate any race conditions between the Service Worker registration and any requests made by your application on initial render.');\n    }\n    this.context.startOptions = mergeRight2(DEFAULT_START_OPTIONS, options);\n    handleWebSocketEvent({\n      getUnhandledRequestStrategy: () => {\n        return this.context.startOptions.onUnhandledRequest;\n      },\n      getHandlers: () => {\n        return this.handlersController.currentHandlers();\n      },\n      onMockedConnection: connection => {\n        if (!this.context.startOptions.quiet) {\n          attachWebSocketLogger(connection);\n        }\n      },\n      onPassthroughConnection() {}\n    });\n    webSocketInterceptor.apply();\n    this.subscriptions.push(() => {\n      webSocketInterceptor.dispose();\n    });\n    return await this.startHandler(this.context.startOptions, options);\n  }\n  stop() {\n    super.dispose();\n    this.context.events.removeAllListeners();\n    this.context.emitter.removeAllListeners();\n    this.stopHandler();\n  }\n};\nfunction setupWorker() {\n  for (var _len20 = arguments.length, handlers = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n    handlers[_key20] = arguments[_key20];\n  }\n  return new SetupWorkerApi(...handlers);\n}\nexport { SetupWorkerApi, setupWorker };","map":{"version":3,"names":["POSITIONALS_EXP","serializePositional","positional","flag","Number","JSON","stringify","json","test","format","message","_len","arguments","length","positionals","Array","_key","positionalIndex","formattedMessage","replace","match","isEscaped","_","value","slice","join","STACK_FRAMES_TO_IGNORE","cleanErrorStack","error2","stack","nextStack","split","splice","InvariantError","Error","constructor","name","_len2","_key2","invariant","predicate","_len3","_key3","as","ErrorConstructor","_len4","_key4","formatMessage","Reflect","construct","err","isNodeProcess","navigator","product","process","type","versions","node","devUtils","devUtils7","until","promise","data","catch","error","getAbsoluteWorkerUrl","workerUrl","URL","location","href","getWorkerByRegistration","registration","absoluteWorkerUrl","findWorker","allStates","active","installing","waiting","relevantStates","filter","state","worker","find","worker2","scriptURL","getWorkerInstance","url","options","undefined","mockRegistrations","serviceWorker","getRegistrations","then","registrations","controller","reload","existingRegistration","update","registrationResult","register","isWorkerMissing","includes","scopeUrl","scope","devUtils3","devUtils2","printStartMessage","args","quiet","console","groupCollapsed","log","workerScope","client","id","frameType","groupEnd","enableMocking","context","workerChannel","send","payload","events","once","isMockingEnabled","warn","WorkerChannel","port","postMessage","event","_len5","rest","_key5","transfer","pruneGetRequestBody","request","method","body","parseWorkerRequest","incomingRequest","Request","RequestHandler","handleRequest","devUtils4","toResponseInit","isHandlerKind","createRequestListener","messageChannel","ports","requestId","requestCloneForLogs","clone","requestClone","cache","set","requests","getRequestHandlers","emitter","onPassthroughResponse","onMockedResponse","response","_ref","handler","parsedResult","responseClone","responseCloneForLogs","responseInit","supports","readableStreamTransfer","responseStreamOrNull","responseBufferOrNull","arrayBuffer","status","statusText","headers","devUtils5","checkWorkerIntegrity","checksum","packageVersion","encoder","TextEncoder","encodeBuffer","text","encode","decodeBuffer","buffer","encoding","decoder","TextDecoder","decode","toArrayBuffer","array","byteOffset","byteLength","IS_PATCHED_MODULE","Symbol","_FetchResponse","Response","isConfigurableStatusCode","isRedirectResponse","STATUS_CODES_WITH_REDIRECT","isResponseWithBody","STATUS_CODES_WITHOUT_BODY","setUrl","Object","defineProperty","enumerable","configurable","writable","init","_a","safeStatus","finalBody","stateSymbol","getOwnPropertySymbols","symbol","description","get","FetchResponse","__defProp","__export","target","all","colors_exports","blue","gray","green","red","yellow","IS_NODE","Logger","prefix","LOGGER_NAME","getVariable","LOGGER_LEVEL","isLoggingEnabled","startsWith","debug","isDefinedAndNotEquals","noop","info","success","warning","only","extend","domain","_len6","_key6","logEntry","level","colors","_this","_len7","_key7","performance2","PerformanceEntry","message2","measure","_len8","positionals2","_key8","deltaTime","_len9","_key9","timestamp","_len10","_key10","_len11","_key11","callback","createEntry","Date","customColors","entry","timestampColor","prefixColor","colorize","write","getWriter","formatTimestamp","concat","serializeInput","map","toLocaleTimeString","getMilliseconds","startTime","endTime","performance","now","toFixed","_len12","_key12","stdout","_len13","_key13","stderr","_len14","_key14","variableName","env","globalThis","toString","expected","MemoryLeakError","count","_Emitter","listenerCount","eventName","Map","maxListeners","defaultMaxListeners","hasWarnedAboutPotentialMemoryLeak","_emitInternalEvent","internalEventName","listener","emit","_getListeners","prototype","apply","_removeListener","listeners","index","indexOf","_wrapOnceListener","_this2","onceListener","removeListener","_len15","_key15","setMaxListeners","getMaxListeners","eventNames","from","keys","_len16","_key16","forEach","addListener","nextListeners","memoryLeakWarning","on","prependListener","prependOnceListener","off","removeAllListeners","delete","clear","rawListeners","Emitter","INTERNAL_REQUEST_ID_HEADER_NAME","getGlobalSymbol","setGlobalSymbol","deleteGlobalSymbol","Interceptor","readyState","subscriptions","logger","checkEnvironment","shouldApply","runningInstance","getInstance","push","setup","setInstance","dispose","clearInstance","instance","createRequestId","Math","random","BatchInterceptor","interceptors","interceptor","createResponseListener","responseJson","isMockedResponse","devUtils6","validateWorkerScope","createStartHandler","start","customOptions","startWorkerInstance","missingWorkerMessage","host","window","clearInterval","keepAliveInterval","setInterval","startOptions","workerRegistration","pendingInstance","Promise","resolve","addEventListener","devUtils9","devUtils8","printStopMessage","createStop","stop","mergeRight","DEFAULT_START_OPTIONS","waitUntilReady","onUnhandledRequest","mockServiceWorkerUrl","createDeferredExecutor","executor","reject","result","onFulfilled","reason","queueMicrotask","rejectionReason","DeferredPromise","deferredExecutor","originalResolve","originalReject","onRejected","decorate","finally","onfinally","#decorate","defineProperties","InterceptorError","setPrototypeOf","kRequestHandled","kResponsePromise","RequestController","respondWith","errorWith","emitAsync","listners","_len17","_key17","isPropertyAccessible","obj","key","e","createServerErrorResponse","isResponseError","isNodeLikeError","handleRequest2","handleResponse","onError","onRequestError","onResponse","handleResponseError","_ref2","pendingRequestId","requestAbortPromise","signal","aborted","requestListtenersPromise","race","mockedResponse","unhandledExceptionController","nextResult","hasConfigurableGlobal","propertyName","descriptor","getOwnPropertyDescriptor","canParseUrl","_error","createNetworkError","cause","assign","TypeError","REQUEST_BODY_HEADERS","kRedirectCount","followFetchRedirect","requestUrl","locationUrl","protocol","mode","username","password","sameOrigin","requestInit","headerName","fetch","left","right","origin","hostname","BrotliDecompressionStream","TransformStream","transform","chunk","enqueue","PipelineStream","transformStreams","_len18","strategies","_key18","readable","reduce","readable2","pipeThrough","parseContentEncoding","contentEncoding","toLowerCase","coding","trim","createDecompressionStream","codings","transformers","reduceRight","transformers2","DecompressionStream","decompressResponse","decompressionStream","pipeTo","_FetchInterceptor","pureFetch","input","resolvedInput","responsePromise","isRequestHandled","rawResponse","decompressedStream","redirect","response2","FetchInterceptor","concatArrayBuffer","Uint8Array","EventPolyfill","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","srcElement","currentTarget","eventPhase","isTrusted","composed","cancelable","defaultPrevented","bubbles","lengthComputable","loaded","total","cancelBubble","returnValue","timeStamp","composedPath","initEvent","preventDefault","stopPropagation","stopImmediatePropagation","ProgressEventPolyfill","SUPPORTS_PROGRESS_EVENT","ProgressEvent","createEvent","progressEvents","ProgressEventClass","findPropertySource","hasProperty","hasOwnProperty","call","getPrototypeOf","createProxy","proxy","Proxy","optionsToProxyHandler","constructorCall","methodCall","getProperty","setProperty","newTarget","next","bind","nextValue","propertySource","ownDescriptors","receiver","_len19","_key19","next2","isDomParserSupportedType","supportedTypes","some","supportedType","parseJson","parse","createResponse","responseBodyOrNull","responseURL","createHeadersFromXMLHttpReqestHeaders","getAllResponseHeaders","headersString","Headers","lines","line","parts","append","getBodyByteLength","explicitContentLength","kIsRequestHandled","IS_NODE2","kFetchRequest","XMLHttpRequestController","initialRequest","uploadEvents","requestHeaders","responseBuffer","_ref3","invoke","_ref4","methodName","toAbsoluteUrl","registerEvent","fetchResponse","fetchRequest","requestBody","toFetchApiRequest","onceRequestSettled","onRequest","setRequestHeader","define","upload","_ref5","registerUploadEvent","_ref6","prevEvents","nextEvents","totalRequestBodyLength","trigger","getResponseHeader","__","HEADERS_RECEIVED","headerValue","headersList","entries","allHeaders","_ref7","responseText","responseXML","totalResponseBodyLength","setReadyState","LOADING","finalizeResponse","DONE","reader","getReader","readNextResponseBodyChunk","done","read","responseBufferToText","responseType","mimeType","responseBlob","Blob","contentType","DOMParser","parseFromString","nextReadyState","UNSENT","XMLHttpRequestUpload","registeredEventName","resolvedBody","Document","documentElement","innerText","credentials","withCredentials","toUpperCase","proxyHeaders","_ref8","property","createXMLHttpRequestProxy","_ref9","XMLHttpRequestProxy","XMLHttpRequest","originalRequest","prototypeDescriptors","getOwnPropertyDescriptors","xhrRequestController","_ref10","_ref11","_XMLHttpRequestInterceptor","interceptorSymbol","PureXMLHttpRequest","XMLHttpRequestInterceptor","handleRequest3","isHandlerKind2","createFallbackRequestListener","_ref12","_ref13","_ref14","_ref15","createFallbackStart","fallbackInterceptor","createFallbackStop","devUtils10","SetupApi","mergeRight2","supportsReadableStreamTransfer","stream","ReadableStream","close","MessageChannel","port1","webSocketInterceptor","handleWebSocketEvent","attachWebSocketLogger","SetupWorkerApi","startHandler","stopHandler","createWorkerContext","handlersController","currentHandlers","eventType","source","removeEventListener","bindings","handleIncomingMessage","unbind","serviceWorkerApi","getUnhandledRequestStrategy","getHandlers","onMockedConnection","connection","onPassthroughConnection","setupWorker","_len20","handlers","_key20"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\outvariant@1.4.3\\node_modules\\outvariant\\src\\format.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\outvariant@1.4.3\\node_modules\\outvariant\\src\\invariant.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\is-node-process@1.2.0\\node_modules\\is-node-process\\src\\index.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\createStartHandler.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@open-draft+until@2.1.0\\node_modules\\@open-draft\\until\\src\\until.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\getWorkerInstance.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\utils\\getAbsoluteWorkerUrl.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\getWorkerByRegistration.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\enableMocking.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\printStartMessage.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\createMessageChannel.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\utils\\pruneGetRequestBody.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\utils\\parseWorkerRequest.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\createRequestListener.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\utils\\checkWorkerIntegrity.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\bufferUtils.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\glossary.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\fetchUtils.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@open-draft+logger@0.3.0\\node_modules\\@open-draft\\logger\\lib\\index.mjs","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\strict-event-emitter@0.5.1\\node_modules\\strict-event-emitter\\src\\MemoryLeakError.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\strict-event-emitter@0.5.1\\node_modules\\strict-event-emitter\\src\\Emitter.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\Interceptor.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\createRequestId.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\BatchInterceptor.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\getCleanUrl.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\createResponseListener.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\validateWorkerScope.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\stop\\createStop.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\stop\\utils\\printStopMessage.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\utils\\prepareStartHandler.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@open-draft+deferred-promise@2.2.0\\node_modules\\@open-draft\\deferred-promise\\src\\createDeferredExecutor.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@open-draft+deferred-promise@2.2.0\\node_modules\\@open-draft\\deferred-promise\\src\\DeferredPromise.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\RequestController.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\InterceptorError.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\emitAsync.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\handleRequest.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\isPropertyAccessible.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\responseUtils.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\isNodeLikeError.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\hasConfigurableGlobal.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\index.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\canParseUrl.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\utils\\createNetworkError.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\utils\\followRedirect.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\utils\\brotli-decompress.browser.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\utils\\decompression.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\index.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\XMLHttpRequestController.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\utils\\concatArrayBuffer.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\polyfills\\EventPolyfill.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\polyfills\\ProgressEventPolyfill.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\utils\\createEvent.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\findPropertySource.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\createProxy.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\utils\\isDomParserSupportedType.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\utils\\parseJson.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\utils\\createResponse.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\utils\\getBodyByteLength.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\node_modules\\.pnpm\\@mswjs+interceptors@0.37.1\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\XMLHttpRequestProxy.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\createFallbackRequestListener.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\start\\createFallbackStart.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\stop\\createFallbackStop.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\setupWorker\\setupWorker.ts","C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\browser\\utils\\supportsReadableStreamTransfer.ts"],"sourcesContent":["const POSITIONALS_EXP = /(%?)(%([sdijo]))/g\n\nfunction serializePositional(positional: any, flag: string): any {\n  switch (flag) {\n    // Strings.\n    case 's':\n      return positional\n\n    // Digits.\n    case 'd':\n    case 'i':\n      return Number(positional)\n\n    // JSON.\n    case 'j':\n      return JSON.stringify(positional)\n\n    // Objects.\n    case 'o': {\n      // Preserve stings to prevent extra quotes around them.\n      if (typeof positional === 'string') {\n        return positional\n      }\n\n      const json = JSON.stringify(positional)\n\n      // If the positional isn't serializable, return it as-is.\n      if (json === '{}' || json === '[]' || /^\\[object .+?\\]$/.test(json)) {\n        return positional\n      }\n\n      return json\n    }\n  }\n}\n\nexport function format(message: string, ...positionals: any[]): string {\n  if (positionals.length === 0) {\n    return message\n  }\n\n  let positionalIndex = 0\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex]\n      const value = serializePositional(positional, flag)\n\n      if (!isEscaped) {\n        positionalIndex++\n        return value\n      }\n\n      return match\n    }\n  )\n\n  // Append unresolved positionals to string as-is.\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(' ')}`\n  }\n\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%')\n\n  return formattedMessage\n}\n","import { format } from './format'\n\nconst STACK_FRAMES_TO_IGNORE = 2\n\n/**\n * Remove the \"outvariant\" package trace from the given error.\n * This scopes down the error stack to the relevant parts\n * when used in other applications.\n */\nfunction cleanErrorStack(error: Error): void {\n  if (!error.stack) {\n    return\n  }\n\n  const nextStack = error.stack.split('\\n')\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE)\n  error.stack = nextStack.join('\\n')\n}\n\nexport class InvariantError extends Error {\n  name = 'Invariant Violation'\n\n  constructor(public readonly message: string, ...positionals: any[]) {\n    super(message)\n    this.message = format(message, ...positionals)\n    cleanErrorStack(this)\n  }\n}\n\nexport interface CustomErrorConstructor {\n  new (message: string): Error\n}\n\nexport interface CustomErrorFactory {\n  (message: string): Error\n}\n\nexport type CustomError = CustomErrorConstructor | CustomErrorFactory\n\ntype Invariant = {\n  (\n    predicate: unknown,\n    message: string,\n    ...positionals: any[]\n  ): asserts predicate\n\n  as(\n    ErrorConstructor: CustomError,\n    predicate: unknown,\n    message: string,\n    ...positionals: unknown[]\n  ): asserts predicate\n}\n\nexport const invariant: Invariant = (\n  predicate,\n  message,\n  ...positionals\n): asserts predicate => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals)\n  }\n}\n\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const formatMessage =\n      positionals.length === 0 ? message : format(message, ...positionals)\n    let error: Error\n\n    try {\n      error = Reflect.construct(ErrorConstructor as CustomErrorConstructor, [\n        formatMessage,\n      ])\n    } catch (err) {\n      error = (ErrorConstructor as CustomErrorFactory)(formatMessage)\n    }\n\n    throw error\n  }\n}\n","/**\n * Determines if the current process is a Node.js process.\n */\nexport function isNodeProcess(): boolean {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return true\n  }\n\n  if (typeof process !== 'undefined') {\n    // Electron (https://www.electronjs.org/docs/latest/api/process#processtype-readonly)\n    const type = (process as any).type\n    if (type === 'renderer' || type === 'worker') {\n      return false\n    }\n\n\n    return !!(\n      process.versions &&\n      process.versions.node\n    )\n  }\n\n  return false\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { getWorkerInstance } from './utils/getWorkerInstance'\nimport { enableMocking } from './utils/enableMocking'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { createRequestListener } from './createRequestListener'\nimport { checkWorkerIntegrity } from '../../utils/checkWorkerIntegrity'\nimport { createResponseListener } from './createResponseListener'\nimport { validateWorkerScope } from './utils/validateWorkerScope'\n\nexport const createStartHandler = (\n  context: SetupWorkerInternalContext,\n): StartHandler => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      // Remove all previously existing event listeners.\n      // This way none of the listeners persists between Fast refresh\n      // of the application's code.\n      context.events.removeAllListeners()\n\n      // Handle requests signaled by the worker.\n      context.workerChannel.on(\n        'REQUEST',\n        createRequestListener(context, options),\n      )\n\n      // Handle responses signaled by the worker.\n      context.workerChannel.on('RESPONSE', createResponseListener(context))\n\n      const instance = await getWorkerInstance(\n        options.serviceWorker.url,\n        options.serviceWorker.options,\n        options.findWorker,\n      )\n\n      const [worker, registration] = instance\n\n      if (!worker) {\n        const missingWorkerMessage = customOptions?.findWorker\n          ? devUtils.formatMessage(\n              `Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`,\n              options.serviceWorker.url,\n            )\n          : devUtils.formatMessage(\n              `Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\n              options.serviceWorker.url,\n              location.host,\n            )\n\n        throw new Error(missingWorkerMessage)\n      }\n\n      context.worker = worker\n      context.registration = registration\n\n      context.events.addListener(window, 'beforeunload', () => {\n        if (worker.state !== 'redundant') {\n          // Notify the Service Worker that this client has closed.\n          // Internally, it's similar to disabling the mocking, only\n          // client close event has a handler that self-terminates\n          // the Service Worker when there are no open clients.\n          context.workerChannel.send('CLIENT_CLOSED')\n        }\n        // Make sure we're always clearing the interval - there are reports that not doing this can\n        // cause memory leaks in headless browser environments.\n        window.clearInterval(context.keepAliveInterval)\n\n        // Notify others about this client disconnecting.\n        // E.g. this will purge the in-memory WebSocket clients since\n        // starting the worker again will assign them new IDs.\n        window.postMessage({ type: 'msw/worker:stop' })\n      })\n\n      // Check if the active Service Worker has been generated\n      // by the currently installed version of MSW.\n      await checkWorkerIntegrity(context).catch((error) => {\n        devUtils.error(\n          'Error while checking the worker script integrity. Please report this on GitHub (https://github.com/mswjs/msw/issues), including the original error below.',\n        )\n        // eslint-disable-next-line no-console\n        console.error(error)\n      })\n\n      context.keepAliveInterval = window.setInterval(\n        () => context.workerChannel.send('KEEPALIVE_REQUEST'),\n        5000,\n      )\n\n      // Warn the user when loading the page that lies outside\n      // of the worker's scope.\n      validateWorkerScope(registration, context.startOptions)\n\n      return registration\n    }\n\n    const workerRegistration = startWorkerInstance().then(\n      async (registration) => {\n        const pendingInstance = registration.installing || registration.waiting\n\n        // Wait until the worker is activated.\n        // Assume the worker is already activated if there's no pending registration\n        // (i.e. when reloading the page after a successful activation).\n        if (pendingInstance) {\n          await new Promise<void>((resolve) => {\n            pendingInstance.addEventListener('statechange', () => {\n              if (pendingInstance.state === 'activated') {\n                return resolve()\n              }\n            })\n          })\n        }\n\n        // Print the activation message only after the worker has been activated.\n        await enableMocking(context, options).catch((error) => {\n          throw new Error(`Failed to enable mocking: ${error?.message}`)\n        })\n\n        return registration\n      },\n    )\n\n    return workerRegistration\n  }\n}\n","export type AsyncTuple<\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n> =\n  | {\n      error: ErrorType\n      data: null\n    }\n  | { error: null; data: DataType }\n\n/**\n * Gracefully handles a given Promise factory.\n * @example\n * const { error, data } = await until(() => asyncAction())\n */\nexport const until = async <\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n>(\n  promise: () => Promise<DataType>,\n): Promise<AsyncTuple<ErrorType, DataType>> => {\n  try {\n    const data = await promise().catch((error) => {\n      throw error\n    })\n    return { error: null, data }\n  } catch (error) {\n    return { error, data: null }\n  }\n}\n","import { until } from '@open-draft/until'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { getAbsoluteWorkerUrl } from '../../../utils/getAbsoluteWorkerUrl'\nimport { getWorkerByRegistration } from './getWorkerByRegistration'\nimport { ServiceWorkerInstanceTuple, FindWorker } from '../../glossary'\n\n/**\n * Returns an active Service Worker instance.\n * When not found, registers a new Service Worker.\n */\nexport const getWorkerInstance = async (\n  url: string,\n  options: RegistrationOptions = {},\n  findWorker: FindWorker,\n): Promise<ServiceWorkerInstanceTuple> => {\n  // Resolve the absolute Service Worker URL.\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url)\n\n  const mockRegistrations = await navigator.serviceWorker\n    .getRegistrations()\n    .then((registrations) =>\n      registrations.filter((registration) =>\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n      ),\n    )\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    // Reload the page when it has associated workers, but no active controller.\n    // The absence of a controller can mean either:\n    // - page has no Service Worker associated with it\n    // - page has been hard-reloaded and its workers won't be used until the next reload.\n    // Since we've checked that there are registrations associated with this page,\n    // at this point we are sure it's hard reload that falls into this clause.\n    location.reload()\n  }\n\n  const [existingRegistration] = mockRegistrations\n\n  if (existingRegistration) {\n    // Schedule the worker update in the background.\n    // Update ensures the existing worker is up-to-date.\n    existingRegistration.update()\n\n    // Return the worker reference immediately.\n    return [\n      getWorkerByRegistration(\n        existingRegistration,\n        absoluteWorkerUrl,\n        findWorker,\n      ),\n      existingRegistration,\n    ]\n  }\n\n  // When the Service Worker wasn't found, register it anew and return the reference.\n  const registrationResult = await until<Error, ServiceWorkerInstanceTuple>(\n    async () => {\n      const registration = await navigator.serviceWorker.register(url, options)\n      return [\n        // Compare existing worker registration by its worker URL,\n        // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n        registration,\n      ]\n    },\n  )\n\n  // Handle Service Worker registration errors.\n  if (registrationResult.error) {\n    const isWorkerMissing = registrationResult.error.message.includes('(404)')\n\n    // Produce a custom error message when given a non-existing Service Worker url.\n    // Suggest developers to check their setup.\n    if (isWorkerMissing) {\n      const scopeUrl = new URL(options?.scope || '/', location.href)\n\n      throw new Error(\n        devUtils.formatMessage(`\\\nFailed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\n\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`),\n      )\n    }\n\n    // Fallback error message for any other registration errors.\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to register the Service Worker:\\n\\n%s',\n        registrationResult.error.message,\n      ),\n    )\n  }\n\n  return registrationResult.data\n}\n","/**\n * Returns an absolute Service Worker URL based on the given\n * relative URL (known during the registration).\n */\nexport function getAbsoluteWorkerUrl(workerUrl: string): string {\n  return new URL(workerUrl, location.href).href\n}\n","import { FindWorker } from '../../glossary'\n\n/**\n * Attempts to resolve a Service Worker instance from a given registration,\n * regardless of its state (active, installing, waiting).\n */\nexport function getWorkerByRegistration(\n  registration: ServiceWorkerRegistration,\n  absoluteWorkerUrl: string,\n  findWorker: FindWorker,\n): ServiceWorker | null {\n  const allStates = [\n    registration.active,\n    registration.installing,\n    registration.waiting,\n  ]\n  const relevantStates = allStates.filter((state): state is ServiceWorker => {\n    return state != null\n  })\n  const worker = relevantStates.find((worker) => {\n    return findWorker(worker.scriptURL, absoluteWorkerUrl)\n  })\n\n  return worker || null\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { StartOptions, SetupWorkerInternalContext } from '../../glossary'\nimport { printStartMessage } from './printStartMessage'\n\n/**\n * Signals the worker to enable the interception of requests.\n */\nexport async function enableMocking(\n  context: SetupWorkerInternalContext,\n  options: StartOptions,\n) {\n  context.workerChannel.send('MOCK_ACTIVATE')\n  const { payload } = await context.events.once('MOCKING_ENABLED')\n\n  // Warn the developer on multiple \"worker.start()\" calls.\n  // While this will not affect the worker in any way,\n  // it likely indicates an issue with the developer's code.\n  if (context.isMockingEnabled) {\n    devUtils.warn(\n      `Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`,\n    )\n    return\n  }\n\n  context.isMockingEnabled = true\n\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: context.registration?.scope,\n    workerUrl: context.worker?.scriptURL,\n    client: payload.client,\n  })\n}\n","import type { ServiceWorkerIncomingEventsMap } from '../../glossary'\nimport { devUtils } from '~/core/utils/internal/devUtils'\n\ninterface PrintStartMessageArgs {\n  quiet?: boolean\n  message?: string\n  workerUrl?: string\n  workerScope?: string\n  client?: ServiceWorkerIncomingEventsMap['MOCKING_ENABLED']['client']\n}\n\n/**\n * Prints a worker activation message in the browser's console.\n */\nexport function printStartMessage(args: PrintStartMessageArgs = {}) {\n  if (args.quiet) {\n    return\n  }\n\n  const message = args.message || 'Mocking enabled.'\n\n  // eslint-disable-next-line no-console\n  console.groupCollapsed(\n    `%c${devUtils.formatMessage(message)}`,\n    'color:orangered;font-weight:bold;',\n  )\n  // eslint-disable-next-line no-console\n  console.log(\n    '%cDocumentation: %chttps://mswjs.io/docs',\n    'font-weight:bold',\n    'font-weight:normal',\n  )\n  // eslint-disable-next-line no-console\n  console.log('Found an issue? https://github.com/mswjs/msw/issues')\n\n  if (args.workerUrl) {\n    // eslint-disable-next-line no-console\n    console.log('Worker script URL:', args.workerUrl)\n  }\n\n  if (args.workerScope) {\n    // eslint-disable-next-line no-console\n    console.log('Worker scope:', args.workerScope)\n  }\n\n  if (args.client) {\n    // eslint-disable-next-line no-console\n    console.log('Client ID: %s (%s)', args.client.id, args.client.frameType)\n  }\n\n  // eslint-disable-next-line no-console\n  console.groupEnd()\n}\n","import {\n  StringifiedResponse,\n  ServiceWorkerIncomingEventsMap,\n} from '../../glossary'\n\nexport interface ServiceWorkerMessage<\n  EventType extends keyof ServiceWorkerIncomingEventsMap,\n  EventPayload,\n> {\n  type: EventType\n  payload: EventPayload\n}\n\ninterface WorkerChannelEventsMap {\n  MOCK_RESPONSE: [\n    data: StringifiedResponse,\n    transfer?: [ReadableStream<Uint8Array>],\n  ]\n  PASSTHROUGH: []\n}\n\nexport class WorkerChannel {\n  constructor(private readonly port: MessagePort) {}\n\n  public postMessage<Event extends keyof WorkerChannelEventsMap>(\n    event: Event,\n    ...rest: WorkerChannelEventsMap[Event]\n  ): void {\n    const [data, transfer] = rest\n    this.port.postMessage({ type: event, data }, { transfer })\n  }\n}\n","import type { ServiceWorkerIncomingRequest } from '../setupWorker/glossary'\n\ntype Input = Pick<ServiceWorkerIncomingRequest, 'method' | 'body'>\n\n/**\n * Ensures that an empty GET request body is always represented as `undefined`.\n */\nexport function pruneGetRequestBody(\n  request: Input,\n): ServiceWorkerIncomingRequest['body'] {\n  // Force HEAD/GET request body to always be empty.\n  // The worker reads any request's body as ArrayBuffer,\n  // and you cannot re-construct a GET/HEAD Request\n  // with an ArrayBuffer, even if empty. Also note that\n  // \"request.body\" is always undefined in the worker.\n  if (['HEAD', 'GET'].includes(request.method)) {\n    return undefined\n  }\n\n  return request.body\n}\n","import { pruneGetRequestBody } from './pruneGetRequestBody'\nimport type { ServiceWorkerIncomingRequest } from '../setupWorker/glossary'\n\n/**\n * Converts a given request received from the Service Worker\n * into a Fetch `Request` instance.\n */\nexport function parseWorkerRequest(\n  incomingRequest: ServiceWorkerIncomingRequest,\n): Request {\n  return new Request(incomingRequest.url, {\n    ...incomingRequest,\n    body: pruneGetRequestBody(incomingRequest),\n  })\n}\n","import {\n  StartOptions,\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n} from '../glossary'\nimport {\n  ServiceWorkerMessage,\n  WorkerChannel,\n} from './utils/createMessageChannel'\nimport { parseWorkerRequest } from '../../utils/parseWorkerRequest'\nimport { RequestHandler } from '~/core/handlers/RequestHandler'\nimport { handleRequest } from '~/core/utils/handleRequest'\nimport { RequiredDeep } from '~/core/typeUtils'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { toResponseInit } from '~/core/utils/toResponseInit'\nimport { isHandlerKind } from '~/core/utils/internal/isHandlerKind'\n\nexport const createRequestListener = (\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n) => {\n  return async (\n    event: MessageEvent,\n    message: ServiceWorkerMessage<\n      'REQUEST',\n      ServiceWorkerIncomingEventsMap['REQUEST']\n    >,\n  ) => {\n    const messageChannel = new WorkerChannel(event.ports[0])\n\n    const requestId = message.payload.id\n    const request = parseWorkerRequest(message.payload)\n    const requestCloneForLogs = request.clone()\n\n    // Make this the first requets clone before the\n    // request resolution pipeline even starts.\n    // Store the clone in cache so the first matching\n    // request handler would skip the cloning phase.\n    const requestClone = request.clone()\n    RequestHandler.cache.set(request, requestClone)\n    context.requests.set(requestId, requestClone)\n\n    try {\n      await handleRequest(\n        request,\n        requestId,\n        context.getRequestHandlers().filter(isHandlerKind('RequestHandler')),\n        options,\n        context.emitter,\n        {\n          onPassthroughResponse() {\n            messageChannel.postMessage('PASSTHROUGH')\n          },\n          async onMockedResponse(response, { handler, parsedResult }) {\n            // Clone the mocked response so its body could be read\n            // to buffer to be sent to the worker and also in the\n            // \".log()\" method of the request handler.\n            const responseClone = response.clone()\n            const responseCloneForLogs = response.clone()\n            const responseInit = toResponseInit(response)\n\n            /**\n             * @note Safari doesn't support transferring a \"ReadableStream\".\n             * Check that the browser supports that before sending it to the worker.\n             */\n            if (context.supports.readableStreamTransfer) {\n              const responseStreamOrNull = response.body\n\n              messageChannel.postMessage(\n                'MOCK_RESPONSE',\n                {\n                  ...responseInit,\n                  body: responseStreamOrNull,\n                },\n                responseStreamOrNull ? [responseStreamOrNull] : undefined,\n              )\n            } else {\n              /**\n               * @note If we are here, this means the current environment doesn't\n               * support \"ReadableStream\" as transferable. In that case,\n               * attempt to read the non-empty response body as ArrayBuffer, if it's not empty.\n               * @see https://github.com/mswjs/msw/issues/1827\n               */\n              const responseBufferOrNull =\n                response.body === null\n                  ? null\n                  : await responseClone.arrayBuffer()\n\n              messageChannel.postMessage('MOCK_RESPONSE', {\n                ...responseInit,\n                body: responseBufferOrNull,\n              })\n            }\n\n            if (!options.quiet) {\n              context.emitter.once('response:mocked', () => {\n                handler.log({\n                  request: requestCloneForLogs,\n                  response: responseCloneForLogs,\n                  parsedResult,\n                })\n              })\n            }\n          },\n        },\n      )\n    } catch (error) {\n      if (error instanceof Error) {\n        devUtils.error(\n          `Uncaught exception in the request handler for \"%s %s\":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,\n          request.method,\n          request.url,\n          error.stack ?? error,\n        )\n\n        // Treat all other exceptions in a request handler as unintended,\n        // alerting that there is a problem that needs fixing.\n        messageChannel.postMessage('MOCK_RESPONSE', {\n          status: 500,\n          statusText: 'Request Handler Error',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          }),\n        })\n      }\n    }\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport type { SetupWorkerInternalContext } from '../setupWorker/glossary'\n\n/**\n * Check whether the registered Service Worker has been\n * generated by the installed version of the library.\n * Prints a warning message if the worker scripts mismatch.\n */\nexport async function checkWorkerIntegrity(\n  context: SetupWorkerInternalContext,\n): Promise<void> {\n  // Request the integrity checksum from the registered worker.\n  context.workerChannel.send('INTEGRITY_CHECK_REQUEST')\n\n  const { payload } = await context.events.once('INTEGRITY_CHECK_RESPONSE')\n\n  // Compare the response from the Service Worker and the\n  // global variable set during the build.\n\n  // The integrity is validated based on the worker script's checksum\n  // that's derived from its minified content during the build.\n  // The \"SERVICE_WORKER_CHECKSUM\" global variable is injected by the build.\n  if (payload.checksum !== SERVICE_WORKER_CHECKSUM) {\n    devUtils.warn(\n      `The currently registered Service Worker has been generated by a different version of MSW (${payload.packageVersion}) and may not be fully compatible with the installed version.\n\nIt's recommended you update your worker script by running this command:\n\n  \\u2022 npx msw init <PUBLIC_DIR>\n\nYou can also automate this process and make the worker script update automatically upon the library installations. Read more: https://mswjs.io/docs/cli/init.`,\n    )\n  }\n}\n","const encoder = new TextEncoder()\n\nexport function encodeBuffer(text: string): Uint8Array {\n  return encoder.encode(text)\n}\n\nexport function decodeBuffer(buffer: ArrayBuffer, encoding?: string): string {\n  const decoder = new TextDecoder(encoding)\n  return decoder.decode(buffer)\n}\n\n/**\n * Create an `ArrayBuffer` from the given `Uint8Array`.\n * Takes the byte offset into account to produce the right buffer\n * in the case when the buffer is bigger than the data view.\n */\nexport function toArrayBuffer(array: Uint8Array): ArrayBuffer {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  )\n}\n","import type { RequestController } from './RequestController'\n\nexport const IS_PATCHED_MODULE: unique symbol = Symbol('isPatchedModule')\n\n/**\n * @note Export `RequestController` as a type only.\n * It's never meant to be created in the userland.\n */\nexport type { RequestController }\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport type HttpRequestEventMap = {\n  request: [\n    args: {\n      request: Request\n      requestId: string\n      controller: RequestController\n    }\n  ]\n  response: [\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ]\n  unhandledException: [\n    args: {\n      error: unknown\n      request: Request\n      requestId: string\n      controller: RequestController\n    }\n  ]\n}\n","export interface FetchResponseInit extends ResponseInit {\n  url?: string\n}\n\nexport class FetchResponse extends Response {\n  /**\n   * Response status codes for responses that cannot have body.\n   * @see https://fetch.spec.whatwg.org/#statuses\n   */\n  static readonly STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304]\n\n  static readonly STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308]\n\n  static isConfigurableStatusCode(status: number): boolean {\n    return status >= 200 && status <= 599\n  }\n\n  static isRedirectResponse(status: number): boolean {\n    return FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status)\n  }\n\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status: number): boolean {\n    return !FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status)\n  }\n\n  static setUrl(url: string | undefined, response: Response): void {\n    if (!url) {\n      return\n    }\n\n    if (response.url != '') {\n      return\n    }\n\n    Object.defineProperty(response, 'url', {\n      value: url,\n      enumerable: true,\n      configurable: true,\n      writable: false,\n    })\n  }\n\n  constructor(body?: BodyInit | null, init: FetchResponseInit = {}) {\n    const status = init.status ?? 200\n    const safeStatus = FetchResponse.isConfigurableStatusCode(status)\n      ? status\n      : 200\n    const finalBody = FetchResponse.isResponseWithBody(status) ? body : null\n\n    super(finalBody, {\n      ...init,\n      status: safeStatus,\n    })\n\n    if (status !== safeStatus) {\n      /**\n       * @note Undici keeps an internal \"Symbol(state)\" that holds\n       * the actual value of response status. Update that in Node.js.\n       */\n      const stateSymbol = Object.getOwnPropertySymbols(this).find(\n        (symbol) => symbol.description === 'state'\n      )\n      if (stateSymbol) {\n        const state = Reflect.get(this, stateSymbol) as object\n        Reflect.set(state, 'status', status)\n      } else {\n        Object.defineProperty(this, 'status', {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false,\n        })\n      }\n    }\n\n    FetchResponse.setUrl(init.url, this)\n  }\n}\n","var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/index.ts\nimport { isNodeProcess } from \"is-node-process\";\nimport { format } from \"outvariant\";\n\n// src/colors.ts\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\n\n// src/index.ts\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message, ...positionals) {\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return (message2, ...positionals2) => {\n      performance2.measure();\n      this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message, ...positionals) {\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message, ...positionals) {\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */ new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write(\n      [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"),\n      ...positionals.map(serializeInput)\n    );\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\n      \"en-GB\"\n    )}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\": {\n        return log;\n      }\n      case \"warning\": {\n        return warn;\n      }\n      case \"error\": {\n        return error;\n      }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message, ...positionals) {\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\nexport {\n  Logger\n};\n","import type { Emitter } from './Emitter'\n\nexport class MemoryLeakError extends Error {\n  constructor(\n    public readonly emitter: Emitter<any>,\n    public readonly type: string | number | symbol,\n    public readonly count: number\n  ) {\n    super(\n      `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`\n    )\n    this.name = 'MaxListenersExceededWarning'\n  }\n}\n","import { MemoryLeakError } from './MemoryLeakError'\n\nexport type EventMap = {\n  [eventName: string]: Array<unknown>\n}\n\nexport type InternalEventNames = 'newListener' | 'removeListener'\n\nexport type InternalListener<Events extends EventMap> = Listener<\n  [eventName: keyof Events, listener: Listener<Array<unknown>>]\n>\n\nexport type Listener<Data extends Array<unknown>> = (...data: Data) => void\n\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nexport class Emitter<Events extends EventMap> {\n  private events: Map<keyof Events, Array<Listener<any>>>\n  private maxListeners: number\n  private hasWarnedAboutPotentialMemoryLeak: boolean\n\n  static defaultMaxListeners = 10\n\n  static listenerCount<Events extends EventMap>(\n    emitter: Emitter<EventMap>,\n    eventName: keyof Events\n  ): number {\n    return emitter.listenerCount<any>(eventName)\n  }\n\n  constructor() {\n    this.events = new Map()\n    this.maxListeners = Emitter.defaultMaxListeners\n    this.hasWarnedAboutPotentialMemoryLeak = false\n  }\n\n  private _emitInternalEvent(\n    internalEventName: InternalEventNames,\n    eventName: keyof Events,\n    listener: Listener<Array<unknown>>\n  ): void {\n    this.emit(\n      internalEventName,\n      // Anything to make TypeScript happy.\n      ...([eventName, listener] as Events['newListener'] &\n        Events['removeListener'])\n    )\n  }\n\n  private _getListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Array<unknown>>> {\n    // Always return a copy of the listeners array\n    // so they are fixed at the time of the \"_getListeners\" call.\n    return Array.prototype.concat.apply([], this.events.get(eventName)) || []\n  }\n\n  private _removeListener<EventName extends keyof Events>(\n    listeners: Array<Listener<Events[EventName]>>,\n    listener: Listener<Events[EventName]>\n  ): Array<Listener<Events[EventName]>> {\n    const index = listeners.indexOf(listener)\n\n    if (index > -1) {\n      listeners.splice(index, 1)\n    }\n\n    return []\n  }\n\n  private _wrapOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): Listener<Events[EventName]> {\n    const onceListener = (...data: Events[keyof Events]) => {\n      this.removeListener(eventName, onceListener)\n\n      /**\n       * @note Return the result of the original listener.\n       * This way this wrapped preserves listeners that are async.\n       */\n      return listener.apply(this, data)\n    }\n\n    // Inherit the name of the original listener.\n    Object.defineProperty(onceListener, 'name', { value: listener.name })\n\n    return onceListener\n  }\n\n  public setMaxListeners(maxListeners: number): this {\n    this.maxListeners = maxListeners\n    return this\n  }\n\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  public getMaxListeners(): number {\n    return this.maxListeners\n  }\n\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  public eventNames(): Array<keyof Events> {\n    return Array.from(this.events.keys())\n  }\n\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  public emit<EventName extends keyof Events>(\n    eventName: EventName,\n    ...data: Events[EventName]\n  ): boolean {\n    const listeners = this._getListeners(eventName)\n    listeners.forEach((listener) => {\n      listener.apply(this, data)\n    })\n\n    return listeners.length > 0\n  }\n\n  public addListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public addListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public addListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: InternalListener<Events> | Listener<Events[any]>\n  ): this {\n    // Emit the `newListener` event before adding the listener.\n    this._emitInternalEvent('newListener', eventName, listener)\n\n    const nextListeners = this._getListeners(eventName).concat(listener)\n    this.events.set(eventName, nextListeners)\n\n    if (\n      this.maxListeners > 0 &&\n      this.listenerCount(eventName) > this.maxListeners &&\n      !this.hasWarnedAboutPotentialMemoryLeak\n    ) {\n      this.hasWarnedAboutPotentialMemoryLeak = true\n\n      const memoryLeakWarning = new MemoryLeakError(\n        this,\n        eventName,\n        this.listenerCount(eventName)\n      )\n      console.warn(memoryLeakWarning)\n    }\n\n    return this\n  }\n\n  public on(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public on<EventName extends keyof Events>(\n    eventName: 'removeListener' | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(eventName, listener)\n  }\n\n  public once(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public once<EventName extends keyof Events>(\n    eventName: InternalEventNames | EventName,\n    listener: Listener<any>\n  ): this {\n    return this.addListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public prependListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners)\n      this.events.set(eventName, nextListeners)\n    } else {\n      this.events.set(eventName, listeners.concat(listener))\n    }\n\n    return this\n  }\n\n  public prependOnceListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public prependOnceListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public prependOnceListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.prependListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    )\n  }\n\n  public removeListener(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public removeListener<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  public removeListener(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    const listeners = this._getListeners(eventName)\n\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener)\n      this.events.set(eventName, listeners)\n\n      // Emit the `removeListener` event after removing the listener.\n      this._emitInternalEvent('removeListener', eventName, listener)\n    }\n\n    return this\n  }\n\n  public off(\n    eventName: InternalEventNames,\n    listener: InternalListener<Events>\n  ): this\n  public off<EventName extends keyof Events>(\n    eventName: EventName,\n    listener: Listener<Events[EventName]>\n  ): this\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  public off(\n    eventName: InternalEventNames | keyof Events,\n    listener: Listener<any>\n  ): this {\n    return this.removeListener(eventName, listener)\n  }\n\n  public removeAllListeners(eventName?: InternalEventNames): this\n  public removeAllListeners<EventName extends keyof Events>(\n    eventName?: EventName\n  ): this\n  public removeAllListeners(\n    eventName?: InternalEventNames | keyof Events\n  ): this {\n    if (eventName) {\n      this.events.delete(eventName)\n    } else {\n      this.events.clear()\n    }\n\n    return this\n  }\n\n  public listeners(eventName: InternalEventNames): Array<Listener<any>>\n  public listeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>>\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  public listeners(eventName: InternalEventNames | keyof Events) {\n    return Array.from(this._getListeners(eventName))\n  }\n\n  public listenerCount(eventName: InternalEventNames): number\n  public listenerCount<EventName extends keyof Events>(\n    eventName: EventName\n  ): number\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  public listenerCount(eventName: InternalEventNames | keyof Events): number {\n    return this._getListeners(eventName).length\n  }\n\n  public rawListeners<EventName extends keyof Events>(\n    eventName: EventName\n  ): Array<Listener<Events[EventName]>> {\n    return this.listeners(eventName)\n  }\n}\n","import { Logger } from '@open-draft/logger'\nimport { Emitter, Listener } from 'strict-event-emitter'\n\nexport type InterceptorEventMap = Record<string, any>\nexport type InterceptorSubscription = () => void\n\n/**\n * Request header name to detect when a single request\n * is being handled by nested interceptors (XHR -> ClientRequest).\n * Obscure by design to prevent collisions with user-defined headers.\n * Ideally, come up with the Interceptor-level mechanism for this.\n * @see https://github.com/mswjs/interceptors/issues/378\n */\nexport const INTERNAL_REQUEST_ID_HEADER_NAME =\n  'x-interceptors-internal-request-id'\n\nexport function getGlobalSymbol<V>(symbol: Symbol): V | undefined {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || undefined\n  )\n}\n\nfunction setGlobalSymbol(symbol: Symbol, value: any): void {\n  // @ts-ignore\n  globalThis[symbol] = value\n}\n\nexport function deleteGlobalSymbol(symbol: Symbol): void {\n  // @ts-ignore\n  delete globalThis[symbol]\n}\n\nexport enum InterceptorReadyState {\n  INACTIVE = 'INACTIVE',\n  APPLYING = 'APPLYING',\n  APPLIED = 'APPLIED',\n  DISPOSING = 'DISPOSING',\n  DISPOSED = 'DISPOSED',\n}\n\nexport type ExtractEventNames<Events extends Record<string, any>> =\n  Events extends Record<infer EventName, any> ? EventName : never\n\nexport class Interceptor<Events extends InterceptorEventMap> {\n  protected emitter: Emitter<Events>\n  protected subscriptions: Array<InterceptorSubscription>\n  protected logger: Logger\n\n  public readyState: InterceptorReadyState\n\n  constructor(private readonly symbol: symbol) {\n    this.readyState = InterceptorReadyState.INACTIVE\n\n    this.emitter = new Emitter()\n    this.subscriptions = []\n    this.logger = new Logger(symbol.description!)\n\n    // Do not limit the maximum number of listeners\n    // so not to limit the maximum amount of parallel events emitted.\n    this.emitter.setMaxListeners(0)\n\n    this.logger.info('constructing the interceptor...')\n  }\n\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  protected checkEnvironment(): boolean {\n    return true\n  }\n\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  public apply(): void {\n    const logger = this.logger.extend('apply')\n    logger.info('applying the interceptor...')\n\n    if (this.readyState === InterceptorReadyState.APPLIED) {\n      logger.info('intercepted already applied!')\n      return\n    }\n\n    const shouldApply = this.checkEnvironment()\n\n    if (!shouldApply) {\n      logger.info('the interceptor cannot be applied in this environment!')\n      return\n    }\n\n    this.readyState = InterceptorReadyState.APPLYING\n\n    // Whenever applying a new interceptor, check if it hasn't been applied already.\n    // This enables to apply the same interceptor multiple times, for example from a different\n    // interceptor, only proxying events but keeping the stubs in a single place.\n    const runningInstance = this.getInstance()\n\n    if (runningInstance) {\n      logger.info('found a running instance, reusing...')\n\n      // Proxy any listeners you set on this instance to the running instance.\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event)\n\n        // Add listeners to the running instance so they appear\n        // at the top of the event listeners list and are executed first.\n        runningInstance.emitter.addListener(event, listener)\n\n        // Ensure that once this interceptor instance is disposed,\n        // it removes all listeners it has appended to the running interceptor instance.\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener)\n          logger.info('removed proxied \"%s\" listener!', event)\n        })\n\n        return this\n      }\n\n      this.readyState = InterceptorReadyState.APPLIED\n\n      return\n    }\n\n    logger.info('no running instance found, setting up a new instance...')\n\n    // Setup the interceptor.\n    this.setup()\n\n    // Store the newly applied interceptor instance globally.\n    this.setInstance()\n\n    this.readyState = InterceptorReadyState.APPLIED\n  }\n\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  protected setup(): void {}\n\n  /**\n   * Listen to the interceptor's public events.\n   */\n  public on<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    const logger = this.logger.extend('on')\n\n    if (\n      this.readyState === InterceptorReadyState.DISPOSING ||\n      this.readyState === InterceptorReadyState.DISPOSED\n    ) {\n      logger.info('cannot listen to events, already disposed!')\n      return this\n    }\n\n    logger.info('adding \"%s\" event listener:', event, listener)\n\n    this.emitter.on(event, listener)\n    return this\n  }\n\n  public once<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.once(event, listener)\n    return this\n  }\n\n  public off<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.off(event, listener)\n    return this\n  }\n\n  public removeAllListeners<EventName extends ExtractEventNames<Events>>(\n    event?: EventName\n  ): this {\n    this.emitter.removeAllListeners(event)\n    return this\n  }\n\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  public dispose(): void {\n    const logger = this.logger.extend('dispose')\n\n    if (this.readyState === InterceptorReadyState.DISPOSED) {\n      logger.info('cannot dispose, already disposed!')\n      return\n    }\n\n    logger.info('disposing the interceptor...')\n    this.readyState = InterceptorReadyState.DISPOSING\n\n    if (!this.getInstance()) {\n      logger.info('no interceptors running, skipping dispose...')\n      return\n    }\n\n    // Delete the global symbol as soon as possible,\n    // indicating that the interceptor is no longer running.\n    this.clearInstance()\n\n    logger.info('global symbol deleted:', getGlobalSymbol(this.symbol))\n\n    if (this.subscriptions.length > 0) {\n      logger.info('disposing of %d subscriptions...', this.subscriptions.length)\n\n      for (const dispose of this.subscriptions) {\n        dispose()\n      }\n\n      this.subscriptions = []\n\n      logger.info('disposed of all subscriptions!', this.subscriptions.length)\n    }\n\n    this.emitter.removeAllListeners()\n    logger.info('destroyed the listener!')\n\n    this.readyState = InterceptorReadyState.DISPOSED\n  }\n\n  private getInstance(): this | undefined {\n    const instance = getGlobalSymbol<this>(this.symbol)\n    this.logger.info('retrieved global instance:', instance?.constructor?.name)\n    return instance\n  }\n\n  private setInstance(): void {\n    setGlobalSymbol(this.symbol, this)\n    this.logger.info('set global instance!', this.symbol.description)\n  }\n\n  private clearInstance(): void {\n    deleteGlobalSymbol(this.symbol)\n    this.logger.info('cleared global instance!', this.symbol.description)\n  }\n}\n","/**\n * Generate a random ID string to represent a request.\n * @example\n * createRequestId()\n * // \"f774b6c9c600f\"\n */\nexport function createRequestId(): string {\n  return Math.random().toString(16).slice(2)\n}\n","import { EventMap, Listener } from 'strict-event-emitter'\nimport { Interceptor, ExtractEventNames } from './Interceptor'\n\nexport interface BatchInterceptorOptions<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>\n> {\n  name: string\n  interceptors: InterceptorList\n}\n\nexport type ExtractEventMapType<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>\n> = InterceptorList extends ReadonlyArray<infer InterceptorType>\n  ? InterceptorType extends Interceptor<infer EventMap>\n    ? EventMap\n    : never\n  : never\n\n/**\n * A batch interceptor that exposes a single interface\n * to apply and operate with multiple interceptors at once.\n */\nexport class BatchInterceptor<\n  InterceptorList extends ReadonlyArray<Interceptor<any>>,\n  Events extends EventMap = ExtractEventMapType<InterceptorList>\n> extends Interceptor<Events> {\n  static symbol: symbol\n\n  private interceptors: InterceptorList\n\n  constructor(options: BatchInterceptorOptions<InterceptorList>) {\n    BatchInterceptor.symbol = Symbol(options.name)\n    super(BatchInterceptor.symbol)\n    this.interceptors = options.interceptors\n  }\n\n  protected setup() {\n    const logger = this.logger.extend('setup')\n\n    logger.info('applying all %d interceptors...', this.interceptors.length)\n\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name)\n      interceptor.apply()\n\n      logger.info('adding interceptor dispose subscription')\n      this.subscriptions.push(() => interceptor.dispose())\n    }\n  }\n\n  public on<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    // Instead of adding a listener to the batch interceptor,\n    // propagate the listener to each of the individual interceptors.\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener)\n    }\n\n    return this\n  }\n\n  public once<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener)\n    }\n\n    return this\n  }\n\n  public off<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener)\n    }\n\n    return this\n  }\n\n  public removeAllListeners<EventName extends ExtractEventNames<Events>>(\n    event?: EventName | undefined\n  ): this {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event)\n    }\n\n    return this\n  }\n}\n","/**\n * Removes query parameters and hashes from a given URL.\n */\nexport function getCleanUrl(url: URL, isAbsolute: boolean = true): string {\n  return [isAbsolute && url.origin, url.pathname].filter(Boolean).join('')\n}\n","import { FetchResponse } from '@mswjs/interceptors'\nimport type {\n  ServiceWorkerIncomingEventsMap,\n  SetupWorkerInternalContext,\n} from '../glossary'\nimport type { ServiceWorkerMessage } from './utils/createMessageChannel'\n\nexport function createResponseListener(context: SetupWorkerInternalContext) {\n  return (\n    _: MessageEvent,\n    message: ServiceWorkerMessage<\n      'RESPONSE',\n      ServiceWorkerIncomingEventsMap['RESPONSE']\n    >,\n  ) => {\n    const { payload: responseJson } = message\n\n    // Get the Request instance reference stored in the\n    // request listener.\n    const { requestId } = responseJson\n    const request = context.requests.get(requestId)!\n    context.requests.delete(requestId)\n\n    /**\n     * CORS requests with `mode: \"no-cors\"` result in \"opaque\" responses.\n     * That kind of responses cannot be manipulated in JavaScript due\n     * to the security considerations.\n     * @see https://fetch.spec.whatwg.org/#concept-filtered-response-opaque\n     * @see https://github.com/mswjs/msw/issues/529\n     */\n    if (responseJson.type?.includes('opaque')) {\n      return\n    }\n\n    const response =\n      responseJson.status === 0\n        ? Response.error()\n        : new FetchResponse(\n            /**\n             * Responses may be streams here, but when we create a response object\n             * with null-body status codes, like 204, 205, 304 Response will\n             * throw when passed a non-null body, so ensure it's null here\n             * for those codes\n             */\n            FetchResponse.isResponseWithBody(responseJson.status)\n              ? responseJson.body\n              : null,\n            {\n              ...responseJson,\n              /**\n               * Set response URL if it's not set already.\n               * @see https://github.com/mswjs/msw/issues/2030\n               * @see https://developer.mozilla.org/en-US/docs/Web/API/Response/url\n               */\n              url: request.url,\n            },\n          )\n\n    context.emitter.emit(\n      responseJson.isMockedResponse ? 'response:mocked' : 'response:bypass',\n      {\n        response,\n        request,\n        requestId: responseJson.requestId,\n      },\n    )\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { StartOptions } from '../../glossary'\n\nexport function validateWorkerScope(\n  registration: ServiceWorkerRegistration,\n  options?: StartOptions,\n): void {\n  if (!options?.quiet && !location.href.startsWith(registration.scope)) {\n    devUtils.warn(\n      `\\\nCannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level (\"/\") of your application.\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.\\\n`,\n    )\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\nimport { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport const createStop = (\n  context: SetupWorkerInternalContext,\n): StopHandler => {\n  return function stop() {\n    // Warn developers calling \"worker.stop()\" more times than necessary.\n    // This likely indicates a mistake in their code.\n    if (!context.isMockingEnabled) {\n      devUtils.warn(\n        'Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.',\n      )\n      return\n    }\n\n    /**\n     * Signal the Service Worker to disable mocking for this client.\n     * Use this an an explicit way to stop the mocking, while preserving\n     * the worker-client relation. Does not affect the worker's lifecycle.\n     */\n    context.workerChannel.send('MOCK_DEACTIVATE')\n    context.isMockingEnabled = false\n    window.clearInterval(context.keepAliveInterval)\n\n    // Post the internal stop message on the window\n    // to let any logic know when the worker has stopped.\n    // E.g. the WebSocket client manager needs this to know\n    // when to clear its in-memory clients list.\n    window.postMessage({ type: 'msw/worker:stop' })\n\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n","import { devUtils } from '~/core/utils/internal/devUtils'\n\nexport function printStopMessage(args: { quiet?: boolean } = {}): void {\n  if (args.quiet) {\n    return\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(\n    `%c${devUtils.formatMessage('Mocking disabled.')}`,\n    'color:orangered;font-weight:bold;',\n  )\n}\n","import { RequiredDeep } from '~/core/typeUtils'\nimport { mergeRight } from '~/core/utils/internal/mergeRight'\nimport {\n  SetupWorker,\n  SetupWorkerInternalContext,\n  StartHandler,\n  StartOptions,\n} from '../../glossary'\n\nexport const DEFAULT_START_OPTIONS: RequiredDeep<StartOptions> = {\n  serviceWorker: {\n    url: '/mockServiceWorker.js',\n    options: null as any,\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: 'warn',\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl\n  },\n}\n\n/**\n * Returns resolved worker start options, merging the default options\n * with the given custom options.\n */\nexport function resolveStartOptions(\n  initialOptions?: StartOptions,\n): RequiredDeep<StartOptions> {\n  return mergeRight(\n    DEFAULT_START_OPTIONS,\n    initialOptions || {},\n  ) as RequiredDeep<StartOptions>\n}\n\nexport function prepareStartHandler(\n  handler: StartHandler,\n  context: SetupWorkerInternalContext,\n): SetupWorker['start'] {\n  return (initialOptions) => {\n    context.startOptions = resolveStartOptions(initialOptions)\n    return handler(context.startOptions, initialOptions || {})\n  }\n}\n","export type PromiseState = 'pending' | 'fulfilled' | 'rejected'\n\nexport type Executor<Value> = ConstructorParameters<typeof Promise<Value>>[0]\nexport type ResolveFunction<Value> = Parameters<Executor<Value>>[0]\nexport type RejectFunction<Reason> = Parameters<Executor<Reason>>[1]\n\nexport type DeferredPromiseExecutor<Input = never, Output = Input> = {\n  (resolve?: ResolveFunction<Input>, reject?: RejectFunction<any>): void\n\n  resolve: ResolveFunction<Input>\n  reject: RejectFunction<any>\n  result?: Output\n  state: PromiseState\n  rejectionReason?: unknown\n}\nexport function createDeferredExecutor<\n  Input = never,\n  Output = Input\n>(): DeferredPromiseExecutor<Input, Output> {\n  const executor = <DeferredPromiseExecutor<Input, Output>>((\n    resolve,\n    reject\n  ) => {\n    executor.state = 'pending'\n\n    executor.resolve = (data) => {\n      if (executor.state !== 'pending') {\n        return\n      }\n\n      executor.result = data as Output\n\n      const onFulfilled = <Value>(value: Value) => {\n        executor.state = 'fulfilled'\n        return value\n      }\n\n      return resolve(\n        data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled)\n      )\n    }\n\n    executor.reject = (reason) => {\n      if (executor.state !== 'pending') {\n        return\n      }\n\n      queueMicrotask(() => {\n        executor.state = 'rejected'\n      })\n\n      return reject((executor.rejectionReason = reason))\n    }\n  })\n\n  return executor\n}\n","import {\n  type Executor,\n  type RejectFunction,\n  type ResolveFunction,\n  type DeferredPromiseExecutor,\n  createDeferredExecutor,\n} from './createDeferredExecutor'\n\nexport class DeferredPromise<Input, Output = Input> extends Promise<Input> {\n  #executor: DeferredPromiseExecutor\n\n  public resolve: ResolveFunction<Output>\n  public reject: RejectFunction<Output>\n\n  constructor(executor: Executor<Input> | null = null) {\n    const deferredExecutor = createDeferredExecutor()\n    super((originalResolve, originalReject) => {\n      deferredExecutor(originalResolve, originalReject)\n      executor?.(deferredExecutor.resolve, deferredExecutor.reject)\n    })\n\n    this.#executor = deferredExecutor\n    this.resolve = this.#executor.resolve\n    this.reject = this.#executor.reject\n  }\n\n  public get state() {\n    return this.#executor.state\n  }\n\n  public get rejectionReason() {\n    return this.#executor.rejectionReason\n  }\n\n  public then<ThenResult = Input, CatchResult = never>(\n    onFulfilled?: (value: Input) => ThenResult | PromiseLike<ThenResult>,\n    onRejected?: (reason: any) => CatchResult | PromiseLike<CatchResult>\n  ) {\n    return this.#decorate(super.then(onFulfilled, onRejected))\n  }\n\n  public catch<CatchResult = never>(\n    onRejected?: (reason: any) => CatchResult | PromiseLike<CatchResult>\n  ) {\n    return this.#decorate(super.catch(onRejected))\n  }\n\n  public finally(onfinally?: () => void | Promise<any>) {\n    return this.#decorate(super.finally(onfinally))\n  }\n\n  #decorate<ChildInput>(\n    promise: Promise<ChildInput>\n  ): DeferredPromise<ChildInput, Output> {\n    return Object.defineProperties(promise, {\n      resolve: { configurable: true, value: this.resolve },\n      reject: { configurable: true, value: this.reject },\n    }) as DeferredPromise<ChildInput, Output>\n  }\n}\n","import { invariant } from 'outvariant'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\nimport { InterceptorError } from './InterceptorError'\n\nconst kRequestHandled = Symbol('kRequestHandled')\nexport const kResponsePromise = Symbol('kResponsePromise')\n\nexport class RequestController {\n  /**\n   * Internal response promise.\n   * Available only for the library internals to grab the\n   * response instance provided by the developer.\n   * @note This promise cannot be rejected. It's either infinitely\n   * pending or resolved with whichever Response was passed to `respondWith()`.\n   */\n  [kResponsePromise]: DeferredPromise<Response | Error | undefined>;\n\n  /**\n   * Internal flag indicating if this request has been handled.\n   * @note The response promise becomes \"fulfilled\" on the next tick.\n   */\n  [kRequestHandled]: boolean\n\n  constructor(private request: Request) {\n    this[kRequestHandled] = false\n    this[kResponsePromise] = new DeferredPromise()\n  }\n\n  /**\n   * Respond to this request with the given `Response` instance.\n   * @example\n   * controller.respondWith(new Response())\n   * controller.respondWith(Response.json({ id }))\n   * controller.respondWith(Response.error())\n   */\n  public respondWith(response: Response): void {\n    invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to respond to the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    )\n\n    this[kRequestHandled] = true\n    this[kResponsePromise].resolve(response)\n\n    /**\n     * @note The request conrtoller doesn't do anything\n     * apart from letting the interceptor await the response\n     * provided by the developer through the response promise.\n     * Each interceptor implements the actual respondWith/errorWith\n     * logic based on that interceptor's needs.\n     */\n  }\n\n  /**\n   * Error this request with the given error.\n   * @example\n   * controller.errorWith()\n   * controller.errorWith(new Error('Oops!'))\n   */\n  public errorWith(error?: Error): void {\n    invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to error the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    )\n\n    this[kRequestHandled] = true\n\n    /**\n     * @note Resolve the response promise, not reject.\n     * This helps us differentiate between unhandled exceptions\n     * and intended errors (\"errorWith\") while waiting for the response.\n     */\n    this[kResponsePromise].resolve(error)\n  }\n}\n","export class InterceptorError extends Error {\n  constructor(message?: string) {\n    super(message)\n    this.name = 'InterceptorError'\n    Object.setPrototypeOf(this, InterceptorError.prototype)\n  }\n}\n","import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Emits an event on the given emitter but executes\n * the listeners sequentially. This accounts for asynchronous\n * listeners (e.g. those having \"sleep\" and handling the request).\n */\nexport async function emitAsync<\n  Events extends EventMap,\n  EventName extends keyof Events\n>(\n  emitter: Emitter<Events>,\n  eventName: EventName,\n  ...data: Events[EventName]\n): Promise<void> {\n  const listners = emitter.listeners(eventName)\n\n  if (listners.length === 0) {\n    return\n  }\n\n  for (const listener of listners) {\n    await listener.apply(emitter, data)\n  }\n}\n","import type { Emitter } from 'strict-event-emitter'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\nimport { until } from '@open-draft/until'\nimport type { HttpRequestEventMap } from '../glossary'\nimport { emitAsync } from './emitAsync'\nimport { kResponsePromise, RequestController } from '../RequestController'\nimport {\n  createServerErrorResponse,\n  isResponseError,\n  ResponseError,\n} from './responseUtils'\nimport { InterceptorError } from '../InterceptorError'\nimport { isNodeLikeError } from './isNodeLikeError'\n\ninterface HandleRequestOptions {\n  requestId: string\n  request: Request\n  emitter: Emitter<HttpRequestEventMap>\n  controller: RequestController\n\n  /**\n   * Called when the request has been handled\n   * with the given `Response` instance.\n   */\n  onResponse: (response: Response) => void | Promise<void>\n\n  /**\n   * Called when the request has been handled\n   * with the given `Response.error()` instance.\n   */\n  onRequestError: (response: ResponseError) => void\n\n  /**\n   * Called when an unhandled error happens during the\n   * request handling. This is never a thrown error/response.\n   */\n  onError: (error: unknown) => void\n}\n\n/**\n * @returns {Promise<boolean>} Indicates whether the request has been handled.\n */\nexport async function handleRequest(\n  options: HandleRequestOptions\n): Promise<boolean> {\n  const handleResponse = async (response: Response | Error) => {\n    if (response instanceof Error) {\n      options.onError(response)\n    }\n\n    // Handle \"Response.error()\" instances.\n    else if (isResponseError(response)) {\n      options.onRequestError(response)\n    } else {\n      await options.onResponse(response)\n    }\n\n    return true\n  }\n\n  const handleResponseError = async (error: unknown): Promise<boolean> => {\n    // Forward the special interceptor error instances\n    // to the developer. These must not be handled in any way.\n    if (error instanceof InterceptorError) {\n      throw result.error\n    }\n\n    // Support mocking Node.js-like errors.\n    if (isNodeLikeError(error)) {\n      options.onError(error)\n      return true\n    }\n\n    // Handle thrown responses.\n    if (error instanceof Response) {\n      return await handleResponse(error)\n    }\n\n    return false\n  }\n\n  // Add the last \"request\" listener to check if the request\n  // has been handled in any way. If it hasn't, resolve the\n  // response promise with undefined.\n  options.emitter.once('request', ({ requestId: pendingRequestId }) => {\n    if (pendingRequestId !== options.requestId) {\n      return\n    }\n\n    if (options.controller[kResponsePromise].state === 'pending') {\n      options.controller[kResponsePromise].resolve(undefined)\n    }\n  })\n\n  const requestAbortPromise = new DeferredPromise<void, unknown>()\n\n  /**\n   * @note `signal` is not always defined in React Native.\n   */\n  if (options.request.signal) {\n    if (options.request.signal.aborted) {\n      requestAbortPromise.reject(options.request.signal.reason)\n    } else {\n      options.request.signal.addEventListener(\n        'abort',\n        () => {\n          requestAbortPromise.reject(options.request.signal.reason)\n        },\n        { once: true }\n      )\n    }\n  }\n\n  const result = await until(async () => {\n    // Emit the \"request\" event and wait until all the listeners\n    // for that event are finished (e.g. async listeners awaited).\n    // By the end of this promise, the developer cannot affect the\n    // request anymore.\n    const requestListtenersPromise = emitAsync(options.emitter, 'request', {\n      requestId: options.requestId,\n      request: options.request,\n      controller: options.controller,\n    })\n\n    await Promise.race([\n      // Short-circuit the request handling promise if the request gets aborted.\n      requestAbortPromise,\n      requestListtenersPromise,\n      options.controller[kResponsePromise],\n    ])\n\n    // The response promise will settle immediately once\n    // the developer calls either \"respondWith\" or \"errorWith\".\n    const mockedResponse = await options.controller[kResponsePromise]\n    return mockedResponse\n  })\n\n  // Handle the request being aborted while waiting for the request listeners.\n  if (requestAbortPromise.state === 'rejected') {\n    options.onError(requestAbortPromise.rejectionReason)\n    return true\n  }\n\n  if (result.error) {\n    // Handle the error during the request listener execution.\n    // These can be thrown responses or request errors.\n    if (await handleResponseError(result.error)) {\n      return true\n    }\n\n    // If the developer has added \"unhandledException\" listeners,\n    // allow them to handle the error. They can translate it to a\n    // mocked response, network error, or forward it as-is.\n    if (options.emitter.listenerCount('unhandledException') > 0) {\n      // Create a new request controller just for the unhandled exception case.\n      // This is needed because the original controller might have been already\n      // interacted with (e.g. \"respondWith\" or \"errorWith\" called on it).\n      const unhandledExceptionController = new RequestController(\n        options.request\n      )\n\n      await emitAsync(options.emitter, 'unhandledException', {\n        error: result.error,\n        request: options.request,\n        requestId: options.requestId,\n        controller: unhandledExceptionController,\n      }).then(() => {\n        // If all the \"unhandledException\" listeners have finished\n        // but have not handled the response in any way, preemptively\n        // resolve the pending response promise from the new controller.\n        // This prevents it from hanging forever.\n        if (\n          unhandledExceptionController[kResponsePromise].state === 'pending'\n        ) {\n          unhandledExceptionController[kResponsePromise].resolve(undefined)\n        }\n      })\n\n      const nextResult = await until(\n        () => unhandledExceptionController[kResponsePromise]\n      )\n\n      /**\n       * @note Handle the result of the unhandled controller\n       * in the same way as the original request controller.\n       * The exception here is that thrown errors within the\n       * \"unhandledException\" event do NOT result in another\n       * emit of the same event. They are forwarded as-is.\n       */\n      if (nextResult.error) {\n        return handleResponseError(nextResult.error)\n      }\n\n      if (nextResult.data) {\n        return handleResponse(nextResult.data)\n      }\n    }\n\n    // Otherwise, coerce unhandled exceptions to a 500 Internal Server Error response.\n    options.onResponse(createServerErrorResponse(result.error))\n    return true\n  }\n\n  /**\n   * Handle a mocked Response instance.\n   * @note That this can also be an Error in case\n   * the developer called \"errorWith\". This differentiates\n   * unhandled exceptions from intended errors.\n   */\n  if (result.data) {\n    return handleResponse(result.data)\n  }\n\n  // In all other cases, consider the request unhandled.\n  // The interceptor must perform it as-is.\n  return false\n}\n","/**\n * A function that validates if property access is possible on an object\n * without throwing. It returns `true` if the property access is possible\n * and `false` otherwise.\n *\n * Environments like miniflare will throw on property access on certain objects\n * like Request and Response, for unimplemented properties.\n */\nexport function isPropertyAccessible<Obj extends Record<string, any>>(\n  obj: Obj,\n  key: keyof Obj\n) {\n  try {\n    obj[key]\n    return true\n  } catch {\n    return false\n  }\n}\n","import { isPropertyAccessible } from './isPropertyAccessible'\n\n/**\n * Creates a generic 500 Unhandled Exception response.\n */\nexport function createServerErrorResponse(body: unknown): Response {\n  return new Response(\n    JSON.stringify(\n      body instanceof Error\n        ? {\n            name: body.name,\n            message: body.message,\n            stack: body.stack,\n          }\n        : body\n    ),\n    {\n      status: 500,\n      statusText: 'Unhandled Exception',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  )\n}\n\nexport type ResponseError = Response & { type: 'error' }\n\n/**\n * Check if the given response is a `Response.error()`.\n *\n * @note Some environments, like Miniflare (Cloudflare) do not\n * implement the \"Response.type\" property and throw on its access.\n * Safely check if we can access \"type\" on \"Response\" before continuing.\n * @see https://github.com/mswjs/msw/issues/1834\n */\nexport function isResponseError(response: Response): response is ResponseError {\n  return isPropertyAccessible(response, 'type') && response.type === 'error'\n}\n","export function isNodeLikeError(\n  error: unknown\n): error is NodeJS.ErrnoException {\n  if (error == null) {\n    return false\n  }\n\n  if (!(error instanceof Error)) {\n    return false\n  }\n\n  return 'code' in error && 'errno' in error\n}\n","/**\n * Returns a boolean indicating whether the given global property\n * is defined and is configurable.\n */\nexport function hasConfigurableGlobal(propertyName: string): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName)\n\n  // The property is not set at all.\n  if (typeof descriptor === 'undefined') {\n    return false\n  }\n\n  // The property is set to a getter that returns undefined.\n  if (\n    typeof descriptor.get === 'function' &&\n    typeof descriptor.get() === 'undefined'\n  ) {\n    return false\n  }\n\n  // The property is set to a value equal to undefined.\n  if (typeof descriptor.get === 'undefined' && descriptor.value == null) {\n    return false\n  }\n\n  if (typeof descriptor.set === 'undefined' && !descriptor.configurable) {\n    console.error(\n      `[MSW] Failed to apply interceptor: the global \\`${propertyName}\\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`\n    )\n    return false\n  }\n\n  return true\n}\n","import { invariant } from 'outvariant'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { RequestController } from '../../RequestController'\nimport { emitAsync } from '../../utils/emitAsync'\nimport { handleRequest } from '../../utils/handleRequest'\nimport { canParseUrl } from '../../utils/canParseUrl'\nimport { createRequestId } from '../../createRequestId'\nimport { createNetworkError } from './utils/createNetworkError'\nimport { followFetchRedirect } from './utils/followRedirect'\nimport { decompressResponse } from './utils/decompression'\nimport { hasConfigurableGlobal } from '../../utils/hasConfigurableGlobal'\nimport { FetchResponse } from '../../utils/fetchUtils'\n\nexport class FetchInterceptor extends Interceptor<HttpRequestEventMap> {\n  static symbol = Symbol('fetch')\n\n  constructor() {\n    super(FetchInterceptor.symbol)\n  }\n\n  protected checkEnvironment() {\n    return hasConfigurableGlobal('fetch')\n  }\n\n  protected async setup() {\n    const pureFetch = globalThis.fetch\n\n    invariant(\n      !(pureFetch as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    )\n\n    globalThis.fetch = async (input, init) => {\n      const requestId = createRequestId()\n\n      /**\n       * @note Resolve potentially relative request URL\n       * against the present `location`. This is mainly\n       * for native `fetch` in JSDOM.\n       * @see https://github.com/mswjs/msw/issues/1625\n       */\n      const resolvedInput =\n        typeof input === 'string' &&\n        typeof location !== 'undefined' &&\n        !canParseUrl(input)\n          ? new URL(input, location.origin)\n          : input\n\n      const request = new Request(resolvedInput, init)\n      const responsePromise = new DeferredPromise<Response>()\n      const controller = new RequestController(request)\n\n      this.logger.info('[%s] %s', request.method, request.url)\n      this.logger.info('awaiting for the mocked response...')\n\n      this.logger.info(\n        'emitting the \"request\" event for %s listener(s)...',\n        this.emitter.listenerCount('request')\n      )\n\n      const isRequestHandled = await handleRequest({\n        request,\n        requestId,\n        emitter: this.emitter,\n        controller,\n        onResponse: async (rawResponse) => {\n          this.logger.info('received mocked response!', {\n            rawResponse,\n          })\n\n          // Decompress the mocked response body, if applicable.\n          const decompressedStream = decompressResponse(rawResponse)\n          const response =\n            decompressedStream === null\n              ? rawResponse\n              : new FetchResponse(decompressedStream, rawResponse)\n\n          FetchResponse.setUrl(request.url, response)\n\n          /**\n           * Undici's handling of following redirect responses.\n           * Treat the \"manual\" redirect mode as a regular mocked response.\n           * This way, the client can manually follow the redirect it receives.\n           * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/index.js#L1173\n           */\n          if (FetchResponse.isRedirectResponse(response.status)) {\n            // Reject the request promise if its `redirect` is set to `error`\n            // and it receives a mocked redirect response.\n            if (request.redirect === 'error') {\n              responsePromise.reject(createNetworkError('unexpected redirect'))\n              return\n            }\n\n            if (request.redirect === 'follow') {\n              followFetchRedirect(request, response).then(\n                (response) => {\n                  responsePromise.resolve(response)\n                },\n                (reason) => {\n                  responsePromise.reject(reason)\n                }\n              )\n              return\n            }\n          }\n\n          if (this.emitter.listenerCount('response') > 0) {\n            this.logger.info('emitting the \"response\" event...')\n\n            // Await the response listeners to finish before resolving\n            // the response promise. This ensures all your logic finishes\n            // before the interceptor resolves the pending response.\n            await emitAsync(this.emitter, 'response', {\n              // Clone the mocked response for the \"response\" event listener.\n              // This way, the listener can read the response and not lock its body\n              // for the actual fetch consumer.\n              response: response.clone(),\n              isMockedResponse: true,\n              request,\n              requestId,\n            })\n          }\n\n          responsePromise.resolve(response)\n        },\n        onRequestError: (response) => {\n          this.logger.info('request has errored!', { response })\n          responsePromise.reject(createNetworkError(response))\n        },\n        onError: (error) => {\n          this.logger.info('request has been aborted!', { error })\n          responsePromise.reject(error)\n        },\n      })\n\n      if (isRequestHandled) {\n        this.logger.info('request has been handled, returning mock promise...')\n        return responsePromise\n      }\n\n      this.logger.info(\n        'no mocked response received, performing request as-is...'\n      )\n\n      return pureFetch(request).then(async (response) => {\n        this.logger.info('original fetch performed', response)\n\n        if (this.emitter.listenerCount('response') > 0) {\n          this.logger.info('emitting the \"response\" event...')\n\n          const responseClone = response.clone()\n\n          await emitAsync(this.emitter, 'response', {\n            response: responseClone,\n            isMockedResponse: false,\n            request,\n            requestId,\n          })\n        }\n\n        return response\n      })\n    }\n\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.fetch = pureFetch\n\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      )\n    })\n  }\n}\n","/**\n * Returns a boolean indicating whether the given URL string\n * can be parsed into a `URL` instance.\n * A substitute for `URL.canParse()` for Node.js 18.\n */\nexport function canParseUrl(url: string): boolean {\n  try {\n    new URL(url)\n    return true\n  } catch (_error) {\n    return false\n  }\n}\n","export function createNetworkError(cause?: unknown) {\n  return Object.assign(new TypeError('Failed to fetch'), {\n    cause,\n  })\n}\n","import { createNetworkError } from './createNetworkError'\n\nconst REQUEST_BODY_HEADERS = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  'content-length',\n]\n\nconst kRedirectCount = Symbol('kRedirectCount')\n\n/**\n * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/index.js#L1210\n */\nexport async function followFetchRedirect(\n  request: Request,\n  response: Response\n): Promise<Response> {\n  if (response.status !== 303 && request.body != null) {\n    return Promise.reject(createNetworkError())\n  }\n\n  const requestUrl = new URL(request.url)\n\n  let locationUrl: URL\n  try {\n    // If the location is a relative URL, use the request URL as the base URL.\n    locationUrl = new URL(response.headers.get('location')!, request.url) \n  } catch (error) {\n    return Promise.reject(createNetworkError(error))\n  }\n\n  if (\n    !(locationUrl.protocol === 'http:' || locationUrl.protocol === 'https:')\n  ) {\n    return Promise.reject(\n      createNetworkError('URL scheme must be a HTTP(S) scheme')\n    )\n  }\n\n  if (Reflect.get(request, kRedirectCount) > 20) {\n    return Promise.reject(createNetworkError('redirect count exceeded'))\n  }\n\n  Object.defineProperty(request, kRedirectCount, {\n    value: (Reflect.get(request, kRedirectCount) || 0) + 1,\n  })\n\n  if (\n    request.mode === 'cors' &&\n    (locationUrl.username || locationUrl.password) &&\n    !sameOrigin(requestUrl, locationUrl)\n  ) {\n    return Promise.reject(\n      createNetworkError('cross origin not allowed for request mode \"cors\"')\n    )\n  }\n\n  const requestInit: RequestInit = {}\n\n  if (\n    ([301, 302].includes(response.status) && request.method === 'POST') ||\n    (response.status === 303 && !['HEAD', 'GET'].includes(request.method))\n  ) {\n    requestInit.method = 'GET'\n    requestInit.body = null\n\n    REQUEST_BODY_HEADERS.forEach((headerName) => {\n      request.headers.delete(headerName)\n    })\n  }\n\n  if (!sameOrigin(requestUrl, locationUrl)) {\n    request.headers.delete('authorization')\n    request.headers.delete('proxy-authorization')\n    request.headers.delete('cookie')\n    request.headers.delete('host')\n  }\n\n  /**\n   * @note Undici \"safely\" extracts the request body.\n   * I suspect we cannot dispatch this request again\n   * since its body has been read and the stream is locked.\n   */\n\n  requestInit.headers = request.headers\n  return fetch(new Request(locationUrl, requestInit))\n}\n\n/**\n * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/util.js#L761\n */\nfunction sameOrigin(left: URL, right: URL): boolean {\n  if (left.origin === right.origin && left.origin === 'null') {\n    return true\n  }\n\n  if (\n    left.protocol === right.protocol &&\n    left.hostname === right.hostname &&\n    left.port === right.port\n  ) {\n    return true\n  }\n\n  return false\n}\n","export class BrotliDecompressionStream extends TransformStream {\n  constructor() {\n    console.warn(\n      '[Interceptors]: Brotli decompression of response streams is not supported in the browser'\n    )\n\n    super({\n      transform(chunk, controller) {\n        // Keep the stream as passthrough, it does nothing.\n        controller.enqueue(chunk)\n      },\n    })\n  }\n}\n","// Import from an internal alias that resolves to different modules\n// depending on the environment. This way, we can keep the fetch interceptor\n// intact while using different strategies for Brotli decompression.\nimport { BrotliDecompressionStream } from 'internal:brotli-decompress'\n\nclass PipelineStream extends TransformStream {\n  constructor(\n    transformStreams: Array<TransformStream>,\n    ...strategies: Array<QueuingStrategy>\n  ) {\n    super({}, ...strategies)\n\n    const readable = [super.readable as any, ...transformStreams].reduce(\n      (readable, transform) => readable.pipeThrough(transform)\n    )\n\n    Object.defineProperty(this, 'readable', {\n      get() {\n        return readable\n      },\n    })\n  }\n}\n\nexport function parseContentEncoding(contentEncoding: string): Array<string> {\n  return contentEncoding\n    .toLowerCase()\n    .split(',')\n    .map((coding) => coding.trim())\n}\n\nfunction createDecompressionStream(\n  contentEncoding: string\n): TransformStream | null {\n  if (contentEncoding === '') {\n    return null\n  }\n\n  const codings = parseContentEncoding(contentEncoding)\n\n  if (codings.length === 0) {\n    return null\n  }\n\n  const transformers = codings.reduceRight<Array<TransformStream>>(\n    (transformers, coding) => {\n      if (coding === 'gzip' || coding === 'x-gzip') {\n        return transformers.concat(new DecompressionStream('gzip'))\n      } else if (coding === 'deflate') {\n        return transformers.concat(new DecompressionStream('deflate'))\n      } else if (coding === 'br') {\n        return transformers.concat(new BrotliDecompressionStream())\n      } else {\n        transformers.length = 0\n      }\n\n      return transformers\n    },\n    []\n  )\n\n  return new PipelineStream(transformers)\n}\n\nexport function decompressResponse(\n  response: Response\n): ReadableStream<any> | null {\n  if (response.body === null) {\n    return null\n  }\n\n  const decompressionStream = createDecompressionStream(\n    response.headers.get('content-encoding') || ''\n  )\n\n  if (!decompressionStream) {\n    return null\n  }\n\n  // Use `pipeTo` and return the decompression stream's readable\n  // instead of `pipeThrough` because that will lock the original\n  // response stream, making it unusable as the input to Response.\n  response.body.pipeTo(decompressionStream.writable)\n  return decompressionStream.readable\n}\n","import { invariant } from 'outvariant'\nimport { Emitter } from 'strict-event-emitter'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { createXMLHttpRequestProxy } from './XMLHttpRequestProxy'\nimport { hasConfigurableGlobal } from '../../utils/hasConfigurableGlobal'\n\nexport type XMLHttpRequestEmitter = Emitter<HttpRequestEventMap>\n\nexport class XMLHttpRequestInterceptor extends Interceptor<HttpRequestEventMap> {\n  static interceptorSymbol = Symbol('xhr')\n\n  constructor() {\n    super(XMLHttpRequestInterceptor.interceptorSymbol)\n  }\n\n  protected checkEnvironment() {\n    return hasConfigurableGlobal('XMLHttpRequest')\n  }\n\n  protected setup() {\n    const logger = this.logger.extend('setup')\n\n    logger.info('patching \"XMLHttpRequest\" module...')\n\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest\n\n    invariant(\n      !(PureXMLHttpRequest as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    )\n\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger,\n    })\n\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    )\n\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.XMLHttpRequest = PureXMLHttpRequest\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      )\n    })\n  }\n}\n","import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport type { Logger } from '@open-draft/logger'\nimport { concatArrayBuffer } from './utils/concatArrayBuffer'\nimport { createEvent } from './utils/createEvent'\nimport {\n  decodeBuffer,\n  encodeBuffer,\n  toArrayBuffer,\n} from '../../utils/bufferUtils'\nimport { createProxy } from '../../utils/createProxy'\nimport { isDomParserSupportedType } from './utils/isDomParserSupportedType'\nimport { parseJson } from '../../utils/parseJson'\nimport { createResponse } from './utils/createResponse'\nimport { INTERNAL_REQUEST_ID_HEADER_NAME } from '../../Interceptor'\nimport { createRequestId } from '../../createRequestId'\nimport { getBodyByteLength } from './utils/getBodyByteLength'\n\nconst kIsRequestHandled = Symbol('kIsRequestHandled')\nconst IS_NODE = isNodeProcess()\nconst kFetchRequest = Symbol('kFetchRequest')\n\n/**\n * An `XMLHttpRequest` instance controller that allows us\n * to handle any given request instance (e.g. responding to it).\n */\nexport class XMLHttpRequestController {\n  public request: XMLHttpRequest\n  public requestId: string\n  public onRequest?: (\n    this: XMLHttpRequestController,\n    args: {\n      request: Request\n      requestId: string\n    }\n  ) => Promise<void>\n  public onResponse?: (\n    this: XMLHttpRequestController,\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ) => void;\n\n  [kIsRequestHandled]: boolean;\n  [kFetchRequest]?: Request\n  private method: string = 'GET'\n  private url: URL = null as any\n  private requestHeaders: Headers\n  private responseBuffer: Uint8Array\n  private events: Map<keyof XMLHttpRequestEventTargetEventMap, Array<Function>>\n  private uploadEvents: Map<\n    keyof XMLHttpRequestEventTargetEventMap,\n    Array<Function>\n  >\n\n  constructor(readonly initialRequest: XMLHttpRequest, public logger: Logger) {\n    this[kIsRequestHandled] = false\n\n    this.events = new Map()\n    this.uploadEvents = new Map()\n    this.requestId = createRequestId()\n    this.requestHeaders = new Headers()\n    this.responseBuffer = new Uint8Array()\n\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case 'ontimeout': {\n            const eventName = propertyName.slice(\n              2\n            ) as keyof XMLHttpRequestEventTargetEventMap\n\n            /**\n             * @note Proxy callbacks to event listeners because JSDOM has trouble\n             * translating these properties to callbacks. It seemed to be operating\n             * on events exclusively.\n             */\n            this.request.addEventListener(eventName, nextValue as any)\n\n            return invoke()\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case 'open': {\n            const [method, url] = args as [string, string | undefined]\n\n            if (typeof url === 'undefined') {\n              this.method = 'GET'\n              this.url = toAbsoluteUrl(method)\n            } else {\n              this.method = method\n              this.url = toAbsoluteUrl(url)\n            }\n\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`)\n            this.logger.info('open', this.method, this.url.href)\n\n            return invoke()\n          }\n\n          case 'addEventListener': {\n            const [eventName, listener] = args as [\n              keyof XMLHttpRequestEventTargetEventMap,\n              Function\n            ]\n\n            this.registerEvent(eventName, listener)\n            this.logger.info('addEventListener', eventName, listener)\n\n            return invoke()\n          }\n\n          case 'setRequestHeader': {\n            const [name, value] = args as [string, string]\n            this.requestHeaders.set(name, value)\n\n            this.logger.info('setRequestHeader', name, value)\n\n            return invoke()\n          }\n\n          case 'send': {\n            const [body] = args as [\n              body?: XMLHttpRequestBodyInit | Document | null\n            ]\n\n            this.request.addEventListener('load', () => {\n              if (typeof this.onResponse !== 'undefined') {\n                // Create a Fetch API Response representation of whichever\n                // response this XMLHttpRequest received. Note those may\n                // be either a mocked and the original response.\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                )\n\n                // Notify the consumer about the response.\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: this[kIsRequestHandled],\n                  request: fetchRequest,\n                  requestId: this.requestId!,\n                })\n              }\n            })\n\n            const requestBody =\n              typeof body === 'string' ? encodeBuffer(body) : body\n\n            // Delegate request handling to the consumer.\n            const fetchRequest = this.toFetchApiRequest(requestBody)\n            this[kFetchRequest] = fetchRequest.clone()\n\n            const onceRequestSettled =\n              this.onRequest?.call(this, {\n                request: fetchRequest,\n                requestId: this.requestId!,\n              }) || Promise.resolve()\n\n            onceRequestSettled.finally(() => {\n              // If the consumer didn't handle the request (called `.respondWith()`) perform it as-is.\n              if (!this[kIsRequestHandled]) {\n                this.logger.info(\n                  'request callback settled but request has not been handled (readystate %d), performing as-is...',\n                  this.request.readyState\n                )\n\n                /**\n                 * @note Set the intercepted request ID on the original request in Node.js\n                 * so that if it triggers any other interceptors, they don't attempt\n                 * to process it once again.\n                 *\n                 * For instance, XMLHttpRequest is often implemented via \"http.ClientRequest\"\n                 * and we don't want for both XHR and ClientRequest interceptors to\n                 * handle the same request at the same time (e.g. emit the \"response\" event twice).\n                 */\n                if (IS_NODE) {\n                  this.request.setRequestHeader(\n                    INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId!\n                  )\n                }\n\n                return invoke()\n              }\n            })\n\n            break\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n    })\n\n    /**\n     * Proxy the `.upload` property to gather the event listeners/callbacks.\n     */\n    define(\n      this.request,\n      'upload',\n      createProxy(this.request.upload, {\n        setProperty: ([propertyName, nextValue], invoke) => {\n          switch (propertyName) {\n            case 'onloadstart':\n            case 'onprogress':\n            case 'onaboart':\n            case 'onerror':\n            case 'onload':\n            case 'ontimeout':\n            case 'onloadend': {\n              const eventName = propertyName.slice(\n                2\n              ) as keyof XMLHttpRequestEventTargetEventMap\n\n              this.registerUploadEvent(eventName, nextValue as Function)\n            }\n          }\n\n          return invoke()\n        },\n        methodCall: ([methodName, args], invoke) => {\n          switch (methodName) {\n            case 'addEventListener': {\n              const [eventName, listener] = args as [\n                keyof XMLHttpRequestEventTargetEventMap,\n                Function\n              ]\n              this.registerUploadEvent(eventName, listener)\n              this.logger.info('upload.addEventListener', eventName, listener)\n\n              return invoke()\n            }\n          }\n        },\n      })\n    )\n  }\n\n  private registerEvent(\n    eventName: keyof XMLHttpRequestEventTargetEventMap,\n    listener: Function\n  ): void {\n    const prevEvents = this.events.get(eventName) || []\n    const nextEvents = prevEvents.concat(listener)\n    this.events.set(eventName, nextEvents)\n\n    this.logger.info('registered event \"%s\"', eventName, listener)\n  }\n\n  private registerUploadEvent(\n    eventName: keyof XMLHttpRequestEventTargetEventMap,\n    listener: Function\n  ): void {\n    const prevEvents = this.uploadEvents.get(eventName) || []\n    const nextEvents = prevEvents.concat(listener)\n    this.uploadEvents.set(eventName, nextEvents)\n\n    this.logger.info('registered upload event \"%s\"', eventName, listener)\n  }\n\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  public async respondWith(response: Response): Promise<void> {\n    /**\n     * @note Since `XMLHttpRequestController` delegates the handling of the responses\n     * to the \"load\" event listener that doesn't distinguish between the mocked and original\n     * responses, mark the request that had a mocked response with a corresponding symbol.\n     *\n     * Mark this request as having a mocked response immediately since\n     * calculating request/response total body length is asynchronous.\n     */\n    this[kIsRequestHandled] = true\n\n    /**\n     * Dispatch request upload events for requests with a body.\n     * @see https://github.com/mswjs/interceptors/issues/573\n     */\n    if (this[kFetchRequest]) {\n      const totalRequestBodyLength = await getBodyByteLength(\n        this[kFetchRequest]\n      )\n\n      this.trigger('loadstart', this.request.upload, {\n        loaded: 0,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('progress', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('load', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('loadend', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n    }\n\n    this.logger.info(\n      'responding with a mocked response: %d %s',\n      response.status,\n      response.statusText\n    )\n\n    define(this.request, 'status', response.status)\n    define(this.request, 'statusText', response.statusText)\n    define(this.request, 'responseURL', this.url.href)\n\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args: [name: string]) => {\n        this.logger.info('getResponseHeader', args[0])\n\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info('headers not received yet, returning null')\n\n          // Headers not received yet, nothing to return.\n          return null\n        }\n\n        const headerValue = response.headers.get(args[0])\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        )\n\n        return headerValue\n      },\n    })\n\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info('getAllResponseHeaders')\n\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info('headers not received yet, returning empty string')\n\n            // Headers not received yet, nothing to return.\n            return ''\n          }\n\n          const headersList = Array.from(response.headers.entries())\n          const allHeaders = headersList\n            .map(([headerName, headerValue]) => {\n              return `${headerName}: ${headerValue}`\n            })\n            .join('\\r\\n')\n\n          this.logger.info('resolved all response headers to', allHeaders)\n\n          return allHeaders\n        },\n      }\n    )\n\n    // Update the response getters to resolve against the mocked response.\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response,\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText,\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML,\n      },\n    })\n\n    const totalResponseBodyLength = await getBodyByteLength(response.clone())\n\n    this.logger.info('calculated response body length', totalResponseBodyLength)\n\n    this.trigger('loadstart', this.request, {\n      loaded: 0,\n      total: totalResponseBodyLength,\n    })\n\n    this.setReadyState(this.request.HEADERS_RECEIVED)\n    this.setReadyState(this.request.LOADING)\n\n    const finalizeResponse = () => {\n      this.logger.info('finalizing the mocked response...')\n\n      this.setReadyState(this.request.DONE)\n\n      this.trigger('load', this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n\n      this.trigger('loadend', this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n    }\n\n    if (response.body) {\n      this.logger.info('mocked response has body, streaming...')\n\n      const reader = response.body.getReader()\n\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read()\n\n        if (done) {\n          this.logger.info('response body stream done!')\n          finalizeResponse()\n          return\n        }\n\n        if (value) {\n          this.logger.info('read response body chunk:', value)\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value)\n\n          this.trigger('progress', this.request, {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength,\n          })\n        }\n\n        readNextResponseBodyChunk()\n      }\n\n      readNextResponseBodyChunk()\n    } else {\n      finalizeResponse()\n    }\n  }\n\n  private responseBufferToText(): string {\n    return decodeBuffer(this.responseBuffer)\n  }\n\n  get response(): unknown {\n    this.logger.info(\n      'getResponse (responseType: %s)',\n      this.request.responseType\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    switch (this.request.responseType) {\n      case 'json': {\n        const responseJson = parseJson(this.responseBufferToText())\n        this.logger.info('resolved response JSON', responseJson)\n\n        return responseJson\n      }\n\n      case 'arraybuffer': {\n        const arrayBuffer = toArrayBuffer(this.responseBuffer)\n        this.logger.info('resolved response ArrayBuffer', arrayBuffer)\n\n        return arrayBuffer\n      }\n\n      case 'blob': {\n        const mimeType =\n          this.request.getResponseHeader('Content-Type') || 'text/plain'\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType,\n        })\n\n        this.logger.info(\n          'resolved response Blob (mime type: %s)',\n          responseBlob,\n          mimeType\n        )\n\n        return responseBlob\n      }\n\n      default: {\n        const responseText = this.responseBufferToText()\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        )\n\n        return responseText\n      }\n    }\n  }\n\n  get responseText(): string {\n    /**\n     * Throw when trying to read the response body as text when the\n     * \"responseType\" doesn't expect text. This just respects the spec better.\n     * @see https://xhr.spec.whatwg.org/#the-responsetext-attribute\n     */\n    invariant(\n      this.request.responseType === '' || this.request.responseType === 'text',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (\n      this.request.readyState !== this.request.LOADING &&\n      this.request.readyState !== this.request.DONE\n    ) {\n      return ''\n    }\n\n    const responseText = this.responseBufferToText()\n    this.logger.info('getResponseText: \"%s\"', responseText)\n\n    return responseText\n  }\n\n  get responseXML(): Document | null {\n    invariant(\n      this.request.responseType === '' ||\n        this.request.responseType === 'document',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    const contentType = this.request.getResponseHeader('Content-Type') || ''\n\n    if (typeof DOMParser === 'undefined') {\n      console.warn(\n        'Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.'\n      )\n      return null\n    }\n\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      )\n    }\n\n    return null\n  }\n\n  public errorWith(error?: Error): void {\n    /**\n     * @note Mark this request as handled even if it received a mock error.\n     * This prevents the controller from trying to perform this request as-is.\n     */\n    this[kIsRequestHandled] = true\n    this.logger.info('responding with an error')\n\n    this.setReadyState(this.request.DONE)\n    this.trigger('error', this.request)\n    this.trigger('loadend', this.request)\n  }\n\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  private setReadyState(nextReadyState: number): void {\n    this.logger.info(\n      'setReadyState: %d -> %d',\n      this.request.readyState,\n      nextReadyState\n    )\n\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info('ready state identical, skipping transition...')\n      return\n    }\n\n    define(this.request, 'readyState', nextReadyState)\n\n    this.logger.info('set readyState to: %d', nextReadyState)\n\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...')\n\n      this.trigger('readystatechange', this.request)\n    }\n  }\n\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  private trigger<\n    EventName extends keyof (XMLHttpRequestEventTargetEventMap & {\n      readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n    })\n  >(\n    eventName: EventName,\n    target: XMLHttpRequest | XMLHttpRequestUpload,\n    options?: ProgressEventInit\n  ): void {\n    const callback = (target as XMLHttpRequest)[`on${eventName}`]\n    const event = createEvent(target, eventName, options)\n\n    this.logger.info('trigger \"%s\"', eventName, options || '')\n\n    // Invoke direct callbacks.\n    if (typeof callback === 'function') {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName)\n      callback.call(target as XMLHttpRequest, event)\n    }\n\n    // Invoke event listeners.\n    const events =\n      target instanceof XMLHttpRequestUpload ? this.uploadEvents : this.events\n\n    for (const [registeredEventName, listeners] of events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        )\n\n        listeners.forEach((listener) => listener.call(target, event))\n      }\n    }\n  }\n\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  private toFetchApiRequest(\n    body: XMLHttpRequestBodyInit | Document | null | undefined\n  ): Request {\n    this.logger.info('converting request to a Fetch API Request...')\n\n    // If the `Document` is used as the body of this XMLHttpRequest,\n    // set its inner text as the Fetch API Request body.\n    const resolvedBody =\n      body instanceof Document ? body.documentElement.innerText : body\n\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? 'include' : 'same-origin',\n      body: ['GET', 'HEAD'].includes(this.method.toUpperCase())\n        ? null\n        : resolvedBody,\n    })\n\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        // Forward the latest state of the internal request headers\n        // because the interceptor might have modified them\n        // without responding to the request.\n        switch (methodName) {\n          case 'append':\n          case 'set': {\n            const [headerName, headerValue] = args as [string, string]\n            this.request.setRequestHeader(headerName, headerValue)\n            break\n          }\n\n          case 'delete': {\n            const [headerName] = args as [string]\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            )\n            break\n          }\n        }\n\n        return invoke()\n      },\n    })\n    define(fetchRequest, 'headers', proxyHeaders)\n\n    this.logger.info('converted request to a Fetch API Request!', fetchRequest)\n\n    return fetchRequest\n  }\n}\n\nfunction toAbsoluteUrl(url: string | URL): URL {\n  /**\n   * @note XMLHttpRequest interceptor may run in environments\n   * that implement XMLHttpRequest but don't implement \"location\"\n   * (for example, React Native). If that's the case, return the\n   * input URL as-is (nothing to be relative to).\n   * @see https://github.com/mswjs/msw/issues/1777\n   */\n  if (typeof location === 'undefined') {\n    return new URL(url)\n  }\n\n  return new URL(url.toString(), location.href)\n}\n\nfunction define(\n  target: object,\n  property: string | symbol,\n  value: unknown\n): void {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value,\n  })\n}\n","/**\n * Concatenate two `Uint8Array` buffers.\n */\nexport function concatArrayBuffer(\n  left: Uint8Array,\n  right: Uint8Array\n): Uint8Array {\n  const result = new Uint8Array(left.byteLength + right.byteLength)\n  result.set(left, 0)\n  result.set(right, left.byteLength)\n  return result\n}\n","export class EventPolyfill implements Event {\n  readonly NONE = 0\n  readonly CAPTURING_PHASE = 1\n  readonly AT_TARGET = 2\n  readonly BUBBLING_PHASE = 3\n\n  public type: string = ''\n  public srcElement: EventTarget | null = null\n  public target: EventTarget | null\n  public currentTarget: EventTarget | null = null\n  public eventPhase: number = 0\n  public timeStamp: number\n  public isTrusted: boolean = true\n  public composed: boolean = false\n  public cancelable: boolean = true\n  public defaultPrevented: boolean = false\n  public bubbles: boolean = true\n  public lengthComputable: boolean = true\n  public loaded: number = 0\n  public total: number = 0\n\n  cancelBubble: boolean = false\n  returnValue: boolean = true\n\n  constructor(\n    type: string,\n    options?: { target: EventTarget; currentTarget: EventTarget }\n  ) {\n    this.type = type\n    this.target = options?.target || null\n    this.currentTarget = options?.currentTarget || null\n    this.timeStamp = Date.now()\n  }\n\n  public composedPath(): EventTarget[] {\n    return []\n  }\n\n  public initEvent(type: string, bubbles?: boolean, cancelable?: boolean) {\n    this.type = type\n    this.bubbles = !!bubbles\n    this.cancelable = !!cancelable\n  }\n\n  public preventDefault() {\n    this.defaultPrevented = true\n  }\n\n  public stopPropagation() {}\n  public stopImmediatePropagation() {}\n}\n","import { EventPolyfill } from './EventPolyfill'\n\nexport class ProgressEventPolyfill extends EventPolyfill {\n  readonly lengthComputable: boolean\n  readonly composed: boolean\n  readonly loaded: number\n  readonly total: number\n\n  constructor(type: string, init?: ProgressEventInit) {\n    super(type)\n\n    this.lengthComputable = init?.lengthComputable || false\n    this.composed = init?.composed || false\n    this.loaded = init?.loaded || 0\n    this.total = init?.total || 0\n  }\n}\n","import { EventPolyfill } from '../polyfills/EventPolyfill'\nimport { ProgressEventPolyfill } from '../polyfills/ProgressEventPolyfill'\n\nconst SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== 'undefined'\n\nexport function createEvent(\n  target: XMLHttpRequest | XMLHttpRequestUpload,\n  type: string,\n  init?: ProgressEventInit\n): EventPolyfill {\n  const progressEvents = [\n    'error',\n    'progress',\n    'loadstart',\n    'loadend',\n    'load',\n    'timeout',\n    'abort',\n  ]\n\n  /**\n   * `ProgressEvent` is not supported in React Native.\n   * @see https://github.com/mswjs/interceptors/issues/40\n   */\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT\n    ? ProgressEvent\n    : ProgressEventPolyfill\n\n  const event = progressEvents.includes(type)\n    ? new ProgressEventClass(type, {\n        lengthComputable: true,\n        loaded: init?.loaded || 0,\n        total: init?.total || 0,\n      })\n    : new EventPolyfill(type, {\n        target,\n        currentTarget: target,\n      })\n\n  return event\n}\n","/**\n * Returns the source object of the given property on the target object\n * (the target itself, any parent in its prototype, or null).\n */\nexport function findPropertySource(\n  target: object,\n  propertyName: string | symbol\n): object | null {\n  if (!(propertyName in target)) {\n    return null\n  }\n\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName)\n  if (hasProperty) {\n    return target\n  }\n\n  const prototype = Reflect.getPrototypeOf(target)\n  return prototype ? findPropertySource(prototype, propertyName) : null\n}\n","import { findPropertySource } from './findPropertySource'\n\nexport interface ProxyOptions<Target extends Record<string, any>> {\n  constructorCall?(args: Array<unknown>, next: NextFunction<Target>): Target\n\n  methodCall?<F extends keyof Target>(\n    this: Target,\n    data: [methodName: F, args: Array<unknown>],\n    next: NextFunction<void>\n  ): void\n\n  setProperty?(\n    data: [propertyName: string | symbol, nextValue: unknown],\n    next: NextFunction<boolean>\n  ): boolean\n\n  getProperty?(\n    data: [propertyName: string | symbol, receiver: Target],\n    next: NextFunction<void>\n  ): void\n}\n\nexport type NextFunction<ReturnType> = () => ReturnType\n\nexport function createProxy<Target extends object>(\n  target: Target,\n  options: ProxyOptions<Target>\n): Target {\n  const proxy = new Proxy(target, optionsToProxyHandler(options))\n\n  return proxy\n}\n\nfunction optionsToProxyHandler<T extends Record<string, any>>(\n  options: ProxyOptions<T>\n): ProxyHandler<T> {\n  const { constructorCall, methodCall, getProperty, setProperty } = options\n  const handler: ProxyHandler<T> = {}\n\n  if (typeof constructorCall !== 'undefined') {\n    handler.construct = function (target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target as any, args, newTarget)\n      return constructorCall.call(newTarget, args, next)\n    }\n  }\n\n  handler.set = function (target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      )\n\n      // Respect any custom setters present for this property.\n      if (typeof ownDescriptors?.set !== 'undefined') {\n        ownDescriptors.set.apply(target, [nextValue])\n        return true\n      }\n\n      // Otherwise, set the property on the source.\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue,\n      })\n    }\n\n    if (typeof setProperty !== 'undefined') {\n      return setProperty.call(target, [propertyName, nextValue], next)\n    }\n\n    return next()\n  }\n\n  handler.get = function (target, propertyName, receiver) {\n    /**\n     * @note Using `Reflect.get()` here causes \"TypeError: Illegal invocation\".\n     */\n    const next = () => target[propertyName as any]\n\n    const value =\n      typeof getProperty !== 'undefined'\n        ? getProperty.call(target, [propertyName, receiver], next)\n        : next()\n\n    if (typeof value === 'function') {\n      return (...args: Array<any>) => {\n        const next = value.bind(target, ...args)\n\n        if (typeof methodCall !== 'undefined') {\n          return methodCall.call(target, [propertyName as any, args], next)\n        }\n\n        return next()\n      }\n    }\n\n    return value\n  }\n\n  return handler\n}\n","export function isDomParserSupportedType(\n  type: string\n): type is DOMParserSupportedType {\n  const supportedTypes: Array<DOMParserSupportedType> = [\n    'application/xhtml+xml',\n    'application/xml',\n    'image/svg+xml',\n    'text/html',\n    'text/xml',\n  ]\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType)\n  })\n}\n","/**\n * Parses a given string into JSON.\n * Gracefully handles invalid JSON by returning `null`.\n */\nexport function parseJson(data: string): Record<string, unknown> | null {\n  try {\n    const json = JSON.parse(data)\n    return json\n  } catch (_) {\n    return null\n  }\n}\n","import { FetchResponse } from '../../../utils/fetchUtils'\n\n/**\n * Creates a Fetch API `Response` instance from the given\n * `XMLHttpRequest` instance and a response body.\n */\nexport function createResponse(\n  request: XMLHttpRequest,\n  body: BodyInit | null\n): Response {\n  /**\n   * Handle XMLHttpRequest responses that must have null as the\n   * response body when represented using Fetch API Response.\n   * XMLHttpRequest response will always have an empty string\n   * as the \"request.response\" in those cases, resulting in an error\n   * when constructing a Response instance.\n   * @see https://github.com/mswjs/interceptors/issues/379\n   */\n  const responseBodyOrNull = FetchResponse.isResponseWithBody(request.status)\n    ? body\n    : null\n\n  return new FetchResponse(responseBodyOrNull, {\n    url: request.responseURL,\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(\n      request.getAllResponseHeaders()\n    ),\n  })\n}\n\nfunction createHeadersFromXMLHttpReqestHeaders(headersString: string): Headers {\n  const headers = new Headers()\n\n  const lines = headersString.split(/[\\r\\n]+/)\n  for (const line of lines) {\n    if (line.trim() === '') {\n      continue\n    }\n\n    const [name, ...parts] = line.split(': ')\n    const value = parts.join(': ')\n\n    headers.append(name, value)\n  }\n\n  return headers\n}\n","/**\n * Return a total byte length of the given request/response body.\n * If the `Content-Length` header is present, it will be used as the byte length.\n */\nexport async function getBodyByteLength(\n  input: Request | Response\n): Promise<number> {\n  const explicitContentLength = input.headers.get('content-length')\n\n  if (explicitContentLength != null && explicitContentLength !== '') {\n    return Number(explicitContentLength)\n  }\n\n  const buffer = await input.arrayBuffer()\n  return buffer.byteLength\n}\n","import type { Logger } from '@open-draft/logger'\nimport { XMLHttpRequestEmitter } from '.'\nimport { RequestController } from '../../RequestController'\nimport { XMLHttpRequestController } from './XMLHttpRequestController'\nimport { handleRequest } from '../../utils/handleRequest'\n\nexport interface XMLHttpRequestProxyOptions {\n  emitter: XMLHttpRequestEmitter\n  logger: Logger\n}\n\n/**\n * Create a proxied `XMLHttpRequest` class.\n * The proxied class establishes spies on certain methods,\n * allowing us to intercept requests and respond to them.\n */\nexport function createXMLHttpRequestProxy({\n  emitter,\n  logger,\n}: XMLHttpRequestProxyOptions) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info('constructed new XMLHttpRequest')\n\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      ) as XMLHttpRequest\n\n      /**\n       * @note Forward prototype descriptors onto the proxied object.\n       * XMLHttpRequest is implemented in JSDOM in a way that assigns\n       * a bunch of descriptors, like \"set responseType()\" on the prototype.\n       * With this propagation, we make sure that those descriptors trigger\n       * when the user operates with the proxied request instance.\n       */\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      )\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        )\n      }\n\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      )\n\n      xhrRequestController.onRequest = async function ({ request, requestId }) {\n        const controller = new RequestController(request)\n\n        this.logger.info('awaiting mocked response...')\n\n        this.logger.info(\n          'emitting the \"request\" event for %s listener(s)...',\n          emitter.listenerCount('request')\n        )\n\n        const isRequestHandled = await handleRequest({\n          request,\n          requestId,\n          controller,\n          emitter,\n          onResponse: async (response) => {\n            await this.respondWith(response)\n          },\n          onRequestError: () => {\n            this.errorWith(new TypeError('Network error'))\n          },\n          onError: (error) => {\n            this.logger.info('request errored!', { error })\n\n            if (error instanceof Error) {\n              this.errorWith(error)\n            }\n          },\n        })\n\n        if (!isRequestHandled) {\n          this.logger.info(\n            'no mocked response received, performing request as-is...'\n          )\n        }\n      }\n\n      xhrRequestController.onResponse = async function ({\n        response,\n        isMockedResponse,\n        request,\n        requestId,\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount('response')\n        )\n\n        emitter.emit('response', {\n          response,\n          isMockedResponse,\n          request,\n          requestId,\n        })\n      }\n\n      // Return the proxied request from the controller\n      // so that the controller can react to the consumer's interactions\n      // with this request (opening/sending/etc).\n      return xhrRequestController.request\n    },\n  })\n\n  return XMLHttpRequestProxy\n}\n","import {\n  Interceptor,\n  BatchInterceptor,\n  HttpRequestEventMap,\n} from '@mswjs/interceptors'\nimport { FetchInterceptor } from '@mswjs/interceptors/fetch'\nimport { XMLHttpRequestInterceptor } from '@mswjs/interceptors/XMLHttpRequest'\nimport { SetupWorkerInternalContext, StartOptions } from '../glossary'\nimport type { RequiredDeep } from '~/core/typeUtils'\nimport { handleRequest } from '~/core/utils/handleRequest'\nimport { isHandlerKind } from '~/core/utils/internal/isHandlerKind'\n\nexport function createFallbackRequestListener(\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n): Interceptor<HttpRequestEventMap> {\n  const interceptor = new BatchInterceptor({\n    name: 'fallback',\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()],\n  })\n\n  interceptor.on('request', async ({ request, requestId, controller }) => {\n    const requestCloneForLogs = request.clone()\n\n    const response = await handleRequest(\n      request,\n      requestId,\n      context.getRequestHandlers().filter(isHandlerKind('RequestHandler')),\n      options,\n      context.emitter,\n      {\n        onMockedResponse(_, { handler, parsedResult }) {\n          if (!options.quiet) {\n            context.emitter.once('response:mocked', ({ response }) => {\n              handler.log({\n                request: requestCloneForLogs,\n                response,\n                parsedResult,\n              })\n            })\n          }\n        },\n      },\n    )\n\n    if (response) {\n      controller.respondWith(response)\n    }\n  })\n\n  interceptor.on(\n    'response',\n    ({ response, isMockedResponse, request, requestId }) => {\n      context.emitter.emit(\n        isMockedResponse ? 'response:mocked' : 'response:bypass',\n        {\n          response,\n          request,\n          requestId,\n        },\n      )\n    },\n  )\n\n  interceptor.apply()\n\n  return interceptor\n}\n","import { createFallbackRequestListener } from './createFallbackRequestListener'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { printStartMessage } from './utils/printStartMessage'\n\nexport function createFallbackStart(\n  context: SetupWorkerInternalContext,\n): StartHandler {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(\n      context,\n      options,\n    )\n\n    printStartMessage({\n      message: 'Mocking enabled (fallback mode).',\n      quiet: options.quiet,\n    })\n\n    return undefined\n  }\n}\n","import { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport function createFallbackStop(\n  context: SetupWorkerInternalContext,\n): StopHandler {\n  return function stop() {\n    context.fallbackInterceptor?.dispose()\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n","import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport {\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n  StartReturnType,\n  StopHandler,\n  StartHandler,\n  StartOptions,\n} from './glossary'\nimport { createStartHandler } from './start/createStartHandler'\nimport { createStop } from './stop/createStop'\nimport { ServiceWorkerMessage } from './start/utils/createMessageChannel'\nimport { RequestHandler } from '~/core/handlers/RequestHandler'\nimport { DEFAULT_START_OPTIONS } from './start/utils/prepareStartHandler'\nimport { createFallbackStart } from './start/createFallbackStart'\nimport { createFallbackStop } from './stop/createFallbackStop'\nimport { devUtils } from '~/core/utils/internal/devUtils'\nimport { SetupApi } from '~/core/SetupApi'\nimport { mergeRight } from '~/core/utils/internal/mergeRight'\nimport type { LifeCycleEventsMap } from '~/core/sharedOptions'\nimport type { WebSocketHandler } from '~/core/handlers/WebSocketHandler'\nimport { SetupWorker } from './glossary'\nimport { supportsReadableStreamTransfer } from '../utils/supportsReadableStreamTransfer'\nimport { webSocketInterceptor } from '~/core/ws/webSocketInterceptor'\nimport { handleWebSocketEvent } from '~/core/ws/handleWebSocketEvent'\nimport { attachWebSocketLogger } from '~/core/ws/utils/attachWebSocketLogger'\n\ninterface Listener {\n  target: EventTarget\n  eventType: string\n  callback: EventListenerOrEventListenerObject\n}\n\nexport class SetupWorkerApi\n  extends SetupApi<LifeCycleEventsMap>\n  implements SetupWorker\n{\n  private context: SetupWorkerInternalContext\n  private startHandler: StartHandler = null as any\n  private stopHandler: StopHandler = null as any\n  private listeners: Array<Listener>\n\n  constructor(...handlers: Array<RequestHandler | WebSocketHandler>) {\n    super(...handlers)\n\n    invariant(\n      !isNodeProcess(),\n      devUtils.formatMessage(\n        'Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.',\n      ),\n    )\n\n    this.listeners = []\n    this.context = this.createWorkerContext()\n  }\n\n  private createWorkerContext(): SetupWorkerInternalContext {\n    const context: SetupWorkerInternalContext = {\n      // Mocking is not considered enabled until the worker\n      // signals back the successful activation event.\n      isMockingEnabled: false,\n      startOptions: null as any,\n      worker: null,\n      getRequestHandlers: () => {\n        return this.handlersController.currentHandlers()\n      },\n      registration: null,\n      requests: new Map(),\n      emitter: this.emitter,\n      workerChannel: {\n        on: (eventType, callback) => {\n          this.context.events.addListener<\n            MessageEvent<ServiceWorkerMessage<typeof eventType, any>>\n          >(navigator.serviceWorker, 'message', (event) => {\n            // Avoid messages broadcasted from unrelated workers.\n            if (event.source !== this.context.worker) {\n              return\n            }\n\n            const message = event.data\n\n            if (!message) {\n              return\n            }\n\n            if (message.type === eventType) {\n              callback(event, message)\n            }\n          })\n        },\n        send: (type) => {\n          this.context.worker?.postMessage(type)\n        },\n      },\n      events: {\n        addListener: (target, eventType, callback) => {\n          target.addEventListener(eventType, callback as EventListener)\n          this.listeners.push({\n            eventType,\n            target,\n            callback: callback as EventListener,\n          })\n\n          return () => {\n            target.removeEventListener(eventType, callback as EventListener)\n          }\n        },\n        removeAllListeners: () => {\n          for (const { target, eventType, callback } of this.listeners) {\n            target.removeEventListener(eventType, callback)\n          }\n          this.listeners = []\n        },\n        once: (eventType) => {\n          const bindings: Array<() => void> = []\n\n          return new Promise<\n            ServiceWorkerMessage<\n              typeof eventType,\n              ServiceWorkerIncomingEventsMap[typeof eventType]\n            >\n          >((resolve, reject) => {\n            const handleIncomingMessage = (event: MessageEvent) => {\n              try {\n                const message = event.data\n\n                if (message.type === eventType) {\n                  resolve(message)\n                }\n              } catch (error) {\n                reject(error)\n              }\n            }\n\n            bindings.push(\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'message',\n                handleIncomingMessage,\n              ),\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'messageerror',\n                reject,\n              ),\n            )\n          }).finally(() => {\n            bindings.forEach((unbind) => unbind())\n          })\n        },\n      },\n      supports: {\n        serviceWorkerApi:\n          !('serviceWorker' in navigator) || location.protocol === 'file:',\n        readableStreamTransfer: supportsReadableStreamTransfer(),\n      },\n    }\n\n    this.startHandler = context.supports.serviceWorkerApi\n      ? createFallbackStart(context)\n      : createStartHandler(context)\n\n    this.stopHandler = context.supports.serviceWorkerApi\n      ? createFallbackStop(context)\n      : createStop(context)\n\n    return context\n  }\n\n  public async start(options: StartOptions = {}): StartReturnType {\n    if (options.waitUntilReady === true) {\n      devUtils.warn(\n        'The \"waitUntilReady\" option has been deprecated. Please remove it from this \"worker.start()\" call. Follow the recommended Browser integration (https://mswjs.io/docs/integrations/browser) to eliminate any race conditions between the Service Worker registration and any requests made by your application on initial render.',\n      )\n    }\n\n    this.context.startOptions = mergeRight(\n      DEFAULT_START_OPTIONS,\n      options,\n    ) as SetupWorkerInternalContext['startOptions']\n\n    // Enable the WebSocket interception.\n    handleWebSocketEvent({\n      getUnhandledRequestStrategy: () => {\n        return this.context.startOptions.onUnhandledRequest\n      },\n      getHandlers: () => {\n        return this.handlersController.currentHandlers()\n      },\n      onMockedConnection: (connection) => {\n        if (!this.context.startOptions.quiet) {\n          // Attach the logger for mocked connections since\n          // those won't be visible in the browser's devtools.\n          attachWebSocketLogger(connection)\n        }\n      },\n      onPassthroughConnection() {},\n    })\n    webSocketInterceptor.apply()\n\n    this.subscriptions.push(() => {\n      webSocketInterceptor.dispose()\n    })\n\n    return await this.startHandler(this.context.startOptions, options)\n  }\n\n  public stop(): void {\n    super.dispose()\n    this.context.events.removeAllListeners()\n    this.context.emitter.removeAllListeners()\n    this.stopHandler()\n  }\n}\n\n/**\n * Sets up a requests interception in the browser with the given request handlers.\n * @param {RequestHandler[]} handlers List of request handlers.\n *\n * @see {@link https://mswjs.io/docs/api/setup-worker `setupWorker()` API reference}\n */\nexport function setupWorker(\n  ...handlers: Array<RequestHandler | WebSocketHandler>\n): SetupWorker {\n  return new SetupWorkerApi(...handlers)\n}\n","/**\n * Returns a boolean indicating whether the current browser\n * supports `ReadableStream` as a `Transferable` when posting\n * messages.\n */\nexport function supportsReadableStreamTransfer() {\n  try {\n    const stream = new ReadableStream({\n      start: (controller) => controller.close(),\n    })\n    const message = new MessageChannel()\n    message.port1.postMessage(stream, [stream])\n    return true\n  } catch {\n    return false\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}