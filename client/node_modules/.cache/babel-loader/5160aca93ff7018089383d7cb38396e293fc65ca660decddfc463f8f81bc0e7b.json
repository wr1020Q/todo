{"ast":null,"code":"import { invariant } from \"outvariant\";\nimport { Emitter } from \"strict-event-emitter\";\nimport { devUtils } from './utils/internal/devUtils.mjs';\nimport { pipeEvents } from './utils/internal/pipeEvents.mjs';\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray.mjs';\nimport { Disposable } from './utils/internal/Disposable.mjs';\nclass HandlersController {}\nclass InMemoryHandlersController {\n  constructor(initialHandlers) {\n    this.initialHandlers = initialHandlers;\n    this.handlers = [...initialHandlers];\n  }\n  handlers;\n  prepend(runtimeHandles) {\n    this.handlers.unshift(...runtimeHandles);\n  }\n  reset(nextHandlers) {\n    this.handlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  currentHandlers() {\n    return this.handlers;\n  }\n}\nclass SetupApi extends Disposable {\n  handlersController;\n  emitter;\n  publicEmitter;\n  events;\n  constructor(...initialHandlers) {\n    super();\n    invariant(this.validateHandlers(initialHandlers), devUtils.formatMessage(`Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`));\n    this.handlersController = new InMemoryHandlersController(initialHandlers);\n    this.emitter = new Emitter();\n    this.publicEmitter = new Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners();\n      this.publicEmitter.removeAllListeners();\n    });\n  }\n  validateHandlers(handlers) {\n    return handlers.every(handler => !Array.isArray(handler));\n  }\n  use(...runtimeHandlers) {\n    invariant(this.validateHandlers(runtimeHandlers), devUtils.formatMessage(`Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`));\n    this.handlersController.prepend(runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.handlersController.currentHandlers().forEach(handler => {\n      if (\"isUsed\" in handler) {\n        handler.isUsed = false;\n      }\n    });\n  }\n  resetHandlers(...nextHandlers) {\n    this.handlersController.reset(nextHandlers);\n  }\n  listHandlers() {\n    return toReadonlyArray(this.handlersController.currentHandlers());\n  }\n  createLifeCycleEvents() {\n    return {\n      on: (...args) => {\n        return this.publicEmitter.on(...args);\n      },\n      removeListener: (...args) => {\n        return this.publicEmitter.removeListener(...args);\n      },\n      removeAllListeners: (...args) => {\n        return this.publicEmitter.removeAllListeners(...args);\n      }\n    };\n  }\n}\nexport { HandlersController, InMemoryHandlersController, SetupApi };","map":{"version":3,"names":["invariant","Emitter","devUtils","pipeEvents","toReadonlyArray","Disposable","HandlersController","InMemoryHandlersController","constructor","initialHandlers","handlers","prepend","runtimeHandles","unshift","reset","nextHandlers","length","currentHandlers","SetupApi","handlersController","emitter","publicEmitter","events","validateHandlers","formatMessage","createLifeCycleEvents","subscriptions","push","removeAllListeners","every","handler","Array","isArray","use","runtimeHandlers","restoreHandlers","forEach","isUsed","resetHandlers","listHandlers","on","args","removeListener"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\core\\SetupApi.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport { RequestHandler } from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\nimport type { WebSocketHandler } from './handlers/WebSocketHandler'\n\nexport abstract class HandlersController {\n  abstract prepend(\n    runtimeHandlers: Array<RequestHandler | WebSocketHandler>,\n  ): void\n  abstract reset(nextHandles: Array<RequestHandler | WebSocketHandler>): void\n  abstract currentHandlers(): Array<RequestHandler | WebSocketHandler>\n}\n\nexport class InMemoryHandlersController implements HandlersController {\n  private handlers: Array<RequestHandler | WebSocketHandler>\n\n  constructor(\n    private initialHandlers: Array<RequestHandler | WebSocketHandler>,\n  ) {\n    this.handlers = [...initialHandlers]\n  }\n\n  public prepend(\n    runtimeHandles: Array<RequestHandler | WebSocketHandler>,\n  ): void {\n    this.handlers.unshift(...runtimeHandles)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler | WebSocketHandler>): void {\n    this.handlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public currentHandlers(): Array<RequestHandler | WebSocketHandler> {\n    return this.handlers\n  }\n}\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected handlersController: HandlersController\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler | WebSocketHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.handlersController = new InMemoryHandlersController(initialHandlers)\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<unknown>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(\n    ...runtimeHandlers: Array<RequestHandler | WebSocketHandler>\n  ): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.handlersController.prepend(runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      if ('isUsed' in handler) {\n        handler.isUsed = false\n      }\n    })\n  }\n\n  public resetHandlers(\n    ...nextHandlers: Array<RequestHandler | WebSocketHandler>\n  ): void {\n    this.handlersController.reset(nextHandlers)\n  }\n\n  public listHandlers(): ReadonlyArray<RequestHandler | WebSocketHandler> {\n    return toReadonlyArray(this.handlersController.currentHandlers())\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAA,QAAiB;AAC1B,SAAmBC,OAAA,QAAe;AAGlC,SAASC,QAAA,QAAgB;AACzB,SAASC,UAAA,QAAkB;AAC3B,SAASC,eAAA,QAAuB;AAChC,SAASC,UAAA,QAAkB;AAGpB,MAAeC,kBAAA,CAAmB;AAQlC,MAAMC,0BAAA,CAAyD;EAGpEC,YACUC,eAAA,EACR;IADQ,KAAAA,eAAA,GAAAA,eAAA;IAER,KAAKC,QAAA,GAAW,CAAC,GAAGD,eAAe;EACrC;EANQC,QAAA;EAQDC,QACLC,cAAA,EACM;IACN,KAAKF,QAAA,CAASG,OAAA,CAAQ,GAAGD,cAAc;EACzC;EAEOE,MAAMC,YAAA,EAA8D;IACzE,KAAKL,QAAA,GACHK,YAAA,CAAaC,MAAA,GAAS,IAAI,CAAC,GAAGD,YAAY,IAAI,CAAC,GAAG,KAAKN,eAAe;EAC1E;EAEOQ,gBAAA,EAA4D;IACjE,OAAO,KAAKP,QAAA;EACd;AACF;AAKO,MAAeQ,QAAA,SAA6Cb,UAAA,CAAW;EAClEc,kBAAA;EACSC,OAAA;EACAC,aAAA;EAEHC,MAAA;EAEhBd,YAAA,GAAeC,eAAA,EAA2D;IACxE,MAAM;IAENT,SAAA,CACE,KAAKuB,gBAAA,CAAiBd,eAAe,GACrCP,QAAA,CAASsB,aAAA,CACP,6GACF,CACF;IAEA,KAAKL,kBAAA,GAAqB,IAAIZ,0BAAA,CAA2BE,eAAe;IAExE,KAAKW,OAAA,GAAU,IAAInB,OAAA,CAAmB;IACtC,KAAKoB,aAAA,GAAgB,IAAIpB,OAAA,CAAmB;IAC5CE,UAAA,CAAW,KAAKiB,OAAA,EAAS,KAAKC,aAAa;IAE3C,KAAKC,MAAA,GAAS,KAAKG,qBAAA,CAAsB;IAEzC,KAAKC,aAAA,CAAcC,IAAA,CAAK,MAAM;MAC5B,KAAKP,OAAA,CAAQQ,kBAAA,CAAmB;MAChC,KAAKP,aAAA,CAAcO,kBAAA,CAAmB;IACxC,CAAC;EACH;EAEQL,iBAAiBb,QAAA,EAA2C;IAElE,OAAOA,QAAA,CAASmB,KAAA,CAAOC,OAAA,IAAY,CAACC,KAAA,CAAMC,OAAA,CAAQF,OAAO,CAAC;EAC5D;EAEOG,IAAA,GACFC,eAAA,EACG;IACNlC,SAAA,CACE,KAAKuB,gBAAA,CAAiBW,eAAe,GACrChC,QAAA,CAASsB,aAAA,CACP,gIACF,CACF;IAEA,KAAKL,kBAAA,CAAmBR,OAAA,CAAQuB,eAAe;EACjD;EAEOC,gBAAA,EAAwB;IAC7B,KAAKhB,kBAAA,CAAmBF,eAAA,CAAgB,EAAEmB,OAAA,CAASN,OAAA,IAAY;MAC7D,IAAI,YAAYA,OAAA,EAAS;QACvBA,OAAA,CAAQO,MAAA,GAAS;MACnB;IACF,CAAC;EACH;EAEOC,cAAA,GACFvB,YAAA,EACG;IACN,KAAKI,kBAAA,CAAmBL,KAAA,CAAMC,YAAY;EAC5C;EAEOwB,aAAA,EAAiE;IACtE,OAAOnC,eAAA,CAAgB,KAAKe,kBAAA,CAAmBF,eAAA,CAAgB,CAAC;EAClE;EAEQQ,sBAAA,EAA0D;IAChE,OAAO;MACLe,EAAA,EAAIA,CAAA,GAAIC,IAAA,KAAgB;QACtB,OAAQ,KAAKpB,aAAA,CAAcmB,EAAA,CAAW,GAAGC,IAAI;MAC/C;MACAC,cAAA,EAAgBA,CAAA,GAAID,IAAA,KAAgB;QAClC,OAAQ,KAAKpB,aAAA,CAAcqB,cAAA,CAAuB,GAAGD,IAAI;MAC3D;MACAb,kBAAA,EAAoBA,CAAA,GAAIa,IAAA,KAAgB;QACtC,OAAO,KAAKpB,aAAA,CAAcO,kBAAA,CAAmB,GAAGa,IAAI;MACtD;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}