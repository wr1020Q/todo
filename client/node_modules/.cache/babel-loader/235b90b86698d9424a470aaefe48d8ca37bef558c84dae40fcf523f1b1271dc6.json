{"ast":null,"code":"import { format } from \"outvariant\";\nconst LIBRARY_PREFIX = \"[MSW]\";\nfunction formatMessage(message) {\n  for (var _len = arguments.length, positionals = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    positionals[_key - 1] = arguments[_key];\n  }\n  const interpolatedMessage = format(message, ...positionals);\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`;\n}\nfunction warn(message) {\n  for (var _len2 = arguments.length, positionals = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    positionals[_key2 - 1] = arguments[_key2];\n  }\n  console.warn(formatMessage(message, ...positionals));\n}\nfunction error(message) {\n  for (var _len3 = arguments.length, positionals = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    positionals[_key3 - 1] = arguments[_key3];\n  }\n  console.error(formatMessage(message, ...positionals));\n}\nconst devUtils = {\n  formatMessage,\n  warn,\n  error\n};\nclass InternalError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InternalError\";\n  }\n}\nexport { InternalError, devUtils };","map":{"version":3,"names":["format","LIBRARY_PREFIX","formatMessage","message","_len","arguments","length","positionals","Array","_key","interpolatedMessage","warn","_len2","_key2","console","error","_len3","_key3","devUtils","InternalError","Error","constructor","name"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\core\\utils\\internal\\devUtils.ts"],"sourcesContent":["import { format } from 'outvariant'\n\nconst LIBRARY_PREFIX = '[MSW]'\n\n/**\n * Formats a given message by appending the library's prefix string.\n */\nfunction formatMessage(message: string, ...positionals: any[]): string {\n  const interpolatedMessage = format(message, ...positionals)\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`\n}\n\n/**\n * Prints a library-specific warning.\n */\nfunction warn(message: string, ...positionals: any[]): void {\n  // eslint-disable-next-line no-console\n  console.warn(formatMessage(message, ...positionals))\n}\n\n/**\n * Prints a library-specific error.\n */\nfunction error(message: string, ...positionals: any[]): void {\n  // eslint-disable-next-line no-console\n  console.error(formatMessage(message, ...positionals))\n}\n\nexport const devUtils = {\n  formatMessage,\n  warn,\n  error,\n}\n\n/**\n * Internal error instance.\n * Used to differentiate the library errors that must be forwarded\n * to the user from the unhandled exceptions. Use this if you don't\n * wish for the error to be coerced to a 500 fallback response.\n */\nexport class InternalError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'InternalError'\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAA,QAAc;AAEvB,MAAMC,cAAA,GAAiB;AAKvB,SAASC,cAAcC,OAAA,EAAgD;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA5BC,WAAA,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAAF,WAAA,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACzC,MAAMC,mBAAA,GAAsBV,MAAA,CAAOG,OAAA,EAAS,GAAGI,WAAW;EAC1D,OAAO,GAAGN,cAAc,IAAIS,mBAAmB;AACjD;AAKA,SAASC,KAAKR,OAAA,EAA8C;EAAA,SAAAS,KAAA,GAAAP,SAAA,CAAAC,MAAA,EAA1BC,WAAA,OAAAC,KAAA,CAAAI,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAAN,WAAA,CAAAM,KAAA,QAAAR,SAAA,CAAAQ,KAAA;EAAA;EAEhCC,OAAA,CAAQH,IAAA,CAAKT,aAAA,CAAcC,OAAA,EAAS,GAAGI,WAAW,CAAC;AACrD;AAKA,SAASQ,MAAMZ,OAAA,EAA8C;EAAA,SAAAa,KAAA,GAAAX,SAAA,CAAAC,MAAA,EAA1BC,WAAA,OAAAC,KAAA,CAAAQ,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAAV,WAAA,CAAAU,KAAA,QAAAZ,SAAA,CAAAY,KAAA;EAAA;EAEjCH,OAAA,CAAQC,KAAA,CAAMb,aAAA,CAAcC,OAAA,EAAS,GAAGI,WAAW,CAAC;AACtD;AAEO,MAAMW,QAAA,GAAW;EACtBhB,aAAA;EACAS,IAAA;EACAI;AACF;AAQO,MAAMI,aAAA,SAAsBC,KAAA,CAAM;EACvCC,YAAYlB,OAAA,EAAiB;IAC3B,MAAMA,OAAO;IACb,KAAKmB,IAAA,GAAO;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}