{"ast":null,"code":"function pipeEvents(source, destination) {\n  const rawEmit = source.emit;\n  if (rawEmit._isPiped) {\n    return;\n  }\n  const sourceEmit = function sourceEmit2(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n    destination.emit(event, ...data);\n    return rawEmit.call(this, event, ...data);\n  };\n  sourceEmit._isPiped = true;\n  source.emit = sourceEmit;\n}\nexport { pipeEvents };","map":{"version":3,"names":["pipeEvents","source","destination","rawEmit","emit","_isPiped","sourceEmit","sourceEmit2","event","_len","arguments","length","data","Array","_key","call"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\core\\utils\\internal\\pipeEvents.ts"],"sourcesContent":["import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Pipes all emitted events from one emitter to another.\n */\nexport function pipeEvents<Events extends EventMap>(\n  source: Emitter<Events>,\n  destination: Emitter<Events>,\n): void {\n  const rawEmit: typeof source.emit & { _isPiped?: boolean } = source.emit\n\n  if (rawEmit._isPiped) {\n    return\n  }\n\n  const sourceEmit: typeof source.emit & { _isPiped?: boolean } =\n    function sourceEmit(this: typeof source, event, ...data) {\n      destination.emit(event, ...data)\n      return rawEmit.call(this, event, ...data)\n    }\n\n  sourceEmit._isPiped = true\n\n  source.emit = sourceEmit\n}\n"],"mappings":"AAKO,SAASA,WACdC,MAAA,EACAC,WAAA,EACM;EACN,MAAMC,OAAA,GAAuDF,MAAA,CAAOG,IAAA;EAEpE,IAAID,OAAA,CAAQE,QAAA,EAAU;IACpB;EACF;EAEA,MAAMC,UAAA,GACJ,SAASC,YAAgCC,KAAA,EAAgB;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IACjDZ,WAAA,CAAYE,IAAA,CAAKI,KAAA,EAAO,GAAGI,IAAI;IAC/B,OAAOT,OAAA,CAAQY,IAAA,CAAK,MAAMP,KAAA,EAAO,GAAGI,IAAI;EAC1C;EAEFN,UAAA,CAAWD,QAAA,GAAW;EAEtBJ,MAAA,CAAOG,IAAA,GAAOE,UAAA;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}