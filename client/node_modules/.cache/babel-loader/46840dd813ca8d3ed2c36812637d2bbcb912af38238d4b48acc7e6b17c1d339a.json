{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/index.ts\nimport { isNodeProcess } from \"is-node-process\";\nimport { format } from \"outvariant\";\n\n// src/colors.ts\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\n\n// src/index.ts\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message) {\n    for (var _len = arguments.length, positionals = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      positionals[_key - 1] = arguments[_key];\n    }\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message) {\n    var _this = this;\n    for (var _len2 = arguments.length, positionals = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      positionals[_key2 - 1] = arguments[_key2];\n    }\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return function (message2) {\n      performance2.measure();\n      for (var _len3 = arguments.length, positionals2 = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        positionals2[_key3 - 1] = arguments[_key3];\n      }\n      _this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: _this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message) {\n    for (var _len4 = arguments.length, positionals = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      positionals[_key4 - 1] = arguments[_key4];\n    }\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message) {\n    for (var _len5 = arguments.length, positionals = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      positionals[_key5 - 1] = arguments[_key5];\n    }\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message) {\n    for (var _len6 = arguments.length, positionals = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      positionals[_key6 - 1] = arguments[_key6];\n    }\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write([colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"), ...positionals.map(serializeInput));\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\"en-GB\")}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\":\n        {\n          return log;\n        }\n      case \"warning\":\n        {\n          return warn;\n        }\n      case \"error\":\n        {\n          return error;\n        }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message) {\n  for (var _len7 = arguments.length, positionals = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    positionals[_key7 - 1] = arguments[_key7];\n  }\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message) {\n  for (var _len8 = arguments.length, positionals = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    positionals[_key8 - 1] = arguments[_key8];\n  }\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message) {\n  for (var _len9 = arguments.length, positionals = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n    positionals[_key9 - 1] = arguments[_key9];\n  }\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\nexport { Logger };","map":{"version":3,"names":["__defProp","Object","defineProperty","__export","target","all","name","get","enumerable","isNodeProcess","format","colors_exports","blue","gray","green","red","yellow","text","IS_NODE","Logger","constructor","prefix","LOGGER_NAME","getVariable","LOGGER_LEVEL","isLoggingEnabled","startsWith","debug","isDefinedAndNotEquals","noop","info","success","warning","error","only","extend","domain","message","_len","arguments","length","positionals","Array","_key","logEntry","level","colors","_this","_len2","_key2","performance2","PerformanceEntry","message2","measure","_len3","positionals2","_key3","deltaTime","_len4","_key4","timestamp","_len5","_key5","_len6","_key6","callback","createEntry","Date","args","customColors","entry","timestampColor","prefixColor","colorize","write","getWriter","formatTimestamp","concat","serializeInput","join","map","toLocaleTimeString","getMilliseconds","log","warn","startTime","endTime","performance","now","toFixed","_len7","_key7","process","stdout","console","_len8","_key8","stderr","_len9","_key9","variableName","env","globalThis","toString","value","expected","JSON","stringify"],"sources":["C:/Users/hinan/todo-app/client/node_modules/@open-draft/logger/lib/index.mjs"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/index.ts\nimport { isNodeProcess } from \"is-node-process\";\nimport { format } from \"outvariant\";\n\n// src/colors.ts\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\n\n// src/index.ts\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message, ...positionals) {\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return (message2, ...positionals2) => {\n      performance2.measure();\n      this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message, ...positionals) {\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message, ...positionals) {\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */ new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write(\n      [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"),\n      ...positionals.map(serializeInput)\n    );\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\n      \"en-GB\"\n    )}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\": {\n        return log;\n      }\n      case \"warning\": {\n        return warn;\n      }\n      case \"error\": {\n        return error;\n      }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message, ...positionals) {\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\nexport {\n  Logger\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC9B,KAAK,IAAIC,IAAI,IAAID,GAAG,EAClBL,SAAS,CAACI,MAAM,EAAEE,IAAI,EAAE;IAAEC,GAAG,EAAEF,GAAG,CAACC,IAAI,CAAC;IAAEE,UAAU,EAAE;EAAK,CAAC,CAAC;AACjE,CAAC;;AAED;AACA,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,MAAM,QAAQ,YAAY;;AAEnC;AACA,IAAIC,cAAc,GAAG,CAAC,CAAC;AACvBR,QAAQ,CAACQ,cAAc,EAAE;EACvBC,IAAI,EAAEA,CAAA,KAAMA,IAAI;EAChBC,IAAI,EAAEA,CAAA,KAAMA,IAAI;EAChBC,KAAK,EAAEA,CAAA,KAAMA,KAAK;EAClBC,GAAG,EAAEA,CAAA,KAAMA,GAAG;EACdC,MAAM,EAAEA,CAAA,KAAMA;AAChB,CAAC,CAAC;AACF,SAASA,MAAMA,CAACC,IAAI,EAAE;EACpB,OAAO,WAAWA,IAAI,SAAS;AACjC;AACA,SAASL,IAAIA,CAACK,IAAI,EAAE;EAClB,OAAO,WAAWA,IAAI,SAAS;AACjC;AACA,SAASJ,IAAIA,CAACI,IAAI,EAAE;EAClB,OAAO,WAAWA,IAAI,SAAS;AACjC;AACA,SAASF,GAAGA,CAACE,IAAI,EAAE;EACjB,OAAO,WAAWA,IAAI,SAAS;AACjC;AACA,SAASH,KAAKA,CAACG,IAAI,EAAE;EACnB,OAAO,WAAWA,IAAI,SAAS;AACjC;;AAEA;AACA,IAAIC,OAAO,GAAGT,aAAa,CAAC,CAAC;AAC7B,IAAIU,MAAM,GAAG,MAAM;EACjBC,WAAWA,CAACd,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACe,MAAM,GAAG,IAAI,IAAI,CAACf,IAAI,GAAG;IAC9B,MAAMgB,WAAW,GAAGC,WAAW,CAAC,OAAO,CAAC;IACxC,MAAMC,YAAY,GAAGD,WAAW,CAAC,WAAW,CAAC;IAC7C,MAAME,gBAAgB,GAAGH,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,MAAM,IAAI,OAAOA,WAAW,KAAK,WAAW,IAAI,IAAI,CAAChB,IAAI,CAACoB,UAAU,CAACJ,WAAW,CAAC;IACjJ,IAAIG,gBAAgB,EAAE;MACpB,IAAI,CAACE,KAAK,GAAGC,qBAAqB,CAACJ,YAAY,EAAE,OAAO,CAAC,GAAGK,IAAI,GAAG,IAAI,CAACF,KAAK;MAC7E,IAAI,CAACG,IAAI,GAAGF,qBAAqB,CAACJ,YAAY,EAAE,MAAM,CAAC,GAAGK,IAAI,GAAG,IAAI,CAACC,IAAI;MAC1E,IAAI,CAACC,OAAO,GAAGH,qBAAqB,CAACJ,YAAY,EAAE,SAAS,CAAC,GAAGK,IAAI,GAAG,IAAI,CAACE,OAAO;MACnF,IAAI,CAACC,OAAO,GAAGJ,qBAAqB,CAACJ,YAAY,EAAE,SAAS,CAAC,GAAGK,IAAI,GAAG,IAAI,CAACG,OAAO;MACnF,IAAI,CAACC,KAAK,GAAGL,qBAAqB,CAACJ,YAAY,EAAE,OAAO,CAAC,GAAGK,IAAI,GAAG,IAAI,CAACI,KAAK;IAC/E,CAAC,MAAM;MACL,IAAI,CAACH,IAAI,GAAGD,IAAI;MAChB,IAAI,CAACE,OAAO,GAAGF,IAAI;MACnB,IAAI,CAACG,OAAO,GAAGH,IAAI;MACnB,IAAI,CAACI,KAAK,GAAGJ,IAAI;MACjB,IAAI,CAACK,IAAI,GAAGL,IAAI;IAClB;EACF;EACAR,MAAM;EACNc,MAAMA,CAACC,MAAM,EAAE;IACb,OAAO,IAAIjB,MAAM,CAAC,GAAG,IAAI,CAACb,IAAI,IAAI8B,MAAM,EAAE,CAAC;EAC7C;EACA;AACF;AACA;AACA;AACA;EACET,KAAKA,CAACU,OAAO,EAAkB;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAXF,WAAW,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC3B,IAAI,CAACC,QAAQ,CAAC;MACZC,KAAK,EAAE,OAAO;MACdR,OAAO,EAAExB,IAAI,CAACwB,OAAO,CAAC;MACtBI,WAAW;MACXpB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnByB,MAAM,EAAE;QACNzB,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;EACES,IAAIA,CAACO,OAAO,EAAkB;IAAA,IAAAU,KAAA;IAAA,SAAAC,KAAA,GAAAT,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAM,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAXR,WAAW,CAAAQ,KAAA,QAAAV,SAAA,CAAAU,KAAA;IAAA;IAC1B,IAAI,CAACL,QAAQ,CAAC;MACZC,KAAK,EAAE,MAAM;MACbR,OAAO;MACPI,WAAW;MACXpB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnByB,MAAM,EAAE;QACNzB,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IACF,MAAM6B,YAAY,GAAG,IAAIC,gBAAgB,CAAC,CAAC;IAC3C,OAAO,UAACC,QAAQ,EAAsB;MACpCF,YAAY,CAACG,OAAO,CAAC,CAAC;MAAC,SAAAC,KAAA,GAAAf,SAAA,CAAAC,MAAA,EADJe,YAAY,OAAAb,KAAA,CAAAY,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;QAAZD,YAAY,CAAAC,KAAA,QAAAjB,SAAA,CAAAiB,KAAA;MAAA;MAE/BT,KAAI,CAACH,QAAQ,CAAC;QACZC,KAAK,EAAE,MAAM;QACbR,OAAO,EAAE,GAAGe,QAAQ,IAAIvC,IAAI,CAAC,GAAGqC,YAAY,CAACO,SAAS,IAAI,CAAC,EAAE;QAC7DhB,WAAW,EAAEc,YAAY;QACzBlC,MAAM,EAAE0B,KAAI,CAAC1B,MAAM;QACnByB,MAAM,EAAE;UACNzB,MAAM,EAAE;QACV;MACF,CAAC,CAAC;IACJ,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;EACEU,OAAOA,CAACM,OAAO,EAAkB;IAAA,SAAAqB,KAAA,GAAAnB,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAgB,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAXlB,WAAW,CAAAkB,KAAA,QAAApB,SAAA,CAAAoB,KAAA;IAAA;IAC7B,IAAI,CAACf,QAAQ,CAAC;MACZC,KAAK,EAAE,MAAM;MACbR,OAAO;MACPI,WAAW;MACXpB,MAAM,EAAE,UAAU,IAAI,CAACA,MAAM,EAAE;MAC/ByB,MAAM,EAAE;QACNc,SAAS,EAAE,OAAO;QAClBvC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;EACEW,OAAOA,CAACK,OAAO,EAAkB;IAAA,SAAAwB,KAAA,GAAAtB,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAmB,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAXrB,WAAW,CAAAqB,KAAA,QAAAvB,SAAA,CAAAuB,KAAA;IAAA;IAC7B,IAAI,CAAClB,QAAQ,CAAC;MACZC,KAAK,EAAE,SAAS;MAChBR,OAAO;MACPI,WAAW;MACXpB,MAAM,EAAE,UAAU,IAAI,CAACA,MAAM,EAAE;MAC/ByB,MAAM,EAAE;QACNc,SAAS,EAAE,QAAQ;QACnBvC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;EACEY,KAAKA,CAACI,OAAO,EAAkB;IAAA,SAAA0B,KAAA,GAAAxB,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAqB,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAXvB,WAAW,CAAAuB,KAAA,QAAAzB,SAAA,CAAAyB,KAAA;IAAA;IAC3B,IAAI,CAACpB,QAAQ,CAAC;MACZC,KAAK,EAAE,OAAO;MACdR,OAAO;MACPI,WAAW;MACXpB,MAAM,EAAE,UAAU,IAAI,CAACA,MAAM,EAAE;MAC/ByB,MAAM,EAAE;QACNc,SAAS,EAAE,KAAK;QAChBvC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,IAAIA,CAAC+B,QAAQ,EAAE;IACbA,QAAQ,CAAC,CAAC;EACZ;EACAC,WAAWA,CAACrB,KAAK,EAAER,OAAO,EAAE;IAC1B,OAAO;MACLuB,SAAS,EAAE,eAAgB,IAAIO,IAAI,CAAC,CAAC;MACrCtB,KAAK;MACLR;IACF,CAAC;EACH;EACAO,QAAQA,CAACwB,IAAI,EAAE;IACb,MAAM;MACJvB,KAAK;MACLR,OAAO;MACPhB,MAAM;MACNyB,MAAM,EAAEuB,YAAY;MACpB5B,WAAW,GAAG;IAChB,CAAC,GAAG2B,IAAI;IACR,MAAME,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACrB,KAAK,EAAER,OAAO,CAAC;IAC9C,MAAMkC,cAAc,GAAGF,YAAY,EAAET,SAAS,IAAI,MAAM;IACxD,MAAMY,WAAW,GAAGH,YAAY,EAAEhD,MAAM,IAAI,MAAM;IAClD,MAAMoD,QAAQ,GAAG;MACfb,SAAS,EAAEjD,cAAc,CAAC4D,cAAc,CAAC;MACzClD,MAAM,EAAEV,cAAc,CAAC6D,WAAW;IACpC,CAAC;IACD,MAAME,KAAK,GAAG,IAAI,CAACC,SAAS,CAAC9B,KAAK,CAAC;IACnC6B,KAAK,CACH,CAACD,QAAQ,CAACb,SAAS,CAAC,IAAI,CAACgB,eAAe,CAACN,KAAK,CAACV,SAAS,CAAC,CAAC,CAAC,CAACiB,MAAM,CAACxD,MAAM,IAAI,IAAI,GAAGoD,QAAQ,CAACpD,MAAM,CAACA,MAAM,CAAC,GAAG,EAAE,CAAC,CAACwD,MAAM,CAACC,cAAc,CAACzC,OAAO,CAAC,CAAC,CAAC0C,IAAI,CAAC,GAAG,CAAC,EAC3J,GAAGtC,WAAW,CAACuC,GAAG,CAACF,cAAc,CACnC,CAAC;EACH;EACAF,eAAeA,CAAChB,SAAS,EAAE;IACzB,OAAO,GAAGA,SAAS,CAACqB,kBAAkB,CACpC,OACF,CAAC,IAAIrB,SAAS,CAACsB,eAAe,CAAC,CAAC,EAAE;EACpC;EACAP,SAASA,CAAC9B,KAAK,EAAE;IACf,QAAQA,KAAK;MACX,KAAK,OAAO;MACZ,KAAK,SAAS;MACd,KAAK,MAAM;QAAE;UACX,OAAOsC,GAAG;QACZ;MACA,KAAK,SAAS;QAAE;UACd,OAAOC,IAAI;QACb;MACA,KAAK,OAAO;QAAE;UACZ,OAAOnD,KAAK;QACd;IACF;EACF;AACF,CAAC;AACD,IAAIkB,gBAAgB,GAAG,MAAM;EAC3BkC,SAAS;EACTC,OAAO;EACP7B,SAAS;EACTrC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACiE,SAAS,GAAGE,WAAW,CAACC,GAAG,CAAC,CAAC;EACpC;EACAnC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACiC,OAAO,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IAChC,MAAM/B,SAAS,GAAG,IAAI,CAAC6B,OAAO,GAAG,IAAI,CAACD,SAAS;IAC/C,IAAI,CAAC5B,SAAS,GAAGA,SAAS,CAACgC,OAAO,CAAC,CAAC,CAAC;EACvC;AACF,CAAC;AACD,IAAI5D,IAAI,GAAGA,CAAA,KAAM,KAAK,CAAC;AACvB,SAASsD,GAAGA,CAAC9C,OAAO,EAAkB;EAAA,SAAAqD,KAAA,GAAAnD,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAgD,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAXlD,WAAW,CAAAkD,KAAA,QAAApD,SAAA,CAAAoD,KAAA;EAAA;EAClC,IAAIzE,OAAO,EAAE;IACX0E,OAAO,CAACC,MAAM,CAACnB,KAAK,CAAChE,MAAM,CAAC2B,OAAO,EAAE,GAAGI,WAAW,CAAC,GAAG,IAAI,CAAC;IAC5D;EACF;EACAqD,OAAO,CAACX,GAAG,CAAC9C,OAAO,EAAE,GAAGI,WAAW,CAAC;AACtC;AACA,SAAS2C,IAAIA,CAAC/C,OAAO,EAAkB;EAAA,SAAA0D,KAAA,GAAAxD,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAqD,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAXvD,WAAW,CAAAuD,KAAA,QAAAzD,SAAA,CAAAyD,KAAA;EAAA;EACnC,IAAI9E,OAAO,EAAE;IACX0E,OAAO,CAACK,MAAM,CAACvB,KAAK,CAAChE,MAAM,CAAC2B,OAAO,EAAE,GAAGI,WAAW,CAAC,GAAG,IAAI,CAAC;IAC5D;EACF;EACAqD,OAAO,CAACV,IAAI,CAAC/C,OAAO,EAAE,GAAGI,WAAW,CAAC;AACvC;AACA,SAASR,KAAKA,CAACI,OAAO,EAAkB;EAAA,SAAA6D,KAAA,GAAA3D,SAAA,CAAAC,MAAA,EAAbC,WAAW,OAAAC,KAAA,CAAAwD,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAX1D,WAAW,CAAA0D,KAAA,QAAA5D,SAAA,CAAA4D,KAAA;EAAA;EACpC,IAAIjF,OAAO,EAAE;IACX0E,OAAO,CAACK,MAAM,CAACvB,KAAK,CAAChE,MAAM,CAAC2B,OAAO,EAAE,GAAGI,WAAW,CAAC,GAAG,IAAI,CAAC;IAC5D;EACF;EACAqD,OAAO,CAAC7D,KAAK,CAACI,OAAO,EAAE,GAAGI,WAAW,CAAC;AACxC;AACA,SAASlB,WAAWA,CAAC6E,YAAY,EAAE;EACjC,IAAIlF,OAAO,EAAE;IACX,OAAO0E,OAAO,CAACS,GAAG,CAACD,YAAY,CAAC;EAClC;EACA,OAAOE,UAAU,CAACF,YAAY,CAAC,EAAEG,QAAQ,CAAC,CAAC;AAC7C;AACA,SAAS3E,qBAAqBA,CAAC4E,KAAK,EAAEC,QAAQ,EAAE;EAC9C,OAAOD,KAAK,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAKC,QAAQ;AAC/C;AACA,SAAS3B,cAAcA,CAACzC,OAAO,EAAE;EAC/B,IAAI,OAAOA,OAAO,KAAK,WAAW,EAAE;IAClC,OAAO,WAAW;EACpB;EACA,IAAIA,OAAO,KAAK,IAAI,EAAE;IACpB,OAAO,MAAM;EACf;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOA,OAAO;EAChB;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOqE,IAAI,CAACC,SAAS,CAACtE,OAAO,CAAC;EAChC;EACA,OAAOA,OAAO,CAACkE,QAAQ,CAAC,CAAC;AAC3B;AACA,SACEpF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}