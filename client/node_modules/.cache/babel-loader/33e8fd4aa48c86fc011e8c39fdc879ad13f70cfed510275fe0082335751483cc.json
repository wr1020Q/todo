{"ast":null,"code":"import { toPublicUrl } from './toPublicUrl.mjs';\nimport { InternalError, devUtils } from '../internal/devUtils.mjs';\nimport { isCommonAssetRequest } from '../../isCommonAssetRequest.mjs';\nasync function onUnhandledRequest(request, strategy = \"warn\") {\n  const url = new URL(request.url);\n  const publicUrl = toPublicUrl(url) + url.search;\n  const requestBody = request.method === \"HEAD\" || request.method === \"GET\" ? null : await request.clone().text();\n  const messageDetails = `\n\n  \\u2022 ${request.method} ${publicUrl}\n\n${requestBody ? `  \\u2022 Request body: ${requestBody}\n\n` : \"\"}`;\n  const unhandledRequestMessage = `intercepted a request without a matching request handler:${messageDetails}If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks`;\n  function applyStrategy(strategy2) {\n    switch (strategy2) {\n      case \"error\":\n        {\n          devUtils.error(\"Error: %s\", unhandledRequestMessage);\n          throw new InternalError(devUtils.formatMessage('Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.'));\n        }\n      case \"warn\":\n        {\n          devUtils.warn(\"Warning: %s\", unhandledRequestMessage);\n          break;\n        }\n      case \"bypass\":\n        break;\n      default:\n        throw new InternalError(devUtils.formatMessage('Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.', strategy2));\n    }\n  }\n  if (typeof strategy === \"function\") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, \"warn\"),\n      error: applyStrategy.bind(null, \"error\")\n    });\n    return;\n  }\n  if (!isCommonAssetRequest(request)) {\n    applyStrategy(strategy);\n  }\n}\nexport { onUnhandledRequest };","map":{"version":3,"names":["toPublicUrl","InternalError","devUtils","isCommonAssetRequest","onUnhandledRequest","request","strategy","url","URL","publicUrl","search","requestBody","method","clone","text","messageDetails","unhandledRequestMessage","applyStrategy","strategy2","error","formatMessage","warn","warning","bind"],"sources":["C:\\Users\\hinan\\todo-app\\client\\node_modules\\msw\\src\\core\\utils\\request\\onUnhandledRequest.ts"],"sourcesContent":["import { toPublicUrl } from './toPublicUrl'\nimport { InternalError, devUtils } from '../internal/devUtils'\nimport { isCommonAssetRequest } from '../../isCommonAssetRequest'\n\nexport interface UnhandledRequestPrint {\n  warning(): void\n  error(): void\n}\n\nexport type UnhandledRequestCallback = (\n  request: Request,\n  print: UnhandledRequestPrint,\n) => void\n\nexport type UnhandledRequestStrategy =\n  | 'bypass'\n  | 'warn'\n  | 'error'\n  | UnhandledRequestCallback\n\nexport async function onUnhandledRequest(\n  request: Request,\n  strategy: UnhandledRequestStrategy = 'warn',\n): Promise<void> {\n  const url = new URL(request.url)\n  const publicUrl = toPublicUrl(url) + url.search\n\n  const requestBody =\n    request.method === 'HEAD' || request.method === 'GET'\n      ? null\n      : await request.clone().text()\n  const messageDetails = `\\n\\n  \\u2022 ${request.method} ${publicUrl}\\n\\n${requestBody ? `  \\u2022 Request body: ${requestBody}\\n\\n` : ''}`\n  const unhandledRequestMessage = `intercepted a request without a matching request handler:${messageDetails}If you still wish to intercept this unhandled request, please create a request handler for it.\\nRead more: https://mswjs.io/docs/getting-started/mocks`\n\n  function applyStrategy(strategy: UnhandledRequestStrategy) {\n    switch (strategy) {\n      case 'error': {\n        // Print a developer-friendly error.\n        devUtils.error('Error: %s', unhandledRequestMessage)\n\n        // Throw an exception to halt request processing and not perform the original request.\n        throw new InternalError(\n          devUtils.formatMessage(\n            'Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.',\n          ),\n        )\n      }\n\n      case 'warn': {\n        devUtils.warn('Warning: %s', unhandledRequestMessage)\n        break\n      }\n\n      case 'bypass':\n        break\n\n      default:\n        throw new InternalError(\n          devUtils.formatMessage(\n            'Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.',\n            strategy,\n          ),\n        )\n    }\n  }\n\n  if (typeof strategy === 'function') {\n    strategy(request, {\n      warning: applyStrategy.bind(null, 'warn'),\n      error: applyStrategy.bind(null, 'error'),\n    })\n    return\n  }\n\n  // Ignore common static asset requests when using a built-in strategy.\n  // There's a slight overhead here because this utility will create a request URL\n  // instance again despite us having done so previously in this function.\n  if (!isCommonAssetRequest(request)) {\n    applyStrategy(strategy)\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAA,QAAmB;AAC5B,SAASC,aAAA,EAAeC,QAAA,QAAgB;AACxC,SAASC,oBAAA,QAA4B;AAkBrC,eAAsBC,mBACpBC,OAAA,EACAC,QAAA,GAAqC,QACtB;EACf,MAAMC,GAAA,GAAM,IAAIC,GAAA,CAAIH,OAAA,CAAQE,GAAG;EAC/B,MAAME,SAAA,GAAYT,WAAA,CAAYO,GAAG,IAAIA,GAAA,CAAIG,MAAA;EAEzC,MAAMC,WAAA,GACJN,OAAA,CAAQO,MAAA,KAAW,UAAUP,OAAA,CAAQO,MAAA,KAAW,QAC5C,OACA,MAAMP,OAAA,CAAQQ,KAAA,CAAM,EAAEC,IAAA,CAAK;EACjC,MAAMC,cAAA,GAAiB;AAAA;AAAA,WAAgBV,OAAA,CAAQO,MAAM,IAAIH,SAAS;AAAA;AAAA,EAAOE,WAAA,GAAc,0BAA0BA,WAAW;AAAA;AAAA,IAAS,EAAE;EACvI,MAAMK,uBAAA,GAA0B,4DAA4DD,cAAc;AAAA;EAE1G,SAASE,cAAcC,SAAA,EAAoC;IACzD,QAAQA,SAAA;MACN,KAAK;QAAS;UAEZhB,QAAA,CAASiB,KAAA,CAAM,aAAaH,uBAAuB;UAGnD,MAAM,IAAIf,aAAA,CACRC,QAAA,CAASkB,aAAA,CACP,8FACF,CACF;QACF;MAEA,KAAK;QAAQ;UACXlB,QAAA,CAASmB,IAAA,CAAK,eAAeL,uBAAuB;UACpD;QACF;MAEA,KAAK;QACH;MAEF;QACE,MAAM,IAAIf,aAAA,CACRC,QAAA,CAASkB,aAAA,CACP,6NACAF,SACF,CACF;IACJ;EACF;EAEA,IAAI,OAAOZ,QAAA,KAAa,YAAY;IAClCA,QAAA,CAASD,OAAA,EAAS;MAChBiB,OAAA,EAASL,aAAA,CAAcM,IAAA,CAAK,MAAM,MAAM;MACxCJ,KAAA,EAAOF,aAAA,CAAcM,IAAA,CAAK,MAAM,OAAO;IACzC,CAAC;IACD;EACF;EAKA,IAAI,CAACpB,oBAAA,CAAqBE,OAAO,GAAG;IAClCY,aAAA,CAAcX,QAAQ;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}