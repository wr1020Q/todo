{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hinan\\\\todo-app\\\\client\\\\src\\\\context\\\\TaskContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useEffect, useState } from \"react\";\nimport { getCategories, addCategoryAPI, deleteCategory, getTasks } from \"../services/TaskService\";\nimport { showSuccess, showError } from \"../utils/toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nconst initialState = {\n  tasks: [],\n  editText: \"\",\n  isLoading: true,\n  categoryFilter: [],\n  sortBy: \"deadlineAsc\"\n};\nconst taskReducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT_TASKS\":\n      return {\n        ...state,\n        tasks: action.payload,\n        isLoading: false\n      };\n    case \"ADD_TASK\":\n      console.log(\"ADD_TASK\");\n      return {\n        ...state,\n        tasks: [...(state.tasks || []), action.payload]\n      };\n    case \"DELETE_TASK\":\n      return {\n        ...state,\n        tasks: state.tasks.filter(task => task._id !== action.payload.id)\n      };\n    case \"START_EDITING\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload.id ? {\n          ...task,\n          isEditing: true\n        } : task),\n        editText: action.payload.text\n      };\n    case \"SAVE_EDIT\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload.id ? {\n          ...task,\n          text: action.payload.text,\n          isEditing: false\n        } : task),\n        editText: \"\"\n      };\n    case \"TOGGLE_TASK\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload.id ? {\n          ...task,\n          completed: !task.completed\n        } : task),\n        editText: \"\"\n      };\n    case \"UPDATE_PRIORITY\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload.id ? {\n          ...task,\n          priority: action.payload.newPriority\n        } : task)\n      };\n    case \"SET_DUE_DATE\":\n      return {\n        ...state,\n        dueDate: action.payload\n      };\n    case \"UPDATE_DUE_DATE\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload.id ? {\n          ...task,\n          dueDate: action.payload.dueDate\n        } : task)\n      };\n    case \"TOGGLE_CATEGORY_FILTER\":\n      const categoryId = action.payload._id || action.payload; // ID を抽出\n      const isSelected = state.categoryFilter.includes(categoryId);\n      return {\n        ...state,\n        categoryFilter: isSelected ? state.categoryFilter.filter(id => id !== categoryId) : [...state.categoryFilter, categoryId]\n      };\n    case 'SET_CATEGORY_FILTER':\n      return {\n        ...state,\n        categoryFilter: action.payload.map(cat => typeof cat === 'object' ? cat._id : cat)\n      };\n    case \"SET_SORT\":\n      return {\n        ...state,\n        sortBy: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(taskReducer, initialState);\n  const [categories, setCategories] = useState([]);\n  const [newCategory, setNewCategory] = useState(\"\");\n  const addCategory = async () => {\n    if (newCategory && categories.some(c => c.title === newCategory)) {\n      showError(\"このカテゴリーは既に存在します\");\n      return;\n    }\n    try {\n      console.log(\"新しいカテゴリー\", newCategory);\n      const updated = await addCategoryAPI(newCategory);\n      setCategories(prev => [...prev, updated.data]);\n      setNewCategory(\"\");\n      showSuccess(\"カテゴリーを追加しました\");\n    } catch (err) {\n      showError(\"カテゴリーを追加できませんでした\");\n      console.error(\"カテゴリ追加失敗:\", err);\n    }\n  };\n  const removeCategory = async (id, title) => {\n    if (title === \"未分類\") return;\n    try {\n      await deleteCategory(id);\n      const res = await getTasks();\n      const catRes = await getCategories();\n      setCategories(catRes.data);\n      dispatch({\n        type: \"INIT_TASKS\",\n        payload: res.data\n      });\n      showSuccess(\"カテゴリーを削除しました\");\n    } catch (err) {\n      showError(\"カテゴリーを削除できませんでした\");\n      console.error(\"カテゴリ削除エラー\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      categories,\n      setCategories,\n      selectedCategory,\n      setSelectedCategory,\n      newCategory,\n      setNewCategory,\n      addCategory,\n      removeCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 8\n  }, this);\n};\n_s(TaskProvider, \"fwmMO8556Z//Jz1OIGJIhuqekNg=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["createContext","useReducer","useEffect","useState","getCategories","addCategoryAPI","deleteCategory","getTasks","showSuccess","showError","jsxDEV","_jsxDEV","TaskContext","initialState","tasks","editText","isLoading","categoryFilter","sortBy","taskReducer","state","action","type","payload","console","log","filter","task","_id","id","map","isEditing","text","completed","priority","newPriority","dueDate","categoryId","isSelected","includes","cat","TaskProvider","children","_s","dispatch","categories","setCategories","newCategory","setNewCategory","addCategory","some","c","title","updated","prev","data","err","error","removeCategory","res","catRes","Provider","value","selectedCategory","setSelectedCategory","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hinan/todo-app/client/src/context/TaskContext.jsx"],"sourcesContent":["import { createContext, useReducer,useEffect, useState} from \"react\";\r\nimport { getCategories, addCategoryAPI ,deleteCategory,getTasks} from \"../services/TaskService\";\r\nimport {showSuccess,showError} from \"../utils/toast\";\r\nexport const TaskContext = createContext();\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n  editText: \"\",\r\n  isLoading: true,\r\n  categoryFilter: [],\r\n  sortBy: \"deadlineAsc\", \r\n};\r\n\r\nconst taskReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"INIT_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.payload,\r\n                isLoading: false\r\n            };\r\n        case \"ADD_TASK\":\r\n          console.log(\"ADD_TASK\")\r\n            return {\r\n              ...state,\r\n              tasks: [...(state.tasks || []), action.payload],\r\n            };\r\n        case \"DELETE_TASK\":\r\n          return{\r\n              ...state,\r\n              tasks: state.tasks.filter(task => task._id !== action.payload.id)\r\n          };\r\n        case \"START_EDITING\":\r\n            return {\r\n              ...state,\r\n              tasks: state.tasks.map(task =>\r\n                task._id === action.payload.id\r\n                  ? { ...task, isEditing: true }\r\n                  : task\r\n              ),\r\n              editText: action.payload.text,\r\n            };\r\n        case \"SAVE_EDIT\":\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task =>\r\n                task._id === action.payload.id\r\n                    ? { ...task, text: action.payload.text, isEditing: false }\r\n                    : task\r\n                ),\r\n                  editText:\"\"\r\n            };\r\n        case \"TOGGLE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task =>\r\n                    task._id === action.payload.id\r\n                    ? { ...task, completed: !task.completed }\r\n                    : task\r\n                ),\r\n                    editText:\"\"\r\n            };\r\n        case \"UPDATE_PRIORITY\":\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task =>\r\n                task._id === action.payload.id\r\n                    ? { ...task, priority: action.payload.newPriority }\r\n                    : task\r\n                ),\r\n            };\r\n        case \"SET_DUE_DATE\":\r\n              return {\r\n                  ...state,\r\n                  dueDate: action.payload,\r\n              };\r\n        case \"UPDATE_DUE_DATE\":\r\n              return {\r\n                  ...state,\r\n                  tasks: state.tasks.map(task =>\r\n                    task._id === action.payload.id\r\n                      ? { ...task, dueDate: action.payload.dueDate }\r\n                      : task\r\n                  )\r\n                };\r\n        case \"TOGGLE_CATEGORY_FILTER\":\r\n              const categoryId = action.payload._id || action.payload; // ID を抽出\r\n              const isSelected = state.categoryFilter.includes(categoryId);\r\n              return {\r\n                  ...state,\r\n                  categoryFilter: isSelected\r\n                  ? state.categoryFilter.filter((id) => id !== categoryId)\r\n                  : [...state.categoryFilter, categoryId],\r\n              };\r\n        case 'SET_CATEGORY_FILTER':\r\n              return {\r\n                  ...state,\r\n                  categoryFilter: action.payload.map(cat => typeof cat === 'object' ? cat._id : cat),\r\n              };\r\n        case \"SET_SORT\":\r\n            return {\r\n                ...state,\r\n                sortBy: action.payload,\r\n            };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  export const TaskProvider = ({ children }) => {\r\n\r\n  const [state, dispatch] = useReducer(taskReducer, initialState);\r\n  const [categories, setCategories] = useState([]);\r\n  const [newCategory, setNewCategory] = useState(\"\");\r\n\r\n  const addCategory = async () => {\r\n    if (newCategory && categories.some(c => c.title === newCategory)) {\r\n        showError(\"このカテゴリーは既に存在します\");\r\n        return;\r\n    }\r\n      try {\r\n        console.log(\"新しいカテゴリー\",newCategory)\r\n        const updated = await addCategoryAPI(newCategory);\r\n        setCategories(prev => [...prev, updated.data]); \r\n        setNewCategory(\"\");\r\n        showSuccess(\"カテゴリーを追加しました\")\r\n      } catch (err) {\r\n        showError(\"カテゴリーを追加できませんでした\")\r\n        console.error(\"カテゴリ追加失敗:\", err);\r\n      }\r\n    \r\n  };\r\n  \r\n    const removeCategory = async(id, title) => {\r\n      if (title === \"未分類\") return;\r\n    \r\n    try {\r\n      await deleteCategory(id); \r\n      const res = await getTasks(); \r\n      const catRes = await getCategories();\r\n  \r\n      setCategories(catRes.data);\r\n      dispatch({ type: \"INIT_TASKS\", payload: res.data });\r\n      showSuccess(\"カテゴリーを削除しました\")\r\n    } catch (err) {\r\n      showError(\"カテゴリーを削除できませんでした\")\r\n      console.error(\"カテゴリ削除エラー\", err);\r\n    }\r\n    };\r\n       \r\nreturn (\r\n       <TaskContext.Provider\r\n      value={{\r\n        state,\r\n        dispatch,\r\n        categories,\r\n        setCategories,\r\n        selectedCategory,\r\n        setSelectedCategory,\r\n        newCategory,\r\n        setNewCategory,\r\n        addCategory,\r\n        removeCategory\r\n      }}\r\n    >\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}